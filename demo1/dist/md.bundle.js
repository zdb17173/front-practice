!function(e){function n(n){for(var r,a,l=n[0],o=n[1],c=n[2],p=0,h=[];p<l.length;p++)a=l[p],s[a]&&h.push(s[a][0]),s[a]=0;for(r in o)Object.prototype.hasOwnProperty.call(o,r)&&(e[r]=o[r]);for(u&&u(n);h.length;)h.shift()();return i.push.apply(i,c||[]),t()}function t(){for(var e,n=0;n<i.length;n++){for(var t=i[n],r=!0,l=1;l<t.length;l++){var o=t[l];0!==s[o]&&(r=!1)}r&&(i.splice(n--,1),e=a(a.s=t[0]))}return e}var r={},s={4:0},i=[];function a(n){if(r[n])return r[n].exports;var t=r[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,a),t.l=!0,t.exports}a.m=e,a.c=r,a.d=function(e,n,t){a.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,n){if(1&n&&(e=a(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(a.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)a.d(t,r,function(n){return e[n]}.bind(null,r));return t},a.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(n,"a",n),n},a.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},a.p="";var l=window.webpackJsonp=window.webpackJsonp||[],o=l.push.bind(l);l.push=n,l=l.slice();for(var c=0;c<l.length;c++)n(l[c]);var u=o;i.push([69,0]),t()}({12:function(e,n,t){(function(n){!function(n){"use strict";var t={newline:/^\n+/,code:/^( {4}[^\n]+\n*)+/,fences:f,hr:/^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,heading:/^ *(#{1,6}) *([^\n]+?) *(?:#+ *)?(?:\n+|$)/,nptable:f,blockquote:/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,list:/^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,html:"^ {0,3}(?:<(script|pre|style)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?\\?>\\n*|<![A-Z][\\s\\S]*?>\\n*|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\n*|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:\\n{2,}|$)|<(?!script|pre|style)([a-z][\\w-]*)(?:attribute)*? */?>(?=\\h*\\n)[\\s\\S]*?(?:\\n{2,}|$)|</(?!script|pre|style)[a-z][\\w-]*\\s*>(?=\\h*\\n)[\\s\\S]*?(?:\\n{2,}|$))",def:/^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,table:f,lheading:/^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,paragraph:/^([^\n]+(?:\n(?!hr|heading|lheading| {0,3}>|<\/?(?:tag)(?: +|\n|\/?>)|<(?:script|pre|style|!--))[^\n]+)*)/,text:/^[^\n]+/};function r(e){this.tokens=[],this.tokens.links=Object.create(null),this.options=e||k.defaults,this.rules=t.normal,this.options.pedantic?this.rules=t.pedantic:this.options.gfm&&(this.options.tables?this.rules=t.tables:this.rules=t.gfm)}t._label=/(?!\s*\])(?:\\[\[\]]|[^\[\]])+/,t._title=/(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/,t.def=p(t.def).replace("label",t._label).replace("title",t._title).getRegex(),t.bullet=/(?:[*+-]|\d+\.)/,t.item=/^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/,t.item=p(t.item,"gm").replace(/bull/g,t.bullet).getRegex(),t.list=p(t.list).replace(/bull/g,t.bullet).replace("hr","\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def","\\n+(?="+t.def.source+")").getRegex(),t._tag="address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul",t._comment=/<!--(?!-?>)[\s\S]*?-->/,t.html=p(t.html,"i").replace("comment",t._comment).replace("tag",t._tag).replace("attribute",/ +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex(),t.paragraph=p(t.paragraph).replace("hr",t.hr).replace("heading",t.heading).replace("lheading",t.lheading).replace("tag",t._tag).getRegex(),t.blockquote=p(t.blockquote).replace("paragraph",t.paragraph).getRegex(),t.normal=m({},t),t.gfm=m({},t.normal,{fences:/^ *(`{3,}|~{3,})[ \.]*(\S+)? *\n([\s\S]*?)\n? *\1 *(?:\n+|$)/,paragraph:/^/,heading:/^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/}),t.gfm.paragraph=p(t.paragraph).replace("(?!","(?!"+t.gfm.fences.source.replace("\\1","\\2")+"|"+t.list.source.replace("\\1","\\3")+"|").getRegex(),t.tables=m({},t.gfm,{nptable:/^ *([^|\n ].*\|.*)\n *([-:]+ *\|[-| :]*)(?:\n((?:.*[^>\n ].*(?:\n|$))*)\n*|$)/,table:/^ *\|(.+)\n *\|?( *[-:]+[-| :]*)(?:\n((?: *[^>\n ].*(?:\n|$))*)\n*|$)/}),t.pedantic=m({},t.normal,{html:p("^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))").replace("comment",t._comment).replace(/tag/g,"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/}),r.rules=t,r.lex=function(e,n){return new r(n).lex(e)},r.prototype.lex=function(e){return e=e.replace(/\r\n|\r/g,"\n").replace(/\t/g,"    ").replace(/\u00a0/g," ").replace(/\u2424/g,"\n"),this.token(e,!0)},r.prototype.token=function(e,n){var r,s,i,a,l,o,c,u,p,h,g,d,f,m,k,x;for(e=e.replace(/^ +$/gm,"");e;)if((i=this.rules.newline.exec(e))&&(e=e.substring(i[0].length),i[0].length>1&&this.tokens.push({type:"space"})),i=this.rules.code.exec(e))e=e.substring(i[0].length),i=i[0].replace(/^ {4}/gm,""),this.tokens.push({type:"code",text:this.options.pedantic?i:_(i,"\n")});else if(i=this.rules.fences.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"code",lang:i[2],text:i[3]||""});else if(i=this.rules.heading.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"heading",depth:i[1].length,text:i[2]});else if(n&&(i=this.rules.nptable.exec(e))&&(o={type:"table",header:b(i[1].replace(/^ *| *\| *$/g,"")),align:i[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:i[3]?i[3].replace(/\n$/,"").split("\n"):[]}).header.length===o.align.length){for(e=e.substring(i[0].length),g=0;g<o.align.length;g++)/^ *-+: *$/.test(o.align[g])?o.align[g]="right":/^ *:-+: *$/.test(o.align[g])?o.align[g]="center":/^ *:-+ *$/.test(o.align[g])?o.align[g]="left":o.align[g]=null;for(g=0;g<o.cells.length;g++)o.cells[g]=b(o.cells[g],o.header.length);this.tokens.push(o)}else if(i=this.rules.hr.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"hr"});else if(i=this.rules.blockquote.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"blockquote_start"}),i=i[0].replace(/^ *> ?/gm,""),this.token(i,n),this.tokens.push({type:"blockquote_end"});else if(i=this.rules.list.exec(e)){for(e=e.substring(i[0].length),c={type:"list_start",ordered:m=(a=i[2]).length>1,start:m?+a:"",loose:!1},this.tokens.push(c),u=[],r=!1,f=(i=i[0].match(this.rules.item)).length,g=0;g<f;g++)h=(o=i[g]).length,~(o=o.replace(/^ *([*+-]|\d+\.) +/,"")).indexOf("\n ")&&(h-=o.length,o=this.options.pedantic?o.replace(/^ {1,4}/gm,""):o.replace(new RegExp("^ {1,"+h+"}","gm"),"")),this.options.smartLists&&g!==f-1&&(a===(l=t.bullet.exec(i[g+1])[0])||a.length>1&&l.length>1||(e=i.slice(g+1).join("\n")+e,g=f-1)),s=r||/\n\n(?!\s*$)/.test(o),g!==f-1&&(r="\n"===o.charAt(o.length-1),s||(s=r)),s&&(c.loose=!0),x=void 0,(k=/^\[[ xX]\] /.test(o))&&(x=" "!==o[1],o=o.replace(/^\[[ xX]\] +/,"")),p={type:"list_item_start",task:k,checked:x,loose:s},u.push(p),this.tokens.push(p),this.token(o,!1),this.tokens.push({type:"list_item_end"});if(c.loose)for(f=u.length,g=0;g<f;g++)u[g].loose=!0;this.tokens.push({type:"list_end"})}else if(i=this.rules.html.exec(e))e=e.substring(i[0].length),this.tokens.push({type:this.options.sanitize?"paragraph":"html",pre:!this.options.sanitizer&&("pre"===i[1]||"script"===i[1]||"style"===i[1]),text:i[0]});else if(n&&(i=this.rules.def.exec(e)))e=e.substring(i[0].length),i[3]&&(i[3]=i[3].substring(1,i[3].length-1)),d=i[1].toLowerCase().replace(/\s+/g," "),this.tokens.links[d]||(this.tokens.links[d]={href:i[2],title:i[3]});else if(n&&(i=this.rules.table.exec(e))&&(o={type:"table",header:b(i[1].replace(/^ *| *\| *$/g,"")),align:i[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:i[3]?i[3].replace(/(?: *\| *)?\n$/,"").split("\n"):[]}).header.length===o.align.length){for(e=e.substring(i[0].length),g=0;g<o.align.length;g++)/^ *-+: *$/.test(o.align[g])?o.align[g]="right":/^ *:-+: *$/.test(o.align[g])?o.align[g]="center":/^ *:-+ *$/.test(o.align[g])?o.align[g]="left":o.align[g]=null;for(g=0;g<o.cells.length;g++)o.cells[g]=b(o.cells[g].replace(/^ *\| *| *\| *$/g,""),o.header.length);this.tokens.push(o)}else if(i=this.rules.lheading.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"heading",depth:"="===i[2]?1:2,text:i[1]});else if(n&&(i=this.rules.paragraph.exec(e)))e=e.substring(i[0].length),this.tokens.push({type:"paragraph",text:"\n"===i[1].charAt(i[1].length-1)?i[1].slice(0,-1):i[1]});else if(i=this.rules.text.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"text",text:i[0]});else if(e)throw new Error("Infinite loop on byte: "+e.charCodeAt(0));return this.tokens};var s={escape:/^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,autolink:/^<(scheme:[^\s\x00-\x1f<>]*|email)>/,url:f,tag:"^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",link:/^!?\[(label)\]\(href(?:\s+(title))?\s*\)/,reflink:/^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,nolink:/^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,strong:/^__([^\s])__(?!_)|^\*\*([^\s])\*\*(?!\*)|^__([^\s][\s\S]*?[^\s])__(?!_)|^\*\*([^\s][\s\S]*?[^\s])\*\*(?!\*)/,em:/^_([^\s_])_(?!_)|^\*([^\s*"<\[])\*(?!\*)|^_([^\s][\s\S]*?[^\s_])_(?!_)|^_([^\s_][\s\S]*?[^\s])_(?!_)|^\*([^\s"<\[][\s\S]*?[^\s*])\*(?!\*)|^\*([^\s*"<\[][\s\S]*?[^\s])\*(?!\*)/,code:/^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,br:/^( {2,}|\\)\n(?!\s*$)/,del:f,text:/^(`+|[^`])[\s\S]*?(?=[\\<!\[`*]|\b_| {2,}\n|$)/};function i(e,n){if(this.options=n||k.defaults,this.links=e,this.rules=s.normal,this.renderer=this.options.renderer||new a,this.renderer.options=this.options,!this.links)throw new Error("Tokens array requires a `links` property.");this.options.pedantic?this.rules=s.pedantic:this.options.gfm&&(this.options.breaks?this.rules=s.breaks:this.rules=s.gfm)}function a(e){this.options=e||k.defaults}function l(){}function o(e){this.tokens=[],this.token=null,this.options=e||k.defaults,this.options.renderer=this.options.renderer||new a,this.renderer=this.options.renderer,this.renderer.options=this.options}function c(e,n){if(n){if(c.escapeTest.test(e))return e.replace(c.escapeReplace,function(e){return c.replacements[e]})}else if(c.escapeTestNoEncode.test(e))return e.replace(c.escapeReplaceNoEncode,function(e){return c.replacements[e]});return e}function u(e){return e.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi,function(e,n){return"colon"===(n=n.toLowerCase())?":":"#"===n.charAt(0)?"x"===n.charAt(1)?String.fromCharCode(parseInt(n.substring(2),16)):String.fromCharCode(+n.substring(1)):""})}function p(e,n){return e=e.source||e,n=n||"",{replace:function(n,t){return t=(t=t.source||t).replace(/(^|[^\[])\^/g,"$1"),e=e.replace(n,t),this},getRegex:function(){return new RegExp(e,n)}}}function h(e,n){return g[" "+e]||(/^[^:]+:\/*[^/]*$/.test(e)?g[" "+e]=e+"/":g[" "+e]=_(e,"/",!0)),e=g[" "+e],"//"===n.slice(0,2)?e.replace(/:[\s\S]*/,":")+n:"/"===n.charAt(0)?e.replace(/(:\/*[^/]*)[\s\S]*/,"$1")+n:e+n}s._escapes=/\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g,s._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,s._email=/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,s.autolink=p(s.autolink).replace("scheme",s._scheme).replace("email",s._email).getRegex(),s._attribute=/\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/,s.tag=p(s.tag).replace("comment",t._comment).replace("attribute",s._attribute).getRegex(),s._label=/(?:\[[^\[\]]*\]|\\[\[\]]?|`[^`]*`|[^\[\]\\])*?/,s._href=/\s*(<(?:\\[<>]?|[^\s<>\\])*>|(?:\\[()]?|\([^\s\x00-\x1f\\]*\)|[^\s\x00-\x1f()\\])*?)/,s._title=/"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/,s.link=p(s.link).replace("label",s._label).replace("href",s._href).replace("title",s._title).getRegex(),s.reflink=p(s.reflink).replace("label",s._label).getRegex(),s.normal=m({},s),s.pedantic=m({},s.normal,{strong:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,em:/^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/,link:p(/^!?\[(label)\]\((.*?)\)/).replace("label",s._label).getRegex(),reflink:p(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label",s._label).getRegex()}),s.gfm=m({},s.normal,{escape:p(s.escape).replace("])","~|])").getRegex(),_extended_email:/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,url:/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,_backpedal:/(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,del:/^~+(?=\S)([\s\S]*?\S)~+/,text:p(s.text).replace("]|","~]|").replace("|$","|https?://|ftp://|www\\.|[a-zA-Z0-9.!#$%&'*+/=?^_`{\\|}~-]+@|$").getRegex()}),s.gfm.url=p(s.gfm.url).replace("email",s.gfm._extended_email).getRegex(),s.breaks=m({},s.gfm,{br:p(s.br).replace("{2,}","*").getRegex(),text:p(s.gfm.text).replace("{2,}","*").getRegex()}),i.rules=s,i.output=function(e,n,t){return new i(n,t).output(e)},i.prototype.output=function(e){for(var n,t,r,s,a,l,o="";e;)if(a=this.rules.escape.exec(e))e=e.substring(a[0].length),o+=a[1];else if(a=this.rules.autolink.exec(e))e=e.substring(a[0].length),r="@"===a[2]?"mailto:"+(t=c(this.mangle(a[1]))):t=c(a[1]),o+=this.renderer.link(r,null,t);else if(this.inLink||!(a=this.rules.url.exec(e))){if(a=this.rules.tag.exec(e))!this.inLink&&/^<a /i.test(a[0])?this.inLink=!0:this.inLink&&/^<\/a>/i.test(a[0])&&(this.inLink=!1),!this.inRawBlock&&/^<(pre|code|kbd|script)(\s|>)/i.test(a[0])?this.inRawBlock=!0:this.inRawBlock&&/^<\/(pre|code|kbd|script)(\s|>)/i.test(a[0])&&(this.inRawBlock=!1),e=e.substring(a[0].length),o+=this.options.sanitize?this.options.sanitizer?this.options.sanitizer(a[0]):c(a[0]):a[0];else if(a=this.rules.link.exec(e))e=e.substring(a[0].length),this.inLink=!0,r=a[2],this.options.pedantic?(n=/^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(r))?(r=n[1],s=n[3]):s="":s=a[3]?a[3].slice(1,-1):"",r=r.trim().replace(/^<([\s\S]*)>$/,"$1"),o+=this.outputLink(a,{href:i.escapes(r),title:i.escapes(s)}),this.inLink=!1;else if((a=this.rules.reflink.exec(e))||(a=this.rules.nolink.exec(e))){if(e=e.substring(a[0].length),n=(a[2]||a[1]).replace(/\s+/g," "),!(n=this.links[n.toLowerCase()])||!n.href){o+=a[0].charAt(0),e=a[0].substring(1)+e;continue}this.inLink=!0,o+=this.outputLink(a,n),this.inLink=!1}else if(a=this.rules.strong.exec(e))e=e.substring(a[0].length),o+=this.renderer.strong(this.output(a[4]||a[3]||a[2]||a[1]));else if(a=this.rules.em.exec(e))e=e.substring(a[0].length),o+=this.renderer.em(this.output(a[6]||a[5]||a[4]||a[3]||a[2]||a[1]));else if(a=this.rules.code.exec(e))e=e.substring(a[0].length),o+=this.renderer.codespan(c(a[2].trim(),!0));else if(a=this.rules.br.exec(e))e=e.substring(a[0].length),o+=this.renderer.br();else if(a=this.rules.del.exec(e))e=e.substring(a[0].length),o+=this.renderer.del(this.output(a[1]));else if(a=this.rules.text.exec(e))e=e.substring(a[0].length),this.inRawBlock?o+=this.renderer.text(a[0]):o+=this.renderer.text(c(this.smartypants(a[0])));else if(e)throw new Error("Infinite loop on byte: "+e.charCodeAt(0))}else{if("@"===a[2])r="mailto:"+(t=c(a[0]));else{do{l=a[0],a[0]=this.rules._backpedal.exec(a[0])[0]}while(l!==a[0]);t=c(a[0]),r="www."===a[1]?"http://"+t:t}e=e.substring(a[0].length),o+=this.renderer.link(r,null,t)}return o},i.escapes=function(e){return e?e.replace(i.rules._escapes,"$1"):e},i.prototype.outputLink=function(e,n){var t=n.href,r=n.title?c(n.title):null;return"!"!==e[0].charAt(0)?this.renderer.link(t,r,this.output(e[1])):this.renderer.image(t,r,c(e[1]))},i.prototype.smartypants=function(e){return this.options.smartypants?e.replace(/---/g,"—").replace(/--/g,"–").replace(/(^|[-\u2014/(\[{"\s])'/g,"$1‘").replace(/'/g,"’").replace(/(^|[-\u2014/(\[{\u2018\s])"/g,"$1“").replace(/"/g,"”").replace(/\.{3}/g,"…"):e},i.prototype.mangle=function(e){if(!this.options.mangle)return e;for(var n,t="",r=e.length,s=0;s<r;s++)n=e.charCodeAt(s),Math.random()>.5&&(n="x"+n.toString(16)),t+="&#"+n+";";return t},a.prototype.code=function(e,n,t){if(this.options.highlight){var r=this.options.highlight(e,n);null!=r&&r!==e&&(t=!0,e=r)}return n?'<pre><code class="'+this.options.langPrefix+c(n,!0)+'">'+(t?e:c(e,!0))+"</code></pre>\n":"<pre><code>"+(t?e:c(e,!0))+"</code></pre>"},a.prototype.blockquote=function(e){return"<blockquote>\n"+e+"</blockquote>\n"},a.prototype.html=function(e){return e},a.prototype.heading=function(e,n,t){return this.options.headerIds?"<h"+n+' id="'+this.options.headerPrefix+t.toLowerCase().replace(/[^\w]+/g,"-")+'">'+e+"</h"+n+">\n":"<h"+n+">"+e+"</h"+n+">\n"},a.prototype.hr=function(){return this.options.xhtml?"<hr/>\n":"<hr>\n"},a.prototype.list=function(e,n,t){var r=n?"ol":"ul";return"<"+r+(n&&1!==t?' start="'+t+'"':"")+">\n"+e+"</"+r+">\n"},a.prototype.listitem=function(e){return"<li>"+e+"</li>\n"},a.prototype.checkbox=function(e){return"<input "+(e?'checked="" ':"")+'disabled="" type="checkbox"'+(this.options.xhtml?" /":"")+"> "},a.prototype.paragraph=function(e){return"<p>"+e+"</p>\n"},a.prototype.table=function(e,n){return n&&(n="<tbody>"+n+"</tbody>"),"<table>\n<thead>\n"+e+"</thead>\n"+n+"</table>\n"},a.prototype.tablerow=function(e){return"<tr>\n"+e+"</tr>\n"},a.prototype.tablecell=function(e,n){var t=n.header?"th":"td";return(n.align?"<"+t+' align="'+n.align+'">':"<"+t+">")+e+"</"+t+">\n"},a.prototype.strong=function(e){return"<strong>"+e+"</strong>"},a.prototype.em=function(e){return"<em>"+e+"</em>"},a.prototype.codespan=function(e){return"<code>"+e+"</code>"},a.prototype.br=function(){return this.options.xhtml?"<br/>":"<br>"},a.prototype.del=function(e){return"<del>"+e+"</del>"},a.prototype.link=function(e,n,t){if(this.options.sanitize){try{var r=decodeURIComponent(u(e)).replace(/[^\w:]/g,"").toLowerCase()}catch(e){return t}if(0===r.indexOf("javascript:")||0===r.indexOf("vbscript:")||0===r.indexOf("data:"))return t}this.options.baseUrl&&!d.test(e)&&(e=h(this.options.baseUrl,e));try{e=encodeURI(e).replace(/%25/g,"%")}catch(e){return t}var s='<a href="'+c(e)+'"';return n&&(s+=' title="'+n+'"'),s+=">"+t+"</a>"},a.prototype.image=function(e,n,t){this.options.baseUrl&&!d.test(e)&&(e=h(this.options.baseUrl,e));var r='<img src="'+e+'" alt="'+t+'"';return n&&(r+=' title="'+n+'"'),r+=this.options.xhtml?"/>":">"},a.prototype.text=function(e){return e},l.prototype.strong=l.prototype.em=l.prototype.codespan=l.prototype.del=l.prototype.text=function(e){return e},l.prototype.link=l.prototype.image=function(e,n,t){return""+t},l.prototype.br=function(){return""},o.parse=function(e,n){return new o(n).parse(e)},o.prototype.parse=function(e){this.inline=new i(e.links,this.options),this.inlineText=new i(e.links,m({},this.options,{renderer:new l})),this.tokens=e.reverse();for(var n="";this.next();)n+=this.tok();return n},o.prototype.next=function(){return this.token=this.tokens.pop()},o.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0},o.prototype.parseText=function(){for(var e=this.token.text;"text"===this.peek().type;)e+="\n"+this.next().text;return this.inline.output(e)},o.prototype.tok=function(){switch(this.token.type){case"space":return"";case"hr":return this.renderer.hr();case"heading":return this.renderer.heading(this.inline.output(this.token.text),this.token.depth,u(this.inlineText.output(this.token.text)));case"code":return this.renderer.code(this.token.text,this.token.lang,this.token.escaped);case"table":var e,n,t,r,s="",i="";for(t="",e=0;e<this.token.header.length;e++)t+=this.renderer.tablecell(this.inline.output(this.token.header[e]),{header:!0,align:this.token.align[e]});for(s+=this.renderer.tablerow(t),e=0;e<this.token.cells.length;e++){for(n=this.token.cells[e],t="",r=0;r<n.length;r++)t+=this.renderer.tablecell(this.inline.output(n[r]),{header:!1,align:this.token.align[r]});i+=this.renderer.tablerow(t)}return this.renderer.table(s,i);case"blockquote_start":for(i="";"blockquote_end"!==this.next().type;)i+=this.tok();return this.renderer.blockquote(i);case"list_start":i="";for(var a=this.token.ordered,l=this.token.start;"list_end"!==this.next().type;)i+=this.tok();return this.renderer.list(i,a,l);case"list_item_start":i="";var o=this.token.loose;for(this.token.task&&(i+=this.renderer.checkbox(this.token.checked));"list_item_end"!==this.next().type;)i+=o||"text"!==this.token.type?this.tok():this.parseText();return this.renderer.listitem(i);case"html":return this.renderer.html(this.token.text);case"paragraph":return this.renderer.paragraph(this.inline.output(this.token.text));case"text":return this.renderer.paragraph(this.parseText())}},c.escapeTest=/[&<>"']/,c.escapeReplace=/[&<>"']/g,c.replacements={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},c.escapeTestNoEncode=/[<>"']|&(?!#?\w+;)/,c.escapeReplaceNoEncode=/[<>"']|&(?!#?\w+;)/g;var g={},d=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;function f(){}function m(e){for(var n,t,r=1;r<arguments.length;r++)for(t in n=arguments[r])Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t]);return e}function b(e,n){var t=e.replace(/\|/g,function(e,n,t){for(var r=!1,s=n;--s>=0&&"\\"===t[s];)r=!r;return r?"|":" |"}).split(/ \|/),r=0;if(t.length>n)t.splice(n);else for(;t.length<n;)t.push("");for(;r<t.length;r++)t[r]=t[r].trim().replace(/\\\|/g,"|");return t}function _(e,n,t){if(0===e.length)return"";for(var r=0;r<e.length;){var s=e.charAt(e.length-r-1);if(s!==n||t){if(s===n||!t)break;r++}else r++}return e.substr(0,e.length-r)}function k(e,n,t){if(void 0===e||null===e)throw new Error("marked(): input parameter is undefined or null");if("string"!=typeof e)throw new Error("marked(): input parameter is of type "+Object.prototype.toString.call(e)+", string expected");if(t||"function"==typeof n){t||(t=n,n=null);var s,i,a=(n=m({},k.defaults,n||{})).highlight,l=0;try{s=r.lex(e,n)}catch(e){return t(e)}i=s.length;var u=function(e){if(e)return n.highlight=a,t(e);var r;try{r=o.parse(s,n)}catch(n){e=n}return n.highlight=a,e?t(e):t(null,r)};if(!a||a.length<3)return u();if(delete n.highlight,!i)return u();for(;l<s.length;l++)!function(e){"code"!==e.type?--i||u():a(e.text,e.lang,function(n,t){return n?u(n):null==t||t===e.text?--i||u():(e.text=t,e.escaped=!0,void(--i||u()))})}(s[l])}else try{return n&&(n=m({},k.defaults,n)),o.parse(r.lex(e,n),n)}catch(e){if(e.message+="\nPlease report this to https://github.com/markedjs/marked.",(n||k.defaults).silent)return"<p>An error occurred:</p><pre>"+c(e.message+"",!0)+"</pre>";throw e}}f.exec=f,k.options=k.setOptions=function(e){return m(k.defaults,e),k},k.getDefaults=function(){return{baseUrl:null,breaks:!1,gfm:!0,headerIds:!0,headerPrefix:"",highlight:null,langPrefix:"language-",mangle:!0,pedantic:!1,renderer:new a,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,tables:!0,xhtml:!1}},k.defaults=k.getDefaults(),k.Parser=o,k.parser=o.parse,k.Renderer=a,k.TextRenderer=l,k.Lexer=r,k.lexer=r.lex,k.InlineLexer=i,k.inlineLexer=i.output,k.parse=k,e.exports=k}(this||"undefined"!=typeof window&&window)}).call(this,t(7))},13:function(e,n){e.exports=function(e){var n="[A-Za-z$_][0-9A-Za-z$_]*",t={keyword:"in of if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const export super debugger as async await static import from as",literal:"true false null undefined NaN Infinity",built_in:"eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect Promise"},r={className:"number",variants:[{begin:"\\b(0[bB][01]+)"},{begin:"\\b(0[oO][0-7]+)"},{begin:e.C_NUMBER_RE}],relevance:0},s={className:"subst",begin:"\\$\\{",end:"\\}",keywords:t,contains:[]},i={className:"string",begin:"`",end:"`",contains:[e.BACKSLASH_ESCAPE,s]};s.contains=[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,i,r,e.REGEXP_MODE];var a=s.contains.concat([e.C_BLOCK_COMMENT_MODE,e.C_LINE_COMMENT_MODE]);return{aliases:["js","jsx"],keywords:t,contains:[{className:"meta",relevance:10,begin:/^\s*['"]use (strict|asm)['"]/},{className:"meta",begin:/^#!/,end:/$/},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,i,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,r,{begin:/[{,]\s*/,relevance:0,contains:[{begin:n+"\\s*:",returnBegin:!0,relevance:0,contains:[{className:"attr",begin:n,relevance:0}]}]},{begin:"("+e.RE_STARTERS_RE+"|\\b(case|return|throw)\\b)\\s*",keywords:"return throw case",contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.REGEXP_MODE,{className:"function",begin:"(\\(.*?\\)|"+n+")\\s*=>",returnBegin:!0,end:"\\s*=>",contains:[{className:"params",variants:[{begin:n},{begin:/\(\s*\)/},{begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:t,contains:a}]}]},{begin:/</,end:/(\/\w+|\w+\/)>/,subLanguage:"xml",contains:[{begin:/<\w+\s*\/>/,skip:!0},{begin:/<\w+/,end:/(\/\w+|\w+\/)>/,skip:!0,contains:[{begin:/<\w+\s*\/>/,skip:!0},"self"]}]}],relevance:0},{className:"function",beginKeywords:"function",end:/\{/,excludeEnd:!0,contains:[e.inherit(e.TITLE_MODE,{begin:n}),{className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,contains:a}],illegal:/\[|%/},{begin:/\$[(.]/},e.METHOD_GUARD,{className:"class",beginKeywords:"class",end:/[{;=]/,excludeEnd:!0,illegal:/[:"\[\]]/,contains:[{beginKeywords:"extends"},e.UNDERSCORE_TITLE_MODE]},{beginKeywords:"constructor",end:/\{/,excludeEnd:!0}],illegal:/#(?!!)/}}},14:function(e,n){e.exports=function(e){var n="action collection component concat debugger each each-in else get hash if input link-to loc log mut outlet partial query-params render textarea unbound unless with yield view",t=(e.QUOTE_STRING_MODE,{endsWithParent:!0,relevance:0,keywords:{keyword:"as",built_in:n},contains:[e.QUOTE_STRING_MODE,{illegal:/\}\}/,begin:/[a-zA-Z0-9_]+=/,returnBegin:!0,relevance:0,contains:[{className:"attr",begin:/[a-zA-Z0-9_]+/}]},e.NUMBER_MODE]});return{case_insensitive:!0,subLanguage:"xml",contains:[e.COMMENT("{{!(--)?","(--)?}}"),{className:"template-tag",begin:/\{\{[#\/]/,end:/\}\}/,contains:[{className:"name",begin:/[a-zA-Z\.\-]+/,keywords:{"builtin-name":n},starts:t}]},{className:"template-variable",begin:/\{\{[a-zA-Z][a-zA-Z\-]+/,end:/\}\}/,keywords:{keyword:"as",built_in:n},contains:[e.QUOTE_STRING_MODE]}]}}},15:function(e,n){e.exports=function(e){var n={literal:"true false null"},t=[e.QUOTE_STRING_MODE,e.C_NUMBER_MODE],r={end:",",endsWithParent:!0,excludeEnd:!0,contains:t,keywords:n},s={begin:"{",end:"}",contains:[{className:"attr",begin:/"/,end:/"/,contains:[e.BACKSLASH_ESCAPE],illegal:"\\n"},e.inherit(r,{begin:/:/})],illegal:"\\S"},i={begin:"\\[",end:"\\]",contains:[e.inherit(r)],illegal:"\\S"};return t.splice(t.length,0,s,i),{contains:t,keywords:n,illegal:"\\S"}}},16:function(e,n){e.exports=function(e){var n="false synchronized int abstract float private char boolean static null if const for true while long strictfp finally protected import native final void enum else break transient catch instanceof byte super volatile case assert short package default double public try this switch continue throws protected public private module requires exports do",t={className:"number",begin:"\\b(0[bB]([01]+[01_]+[01]+|[01]+)|0[xX]([a-fA-F0-9]+[a-fA-F0-9_]+[a-fA-F0-9]+|[a-fA-F0-9]+)|(([\\d]+[\\d_]+[\\d]+|[\\d]+)(\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))?|\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))([eE][-+]?\\d+)?)[lLfF]?",relevance:0};return{aliases:["jsp"],keywords:n,illegal:/<\/|#/,contains:[e.COMMENT("/\\*\\*","\\*/",{relevance:0,contains:[{begin:/\w+@/,relevance:0},{className:"doctag",begin:"@[A-Za-z]+"}]}),e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,{className:"class",beginKeywords:"class interface",end:/[{;=]/,excludeEnd:!0,keywords:"class interface",illegal:/[:"\[\]]/,contains:[{beginKeywords:"extends implements"},e.UNDERSCORE_TITLE_MODE]},{beginKeywords:"new throw return else",relevance:0},{className:"function",begin:"([À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*(<[À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*(\\s*,\\s*[À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*)*>)?\\s+)+"+e.UNDERSCORE_IDENT_RE+"\\s*\\(",returnBegin:!0,end:/[{;=]/,excludeEnd:!0,keywords:n,contains:[{begin:e.UNDERSCORE_IDENT_RE+"\\s*\\(",returnBegin:!0,relevance:0,contains:[e.UNDERSCORE_TITLE_MODE]},{className:"params",begin:/\(/,end:/\)/,keywords:n,relevance:0,contains:[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.C_NUMBER_MODE,e.C_BLOCK_COMMENT_MODE]},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},t,{className:"meta",begin:"@[A-Za-z]+"}]}}},17:function(e,n){e.exports=function(e){var n={className:"variable",variants:[{begin:/\$[\w\d#@][\w\d_]*/},{begin:/\$\{(.*?)}/}]},t={className:"string",begin:/"/,end:/"/,contains:[e.BACKSLASH_ESCAPE,n,{className:"variable",begin:/\$\(/,end:/\)/,contains:[e.BACKSLASH_ESCAPE]}]};return{aliases:["sh","zsh"],lexemes:/\b-?[a-z\._]+\b/,keywords:{keyword:"if then else elif fi for while in do done case esac function",literal:"true false",built_in:"break cd continue eval exec exit export getopts hash pwd readonly return shift test times trap umask unset alias bind builtin caller command declare echo enable help let local logout mapfile printf read readarray source type typeset ulimit unalias set shopt autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate fc fg float functions getcap getln history integer jobs kill limit log noglob popd print pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof zpty zregexparse zsocket zstyle ztcp",_:"-ne -eq -lt -gt -f -d -e -s -l -a"},contains:[{className:"meta",begin:/^#![^\n]+sh\s*$/,relevance:10},{className:"function",begin:/\w[\w\d_]*\s*\(\s*\)\s*\{/,returnBegin:!0,contains:[e.inherit(e.TITLE_MODE,{begin:/\w[\w\d_]*/})],relevance:0},e.HASH_COMMENT_MODE,t,{className:"string",begin:/'/,end:/'/},n]}}},2:function(e,n,t){!function(e){"object"==typeof window&&window||"object"==typeof self&&self;(function(e){var n=[],t=Object.keys,r={},s={},i=/^(no-?highlight|plain|text)$/i,a=/\blang(?:uage)?-([\w-]+)\b/i,l=/((^(<[^>]+>|\t|)+|(?:\n)))/gm,o="</span>",c={classPrefix:"hljs-",tabReplace:null,useBR:!1,languages:void 0};function u(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function p(e){return e.nodeName.toLowerCase()}function h(e,n){var t=e&&e.exec(n);return t&&0===t.index}function g(e){return i.test(e)}function d(e){var n,t={},r=Array.prototype.slice.call(arguments,1);for(n in e)t[n]=e[n];return r.forEach(function(e){for(n in e)t[n]=e[n]}),t}function f(e){var n=[];return function e(t,r){for(var s=t.firstChild;s;s=s.nextSibling)3===s.nodeType?r+=s.nodeValue.length:1===s.nodeType&&(n.push({event:"start",offset:r,node:s}),r=e(s,r),p(s).match(/br|hr|img|input/)||n.push({event:"stop",offset:r,node:s}));return r}(e,0),n}function m(e){function n(e){return e&&e.source||e}function r(t,r){return new RegExp(n(t),"m"+(e.case_insensitive?"i":"")+(r?"g":""))}!function s(i,a){if(i.compiled)return;i.compiled=!0;i.keywords=i.keywords||i.beginKeywords;if(i.keywords){var l={},o=function(n,t){e.case_insensitive&&(t=t.toLowerCase()),t.split(" ").forEach(function(e){var t=e.split("|");l[t[0]]=[n,t[1]?Number(t[1]):1]})};"string"==typeof i.keywords?o("keyword",i.keywords):t(i.keywords).forEach(function(e){o(e,i.keywords[e])}),i.keywords=l}i.lexemesRe=r(i.lexemes||/\w+/,!0);a&&(i.beginKeywords&&(i.begin="\\b("+i.beginKeywords.split(" ").join("|")+")\\b"),i.begin||(i.begin=/\B|\b/),i.beginRe=r(i.begin),i.end||i.endsWithParent||(i.end=/\B|\b/),i.end&&(i.endRe=r(i.end)),i.terminator_end=n(i.end)||"",i.endsWithParent&&a.terminator_end&&(i.terminator_end+=(i.end?"|":"")+a.terminator_end));i.illegal&&(i.illegalRe=r(i.illegal));null==i.relevance&&(i.relevance=1);i.contains||(i.contains=[]);i.contains=Array.prototype.concat.apply([],i.contains.map(function(e){return function(e){e.variants&&!e.cached_variants&&(e.cached_variants=e.variants.map(function(n){return d(e,{variants:null},n)}));return e.cached_variants||e.endsWithParent&&[d(e)]||[e]}("self"===e?i:e)}));i.contains.forEach(function(e){s(e,i)});i.starts&&s(i.starts,a);var c=i.contains.map(function(e){return e.beginKeywords?"\\.?("+e.begin+")\\.?":e.begin}).concat([i.terminator_end,i.illegal]).map(n).filter(Boolean);i.terminators=c.length?r(c.join("|"),!0):{exec:function(){return null}}}(e)}function b(e,n,t,s){function i(e,n){var t=d.case_insensitive?n[0].toLowerCase():n[0];return e.keywords.hasOwnProperty(t)&&e.keywords[t]}function a(e,n,t,r){var s=r?"":c.classPrefix,i='<span class="'+s,a=t?"":o;return(i+=e+'">')+n+a}function l(){w+=null!=k.subLanguage?function(){var e="string"==typeof k.subLanguage;if(e&&!r[k.subLanguage])return u(v);var n=e?b(k.subLanguage,v,!0,x[k.subLanguage]):_(v,k.subLanguage.length?k.subLanguage:void 0);k.relevance>0&&(y+=n.relevance);e&&(x[k.subLanguage]=n.top);return a(n.language,n.value,!1,!0)}():function(){var e,n,t,r;if(!k.keywords)return u(v);r="",n=0,k.lexemesRe.lastIndex=0,t=k.lexemesRe.exec(v);for(;t;)r+=u(v.substring(n,t.index)),(e=i(k,t))?(y+=e[1],r+=a(e[0],u(t[0]))):r+=u(t[0]),n=k.lexemesRe.lastIndex,t=k.lexemesRe.exec(v);return r+u(v.substr(n))}(),v=""}function p(e){w+=e.className?a(e.className,"",!0):"",k=Object.create(e,{parent:{value:k}})}function g(e,n){if(v+=e,null==n)return l(),0;var r=function(e,n){var t,r;for(t=0,r=n.contains.length;t<r;t++)if(h(n.contains[t].beginRe,e))return n.contains[t]}(n,k);if(r)return r.skip?v+=n:(r.excludeBegin&&(v+=n),l(),r.returnBegin||r.excludeBegin||(v=n)),p(r),r.returnBegin?0:n.length;var s=function e(n,t){if(h(n.endRe,t)){for(;n.endsParent&&n.parent;)n=n.parent;return n}if(n.endsWithParent)return e(n.parent,t)}(k,n);if(s){var i=k;i.skip?v+=n:(i.returnEnd||i.excludeEnd||(v+=n),l(),i.excludeEnd&&(v=n));do{k.className&&(w+=o),k.skip||(y+=k.relevance),k=k.parent}while(k!==s.parent);return s.starts&&p(s.starts),i.returnEnd?0:n.length}if(function(e,n){return!t&&h(n.illegalRe,e)}(n,k))throw new Error('Illegal lexeme "'+n+'" for mode "'+(k.className||"<unnamed>")+'"');return v+=n,n.length||1}var d=E(e);if(!d)throw new Error('Unknown language: "'+e+'"');m(d);var f,k=s||d,x={},w="";for(f=k;f!==d;f=f.parent)f.className&&(w=a(f.className,"",!0)+w);var v="",y=0;try{for(var R,N,S=0;k.terminators.lastIndex=S,R=k.terminators.exec(n);)N=g(n.substring(S,R.index),R[0]),S=R.index+N;for(g(n.substr(S)),f=k;f.parent;f=f.parent)f.className&&(w+=o);return{relevance:y,value:w,language:e,top:k}}catch(e){if(e.message&&-1!==e.message.indexOf("Illegal"))return{relevance:0,value:u(n)};throw e}}function _(e,n){n=n||c.languages||t(r);var s={relevance:0,value:u(e)},i=s;return n.filter(E).forEach(function(n){var t=b(n,e,!1);t.language=n,t.relevance>i.relevance&&(i=t),t.relevance>s.relevance&&(i=s,s=t)}),i.language&&(s.second_best=i),s}function k(e){return c.tabReplace||c.useBR?e.replace(l,function(e,n){return c.useBR&&"\n"===e?"<br>":c.tabReplace?n.replace(/\t/g,c.tabReplace):""}):e}function x(e){var t,r,i,l,o,h=function(e){var n,t,r,s,i=e.className+" ";if(i+=e.parentNode?e.parentNode.className:"",t=a.exec(i))return E(t[1])?t[1]:"no-highlight";for(i=i.split(/\s+/),n=0,r=i.length;n<r;n++)if(g(s=i[n])||E(s))return s}(e);g(h)||(c.useBR?(t=document.createElementNS("http://www.w3.org/1999/xhtml","div")).innerHTML=e.innerHTML.replace(/\n/g,"").replace(/<br[ \/]*>/g,"\n"):t=e,o=t.textContent,i=h?b(h,o,!0):_(o),(r=f(t)).length&&((l=document.createElementNS("http://www.w3.org/1999/xhtml","div")).innerHTML=i.value,i.value=function(e,t,r){var s=0,i="",a=[];function l(){return e.length&&t.length?e[0].offset!==t[0].offset?e[0].offset<t[0].offset?e:t:"start"===t[0].event?e:t:e.length?e:t}function o(e){i+="<"+p(e)+n.map.call(e.attributes,function(e){return" "+e.nodeName+'="'+u(e.value).replace('"',"&quot;")+'"'}).join("")+">"}function c(e){i+="</"+p(e)+">"}function h(e){("start"===e.event?o:c)(e.node)}for(;e.length||t.length;){var g=l();if(i+=u(r.substring(s,g[0].offset)),s=g[0].offset,g===e){a.reverse().forEach(c);do{h(g.splice(0,1)[0]),g=l()}while(g===e&&g.length&&g[0].offset===s);a.reverse().forEach(o)}else"start"===g[0].event?a.push(g[0].node):a.pop(),h(g.splice(0,1)[0])}return i+u(r.substr(s))}(r,f(l),o)),i.value=k(i.value),e.innerHTML=i.value,e.className=function(e,n,t){var r=n?s[n]:t,i=[e.trim()];e.match(/\bhljs\b/)||i.push("hljs");-1===e.indexOf(r)&&i.push(r);return i.join(" ").trim()}(e.className,h,i.language),e.result={language:i.language,re:i.relevance},i.second_best&&(e.second_best={language:i.second_best.language,re:i.second_best.relevance}))}function w(){if(!w.called){w.called=!0;var e=document.querySelectorAll("pre code");n.forEach.call(e,x)}}function E(e){return e=(e||"").toLowerCase(),r[e]||r[s[e]]}e.highlight=b,e.highlightAuto=_,e.fixMarkup=k,e.highlightBlock=x,e.configure=function(e){c=d(c,e)},e.initHighlighting=w,e.initHighlightingOnLoad=function(){addEventListener("DOMContentLoaded",w,!1),addEventListener("load",w,!1)},e.registerLanguage=function(n,t){var i=r[n]=t(e);i.aliases&&i.aliases.forEach(function(e){s[e]=n})},e.listLanguages=function(){return t(r)},e.getLanguage=E,e.inherit=d,e.IDENT_RE="[a-zA-Z]\\w*",e.UNDERSCORE_IDENT_RE="[a-zA-Z_]\\w*",e.NUMBER_RE="\\b\\d+(\\.\\d+)?",e.C_NUMBER_RE="(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",e.BINARY_NUMBER_RE="\\b(0b[01]+)",e.RE_STARTERS_RE="!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~",e.BACKSLASH_ESCAPE={begin:"\\\\[\\s\\S]",relevance:0},e.APOS_STRING_MODE={className:"string",begin:"'",end:"'",illegal:"\\n",contains:[e.BACKSLASH_ESCAPE]},e.QUOTE_STRING_MODE={className:"string",begin:'"',end:'"',illegal:"\\n",contains:[e.BACKSLASH_ESCAPE]},e.PHRASAL_WORDS_MODE={begin:/\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/},e.COMMENT=function(n,t,r){var s=e.inherit({className:"comment",begin:n,end:t,contains:[]},r||{});return s.contains.push(e.PHRASAL_WORDS_MODE),s.contains.push({className:"doctag",begin:"(?:TODO|FIXME|NOTE|BUG|XXX):",relevance:0}),s},e.C_LINE_COMMENT_MODE=e.COMMENT("//","$"),e.C_BLOCK_COMMENT_MODE=e.COMMENT("/\\*","\\*/"),e.HASH_COMMENT_MODE=e.COMMENT("#","$"),e.NUMBER_MODE={className:"number",begin:e.NUMBER_RE,relevance:0},e.C_NUMBER_MODE={className:"number",begin:e.C_NUMBER_RE,relevance:0},e.BINARY_NUMBER_MODE={className:"number",begin:e.BINARY_NUMBER_RE,relevance:0},e.CSS_NUMBER_MODE={className:"number",begin:e.NUMBER_RE+"(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",relevance:0},e.REGEXP_MODE={className:"regexp",begin:/\//,end:/\/[gimuy]*/,illegal:/\n/,contains:[e.BACKSLASH_ESCAPE,{begin:/\[/,end:/\]/,relevance:0,contains:[e.BACKSLASH_ESCAPE]}]},e.TITLE_MODE={className:"title",begin:e.IDENT_RE,relevance:0},e.UNDERSCORE_TITLE_MODE={className:"title",begin:e.UNDERSCORE_IDENT_RE,relevance:0},e.METHOD_GUARD={begin:"\\.\\s*"+e.UNDERSCORE_IDENT_RE,relevance:0}})(n)}()},69:function(e,n,t){"use strict";t.r(n),function(e){t(12),t(70);var n=t(2),r=t.n(n),s=t(13),i=t.n(s),a=t(14),l=t.n(a),o=t(15),c=t.n(o),u=t(16),p=t.n(u),h=t(17),g=t.n(h);r.a.registerLanguage("javascript",i.a),r.a.registerLanguage("html",l.a),r.a.registerLanguage("json",c.a),r.a.registerLanguage("json",p.a),r.a.registerLanguage("bash",g.a),e(function(){r.a.initHighlightingOnLoad();var n=t(12);n.setOptions({renderer:new n.Renderer,highlight:function(e){var n=r.a.highlightAuto(e).value;return console.log(n),n},pedantic:!1,gfm:!0,tables:!0,breaks:!1,sanitize:!1,smartLists:!0,smartypants:!1,xhtml:!1}),document.getElementById("content").innerHTML=n("\n\n[文档](https://www.webpackjs.com/guides/getting-started/)\n\nwebpack 用于编译 JavaScript 模块。\n一旦完成安装，你就可以通过 webpack \n的 CLI 或 API 与其配合交互。\n如果你还不熟悉 webpack，请阅读核心概念\n和打包器对比，了解为什么你要使用 webpack，\n而不是社区中的其他工具。\n\n# begin\n\n## webpack安装\n\n```bash\nnpm install webpack webpack-cli\n```\n\n## helloworld\n\ndist/index.html\n```html\n<!doctype html>\n<html>\n<head>\n    <title>起步</title>\n</head>\n<body>\n<script src=\"main.js\"><\/script>\n</body>\n</html>\n```\n\nsrc/index.js\n```javascript\nimport _ from 'lodash'\n\nfunction component() {\n    var element = document.createElement('div');\n\n    // Lodash, now imported by this script\n    element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n\n    return element;\n}\n\ndocument.body.appendChild(component());\n```\n\n编译`npx webpack`\n\n\n访问index.html，可以看到'Hello webpack'。\n\n\n## 使用配置文件\n\n在webpack4中，可以无需使用任何配置，但是在实际\n项目中由于过于复杂的命令行命令不如直接在配置文件\n中编写。因此，webpack仍然支持webpack.config.js\n\n创建一个webpack.config.js\n\n```javascript\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist')\n  }\n};\n```\n\n重新进行打包`npx webpack --webpack.config.js`\n每次都输入命令很麻烦，可以在package.json中的scripts中增加配置\n就可以通过npm run build来进行编译了\n```json\n{\n  \"scripts\": {\n"+'    "test": "echo \\"Error: no test specified\\" && exit 1",\n    "build": "webpack"\n  }\n}\n```\n\n\n# develop\n\n## source map\n\n开发过程中，由于webpack打包成一个js文件难以调试\n可以在webpack.config.js中增加以下代码，便于调试。\n```javascript\nmodule.exports = {\n    devtool: \'inline-source-map\'\n}\n```\n\n## watch\n\n修改代码后自动build，在package.json中增加以下代码\n就可以使用npm run watch来进行持续监听。\n```json\n{\n  "scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1",\n    "build": "webpack",\n    "watch": "webpack --watch"\n  }\n}\n```\n\n## webpack-dev-server\n\n`webpack-dev-server` 为你提供了一个简单的 web 服务器，\n并且能够实时重新加载(live reloading)。\n首先进行安装 `npm install --save-dev webpack-dev-server`\n\n修改配置文件，告诉开发服务器(dev server)，在哪里查找文件：\n\nwebpack.config.js\n\n```javascript\nmodule.exports = {\n    entry: {\n      app: \'./src/index.js\',\n      print: \'./src/print.js\'\n    },\n    devtool: \'inline-source-map\',//debug找到源代码\n       devServer: {//开发服务\n         contentBase: \'./dist\'\n    },\n    plugins: [\n      new CleanWebpackPlugin([\'dist\']),\n      new HtmlWebpackPlugin({\n        title: \'Development\'\n      })\n    ],\n    output: {\n      filename: \'[name].bundle.js\',\n      path: path.resolve(__dirname, \'dist\')\n    }\n};\n```\n\npackage.json\n\n```json\n {\n    "name": "development",\n    "version": "1.0.0",\n    "description": "",\n    "main": "webpack.config.js",\n    "scripts": {\n      "start": "webpack-dev-server --open"\n    }\n}\n```\n\n使用自动编译代码时，可能会在保存文件时遇到一些问题。某些编辑器具有“安全写入”功能，\n可能会影响重新编译。\n\n要在一些常见的编辑器中禁用此功能，\n请查看以下列表：\n\n- Sublime Text 3 - 在用户首选项(user preferences)中添加 atomic_save: "false"。\n- IntelliJ - 在首选项(preferences)中使用搜索，查找到 "safe write" 并且禁用它。\n- Vim - 在设置(settings)中增加 :set backupcopy=yes。\n- WebStorm - 在 Preferences > Appearance & Behavior > System Settings 中取消选中 Use "safe write"。\n\n\n## module\n\n开发代码时，区分模块十分重要\n\n多模块引用相同依赖时会报错：\n`Conflict: Multiple chunks emit assets to the same filename bundle.js (chunks 0 and 1)`\n\n解决重复块：\n```javascript\nmodule.exports = {\n    entry: {\n        "main": "./src/index.js",\n        "module1": "./src/module1.js"\n    },\n    output: {\n        //输出进行调整，最终输出:\n        //main.bundle.js  module1.bundle.js common.bundle.js\n        filename: \'[name].bundle.js\',\n        chunkFilename: \'[name].bundle.js\',\n        path: path.resolve(__dirname, \'dist\')\n    },\n    devtool: \'inline-source-map\',//开发定位何处报错\n    devServer: {\n        contentBase: \'./dist\'\n    },\n    plugins: [\n\n    ],\n    optimization: {\n        splitChunks: {\n            cacheGroups: {\n                commons: {\n                    name: "commons",\n                    chunks: "initial",\n                    minChunks: 2\n                }\n            }\n        }\n    },\n};\n```\n\nhtml依赖修改,引用三个js文件\n```html\n<script src="commons.bundle.js"><\/script>\n<script src="main.bundle.js"><\/script>\n<script src="module1.bundle.js"><\/script>\n```'),e("pre code").addClass("hljs")})}.call(this,t(1))},70:function(e,n,t){var r=t(71);"string"==typeof r&&(r=[[e.i,r,""]]);var s={hmr:!0,transform:void 0,insertInto:void 0};t(4)(r,s);r.locals&&(e.exports=r.locals)},71:function(e,n,t){(e.exports=t(0)(!1)).push([e.i,"/*\n\nAtom One Light by Daniel Gamage\nOriginal One Light Syntax theme from https://github.com/atom/one-light-syntax\n\nbase:    #fafafa\nmono-1:  #383a42\nmono-2:  #686b77\nmono-3:  #a0a1a7\nhue-1:   #0184bb\nhue-2:   #4078f2\nhue-3:   #a626a4\nhue-4:   #50a14f\nhue-5:   #e45649\nhue-5-2: #c91243\nhue-6:   #986801\nhue-6-2: #c18401\n\n*/\n\n.hljs {\n  display: block;\n  overflow-x: auto;\n  padding: 0.5em;\n  color: #383a42;\n  background: #fafafa;\n}\n\n.hljs-comment,\n.hljs-quote {\n  color: #a0a1a7;\n  font-style: italic;\n}\n\n.hljs-doctag,\n.hljs-keyword,\n.hljs-formula {\n  color: #a626a4;\n}\n\n.hljs-section,\n.hljs-name,\n.hljs-selector-tag,\n.hljs-deletion,\n.hljs-subst {\n  color: #e45649;\n}\n\n.hljs-literal {\n  color: #0184bb;\n}\n\n.hljs-string,\n.hljs-regexp,\n.hljs-addition,\n.hljs-attribute,\n.hljs-meta-string {\n  color: #50a14f;\n}\n\n.hljs-built_in,\n.hljs-class .hljs-title {\n  color: #c18401;\n}\n\n.hljs-attr,\n.hljs-variable,\n.hljs-template-variable,\n.hljs-type,\n.hljs-selector-class,\n.hljs-selector-attr,\n.hljs-selector-pseudo,\n.hljs-number {\n  color: #986801;\n}\n\n.hljs-symbol,\n.hljs-bullet,\n.hljs-link,\n.hljs-meta,\n.hljs-selector-id,\n.hljs-title {\n  color: #4078f2;\n}\n\n.hljs-emphasis {\n  font-style: italic;\n}\n\n.hljs-strong {\n  font-weight: bold;\n}\n\n.hljs-link {\n  text-decoration: underline;\n}\n",""])}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hcmtlZC9saWIvbWFya2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaWdobGlnaHQuanMvbGliL2xhbmd1YWdlcy9qYXZhc2NyaXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaWdobGlnaHQuanMvbGliL2xhbmd1YWdlcy9odG1sYmFycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2xpYi9sYW5ndWFnZXMvanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2xpYi9sYW5ndWFnZXMvamF2YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2xpYi9sYW5ndWFnZXMvYmFzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2xpYi9oaWdobGlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21hcmtlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL3N0eWxlcy9hdG9tLW9uZS1saWdodC5jc3M/MGEwNCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL3N0eWxlcy9hdG9tLW9uZS1saWdodC5jc3MiXSwibmFtZXMiOlsid2VicGFja0pzb25wQ2FsbGJhY2siLCJkYXRhIiwibW9kdWxlSWQiLCJjaHVua0lkIiwiY2h1bmtJZHMiLCJtb3JlTW9kdWxlcyIsImV4ZWN1dGVNb2R1bGVzIiwiaSIsInJlc29sdmVzIiwibGVuZ3RoIiwiaW5zdGFsbGVkQ2h1bmtzIiwicHVzaCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm1vZHVsZXMiLCJwYXJlbnRKc29ucEZ1bmN0aW9uIiwic2hpZnQiLCJkZWZlcnJlZE1vZHVsZXMiLCJhcHBseSIsImNoZWNrRGVmZXJyZWRNb2R1bGVzIiwicmVzdWx0IiwiZGVmZXJyZWRNb2R1bGUiLCJmdWxmaWxsZWQiLCJqIiwiZGVwSWQiLCJzcGxpY2UiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwicyIsImluc3RhbGxlZE1vZHVsZXMiLCI0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicCIsImpzb25wQXJyYXkiLCJ3aW5kb3ciLCJvbGRKc29ucEZ1bmN0aW9uIiwic2xpY2UiLCJnbG9iYWwiLCJyb290IiwiYmxvY2siLCJuZXdsaW5lIiwiY29kZSIsImZlbmNlcyIsIm5vb3AiLCJociIsImhlYWRpbmciLCJucHRhYmxlIiwiYmxvY2txdW90ZSIsImxpc3QiLCJodG1sIiwiZGVmIiwidGFibGUiLCJsaGVhZGluZyIsInBhcmFncmFwaCIsInRleHQiLCJMZXhlciIsIm9wdGlvbnMiLCJ0aGlzIiwidG9rZW5zIiwibGlua3MiLCJtYXJrZWQiLCJkZWZhdWx0cyIsInJ1bGVzIiwibm9ybWFsIiwicGVkYW50aWMiLCJnZm0iLCJ0YWJsZXMiLCJfbGFiZWwiLCJfdGl0bGUiLCJlZGl0IiwicmVwbGFjZSIsImdldFJlZ2V4IiwiYnVsbGV0IiwiaXRlbSIsInNvdXJjZSIsIl90YWciLCJfY29tbWVudCIsIm1lcmdlIiwibGV4Iiwic3JjIiwidG9rZW4iLCJ0b3AiLCJuZXh0IiwibG9vc2UiLCJjYXAiLCJidWxsIiwiYiIsImxpc3RTdGFydCIsImxpc3RJdGVtcyIsInNwYWNlIiwidGFnIiwiaXNvcmRlcmVkIiwiaXN0YXNrIiwiaXNjaGVja2VkIiwiZXhlYyIsInN1YnN0cmluZyIsInR5cGUiLCJydHJpbSIsImxhbmciLCJkZXB0aCIsImhlYWRlciIsInNwbGl0Q2VsbHMiLCJhbGlnbiIsInNwbGl0IiwiY2VsbHMiLCJ0ZXN0Iiwib3JkZXJlZCIsInN0YXJ0IiwibWF0Y2giLCJpbmRleE9mIiwiUmVnRXhwIiwic21hcnRMaXN0cyIsImpvaW4iLCJjaGFyQXQiLCJ1bmRlZmluZWQiLCJ0YXNrIiwiY2hlY2tlZCIsInNhbml0aXplIiwicHJlIiwic2FuaXRpemVyIiwidG9Mb3dlckNhc2UiLCJocmVmIiwidGl0bGUiLCJFcnJvciIsImNoYXJDb2RlQXQiLCJpbmxpbmUiLCJlc2NhcGUiLCJhdXRvbGluayIsInVybCIsImxpbmsiLCJyZWZsaW5rIiwibm9saW5rIiwic3Ryb25nIiwiZW0iLCJiciIsImRlbCIsIklubGluZUxleGVyIiwicmVuZGVyZXIiLCJSZW5kZXJlciIsImJyZWFrcyIsIlRleHRSZW5kZXJlciIsIlBhcnNlciIsImVuY29kZSIsImVzY2FwZVRlc3QiLCJlc2NhcGVSZXBsYWNlIiwiY2giLCJyZXBsYWNlbWVudHMiLCJlc2NhcGVUZXN0Tm9FbmNvZGUiLCJlc2NhcGVSZXBsYWNlTm9FbmNvZGUiLCJ1bmVzY2FwZSIsIl8iLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJwYXJzZUludCIsInJlZ2V4Iiwib3B0IiwidmFsIiwicmVzb2x2ZVVybCIsImJhc2UiLCJiYXNlVXJscyIsIl9lc2NhcGVzIiwiX3NjaGVtZSIsIl9lbWFpbCIsIl9hdHRyaWJ1dGUiLCJfaHJlZiIsIl9leHRlbmRlZF9lbWFpbCIsIl9iYWNrcGVkYWwiLCJvdXRwdXQiLCJwcmV2Q2FwWmVybyIsIm91dCIsIm1hbmdsZSIsImluTGluayIsImluUmF3QmxvY2siLCJ0cmltIiwib3V0cHV0TGluayIsImVzY2FwZXMiLCJjb2Rlc3BhbiIsInNtYXJ0eXBhbnRzIiwiaW1hZ2UiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJlc2NhcGVkIiwiaGlnaGxpZ2h0IiwibGFuZ1ByZWZpeCIsInF1b3RlIiwibGV2ZWwiLCJyYXciLCJoZWFkZXJJZHMiLCJoZWFkZXJQcmVmaXgiLCJ4aHRtbCIsImJvZHkiLCJsaXN0aXRlbSIsImNoZWNrYm94IiwidGFibGVyb3ciLCJjb250ZW50IiwidGFibGVjZWxsIiwiZmxhZ3MiLCJwcm90IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZSIsImJhc2VVcmwiLCJvcmlnaW5JbmRlcGVuZGVudFVybCIsImVuY29kZVVSSSIsInBhcnNlIiwiaW5saW5lVGV4dCIsInJldmVyc2UiLCJ0b2siLCJwb3AiLCJwZWVrIiwicGFyc2VUZXh0Iiwicm93IiwiY2VsbCIsIiYiLCI8IiwiPiIsIlwiIiwiJyIsIm9iaiIsInRhcmdldCIsImFyZ3VtZW50cyIsInRhYmxlUm93IiwiY291bnQiLCJvZmZzZXQiLCJzdHIiLCJjdXJyIiwiaW52ZXJ0Iiwic3VmZkxlbiIsImN1cnJDaGFyIiwic3Vic3RyIiwiY2FsbGJhY2siLCJwZW5kaW5nIiwiZG9uZSIsImVyciIsIm1lc3NhZ2UiLCJzaWxlbnQiLCJzZXRPcHRpb25zIiwiZ2V0RGVmYXVsdHMiLCJwYXJzZXIiLCJsZXhlciIsImlubGluZUxleGVyIiwiaGxqcyIsIklERU5UX1JFIiwiS0VZV09SRFMiLCJrZXl3b3JkIiwibGl0ZXJhbCIsImJ1aWx0X2luIiwiTlVNQkVSIiwiY2xhc3NOYW1lIiwidmFyaWFudHMiLCJiZWdpbiIsIkNfTlVNQkVSX1JFIiwicmVsZXZhbmNlIiwiU1VCU1QiLCJlbmQiLCJrZXl3b3JkcyIsImNvbnRhaW5zIiwiVEVNUExBVEVfU1RSSU5HIiwiQkFDS1NMQVNIX0VTQ0FQRSIsIkFQT1NfU1RSSU5HX01PREUiLCJRVU9URV9TVFJJTkdfTU9ERSIsIlJFR0VYUF9NT0RFIiwiUEFSQU1TX0NPTlRBSU5TIiwiY29uY2F0IiwiQ19CTE9DS19DT01NRU5UX01PREUiLCJDX0xJTkVfQ09NTUVOVF9NT0RFIiwiYWxpYXNlcyIsInJldHVybkJlZ2luIiwiUkVfU1RBUlRFUlNfUkUiLCJleGNsdWRlQmVnaW4iLCJleGNsdWRlRW5kIiwic3ViTGFuZ3VhZ2UiLCJza2lwIiwiYmVnaW5LZXl3b3JkcyIsImluaGVyaXQiLCJUSVRMRV9NT0RFIiwiaWxsZWdhbCIsIk1FVEhPRF9HVUFSRCIsIlVOREVSU0NPUkVfVElUTEVfTU9ERSIsIkJVSUxUX0lOUyIsIlRBR19JTk5BUkRTIiwiZW5kc1dpdGhQYXJlbnQiLCJOVU1CRVJfTU9ERSIsImNhc2VfaW5zZW5zaXRpdmUiLCJDT01NRU5UIiwiYnVpbHRpbi1uYW1lIiwic3RhcnRzIiwiTElURVJBTFMiLCJUWVBFUyIsIkNfTlVNQkVSX01PREUiLCJWQUxVRV9DT05UQUlORVIiLCJPQkpFQ1QiLCJBUlJBWSIsIkpBVkFfTlVNQkVSX01PREUiLCJVTkRFUlNDT1JFX0lERU5UX1JFIiwiVkFSIiwiUVVPVEVfU1RSSU5HIiwibGV4ZW1lcyIsIkhBU0hfQ09NTUVOVF9NT0RFIiwiZmFjdG9yeSIsInNlbGYiLCJBcnJheVByb3RvIiwib2JqZWN0S2V5cyIsImtleXMiLCJsYW5ndWFnZXMiLCJub0hpZ2hsaWdodFJlIiwibGFuZ3VhZ2VQcmVmaXhSZSIsImZpeE1hcmt1cFJlIiwic3BhbkVuZFRhZyIsImNsYXNzUHJlZml4IiwidGFiUmVwbGFjZSIsInVzZUJSIiwibm9kZSIsIm5vZGVOYW1lIiwidGVzdFJlIiwicmUiLCJsZXhlbWUiLCJpbmRleCIsImlzTm90SGlnaGxpZ2h0ZWQiLCJsYW5ndWFnZSIsInBhcmVudCIsIm9iamVjdHMiLCJBcnJheSIsImZvckVhY2giLCJub2RlU3RyZWFtIiwiX25vZGVTdHJlYW0iLCJjaGlsZCIsImZpcnN0Q2hpbGQiLCJuZXh0U2libGluZyIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwiZXZlbnQiLCJjb21waWxlTGFuZ3VhZ2UiLCJyZVN0ciIsImxhbmdSZSIsImNvbXBpbGVNb2RlIiwiY29tcGlsZWQiLCJjb21waWxlZF9rZXl3b3JkcyIsImZsYXR0ZW4iLCJrdyIsInBhaXIiLCJOdW1iZXIiLCJsZXhlbWVzUmUiLCJiZWdpblJlIiwiZW5kUmUiLCJ0ZXJtaW5hdG9yX2VuZCIsImlsbGVnYWxSZSIsIm1hcCIsImNhY2hlZF92YXJpYW50cyIsInZhcmlhbnQiLCJleHBhbmRfbW9kZSIsInRlcm1pbmF0b3JzIiwiZmlsdGVyIiwiQm9vbGVhbiIsImlnbm9yZV9pbGxlZ2FscyIsImNvbnRpbnVhdGlvbiIsImtleXdvcmRNYXRjaCIsIm1hdGNoX3N0ciIsImJ1aWxkU3BhbiIsImNsYXNzbmFtZSIsImluc2lkZVNwYW4iLCJsZWF2ZU9wZW4iLCJub1ByZWZpeCIsIm9wZW5TcGFuIiwiY2xvc2VTcGFuIiwicHJvY2Vzc0J1ZmZlciIsImV4cGxpY2l0IiwibW9kZV9idWZmZXIiLCJjb250aW51YXRpb25zIiwiaGlnaGxpZ2h0QXV0byIsInByb2Nlc3NTdWJMYW5ndWFnZSIsImtleXdvcmRfbWF0Y2giLCJsYXN0X2luZGV4IiwibGFzdEluZGV4IiwicHJvY2Vzc0tleXdvcmRzIiwic3RhcnROZXdNb2RlIiwicHJvY2Vzc0xleGVtZSIsImJ1ZmZlciIsIm5ld19tb2RlIiwic3ViTW9kZSIsImVuZF9tb2RlIiwiZW5kT2ZNb2RlIiwiZW5kc1BhcmVudCIsIm9yaWdpbiIsInJldHVybkVuZCIsImlzSWxsZWdhbCIsImdldExhbmd1YWdlIiwiY3VycmVudCIsImxhbmd1YWdlU3Vic2V0Iiwic2Vjb25kX2Jlc3QiLCJmaXhNYXJrdXAiLCJwMSIsImhpZ2hsaWdodEJsb2NrIiwib3JpZ2luYWxTdHJlYW0iLCJyZXN1bHROb2RlIiwiX2NsYXNzIiwiY2xhc3NlcyIsInBhcmVudE5vZGUiLCJibG9ja0xhbmd1YWdlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJpbm5lckhUTUwiLCJ0ZXh0Q29udGVudCIsIm9yaWdpbmFsIiwiaGlnaGxpZ2h0ZWQiLCJwcm9jZXNzZWQiLCJub2RlU3RhY2siLCJzZWxlY3RTdHJlYW0iLCJvcGVuIiwiYXR0cmlidXRlcyIsImEiLCJjbG9zZSIsInJlbmRlciIsInN0cmVhbSIsIm1lcmdlU3RyZWFtcyIsInByZXZDbGFzc05hbWUiLCJjdXJyZW50TGFuZyIsInJlc3VsdExhbmciLCJidWlsZENsYXNzTmFtZSIsImluaXRIaWdobGlnaHRpbmciLCJjYWxsZWQiLCJibG9ja3MiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY29uZmlndXJlIiwidXNlcl9vcHRpb25zIiwiaW5pdEhpZ2hsaWdodGluZ09uTG9hZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZWdpc3Rlckxhbmd1YWdlIiwiYWxpYXMiLCJsaXN0TGFuZ3VhZ2VzIiwiTlVNQkVSX1JFIiwiQklOQVJZX05VTUJFUl9SRSIsIlBIUkFTQUxfV09SRFNfTU9ERSIsImluaGVyaXRzIiwiQklOQVJZX05VTUJFUl9NT0RFIiwiQ1NTX05VTUJFUl9NT0RFIiwiaGlnaGxpZ2h0X2pzX2xpYl9oaWdobGlnaHRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0IiwiaGlnaGxpZ2h0X2pzX2xpYl9sYW5ndWFnZXNfamF2YXNjcmlwdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQiLCJoaWdobGlnaHRfanNfbGliX2xhbmd1YWdlc19odG1sYmFyc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fX2RlZmF1bHQiLCJoaWdobGlnaHRfanNfbGliX2xhbmd1YWdlc19qc29uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19fZGVmYXVsdCIsImhpZ2hsaWdodF9qc19saWJfbGFuZ3VhZ2VzX2phdmFfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX19kZWZhdWx0IiwiaGlnaGxpZ2h0X2pzX2xpYl9sYW5ndWFnZXNfYmFzaF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fX2RlZmF1bHQiLCIkIiwibXlNYXJrZWQiLCJjb25zb2xlIiwibG9nIiwiZ2V0RWxlbWVudEJ5SWQiLCJhZGRDbGFzcyIsImhtciIsInRyYW5zZm9ybSIsImluc2VydEludG8iLCJsb2NhbHMiXSwibWFwcGluZ3MiOiJhQUNBLFNBQUFBLEVBQUFDLEdBUUEsSUFQQSxJQU1BQyxFQUFBQyxF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QUEsV0FBQTdDLFVBQUEwQyxFQWxQQSxteENBa0ZBLHcxRkFrS0FELEVBQUEsWUFBQUssU0FBQSwrQ0NyUUEsSUFBQTVQLEVBQWNqTSxFQUFRLElBRXRCLGlCQUFBaU0sUUFBNEM1TCxFQUFBMUIsRUFBU3NOLEVBQUEsTUFPckQsSUFBQTNJLEdBQWV3WSxLQUFBLEVBRWZDLGVBUEFBLEVBUUFDLGdCQUFBaFYsR0FFYWhILEVBQVEsRUFBUkEsQ0FBOENpTSxFQUFBM0ksR0FFM0QySSxFQUFBZ1EsU0FBQTViLEVBQUFELFFBQUE2TCxFQUFBZ1EsNkJDakJBNWIsRUFBQUQsUUFBMkJKLEVBQVEsRUFBUkEsRUFBMEMsSUFLckVqQixNQUFjc0IsRUFBQTFCLEVBQVMsdzFDQUFzMUMiLCJmaWxlIjoibWQuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG4gXHRmdW5jdGlvbiB3ZWJwYWNrSnNvbnBDYWxsYmFjayhkYXRhKSB7XG4gXHRcdHZhciBjaHVua0lkcyA9IGRhdGFbMF07XG4gXHRcdHZhciBtb3JlTW9kdWxlcyA9IGRhdGFbMV07XG4gXHRcdHZhciBleGVjdXRlTW9kdWxlcyA9IGRhdGFbMl07XG5cbiBcdFx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG4gXHRcdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuIFx0XHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwLCByZXNvbHZlcyA9IFtdO1xuIFx0XHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcbiBcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcbiBcdFx0XHRcdHJlc29sdmVzLnB1c2goaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKTtcbiBcdFx0XHR9XG4gXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcbiBcdFx0fVxuIFx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGlmKHBhcmVudEpzb25wRnVuY3Rpb24pIHBhcmVudEpzb25wRnVuY3Rpb24oZGF0YSk7XG5cbiBcdFx0d2hpbGUocmVzb2x2ZXMubGVuZ3RoKSB7XG4gXHRcdFx0cmVzb2x2ZXMuc2hpZnQoKSgpO1xuIFx0XHR9XG5cbiBcdFx0Ly8gYWRkIGVudHJ5IG1vZHVsZXMgZnJvbSBsb2FkZWQgY2h1bmsgdG8gZGVmZXJyZWQgbGlzdFxuIFx0XHRkZWZlcnJlZE1vZHVsZXMucHVzaC5hcHBseShkZWZlcnJlZE1vZHVsZXMsIGV4ZWN1dGVNb2R1bGVzIHx8IFtdKTtcblxuIFx0XHQvLyBydW4gZGVmZXJyZWQgbW9kdWxlcyB3aGVuIGFsbCBjaHVua3MgcmVhZHlcbiBcdFx0cmV0dXJuIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCk7XG4gXHR9O1xuIFx0ZnVuY3Rpb24gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKSB7XG4gXHRcdHZhciByZXN1bHQ7XG4gXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHR2YXIgZGVmZXJyZWRNb2R1bGUgPSBkZWZlcnJlZE1vZHVsZXNbaV07XG4gXHRcdFx0dmFyIGZ1bGZpbGxlZCA9IHRydWU7XG4gXHRcdFx0Zm9yKHZhciBqID0gMTsgaiA8IGRlZmVycmVkTW9kdWxlLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHR2YXIgZGVwSWQgPSBkZWZlcnJlZE1vZHVsZVtqXTtcbiBcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rc1tkZXBJZF0gIT09IDApIGZ1bGZpbGxlZCA9IGZhbHNlO1xuIFx0XHRcdH1cbiBcdFx0XHRpZihmdWxmaWxsZWQpIHtcbiBcdFx0XHRcdGRlZmVycmVkTW9kdWxlcy5zcGxpY2UoaS0tLCAxKTtcbiBcdFx0XHRcdHJlc3VsdCA9IF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gZGVmZXJyZWRNb2R1bGVbMF0pO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRyZXR1cm4gcmVzdWx0O1xuIFx0fVxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuIFx0Ly8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4gXHQvLyBQcm9taXNlID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxuIFx0dmFyIGluc3RhbGxlZENodW5rcyA9IHtcbiBcdFx0NDogMFxuIFx0fTtcblxuIFx0dmFyIGRlZmVycmVkTW9kdWxlcyA9IFtdO1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHR2YXIganNvbnBBcnJheSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSB8fCBbXTtcbiBcdHZhciBvbGRKc29ucEZ1bmN0aW9uID0ganNvbnBBcnJheS5wdXNoLmJpbmQoanNvbnBBcnJheSk7XG4gXHRqc29ucEFycmF5LnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjaztcbiBcdGpzb25wQXJyYXkgPSBqc29ucEFycmF5LnNsaWNlKCk7XG4gXHRmb3IodmFyIGkgPSAwOyBpIDwganNvbnBBcnJheS5sZW5ndGg7IGkrKykgd2VicGFja0pzb25wQ2FsbGJhY2soanNvbnBBcnJheVtpXSk7XG4gXHR2YXIgcGFyZW50SnNvbnBGdW5jdGlvbiA9IG9sZEpzb25wRnVuY3Rpb247XG5cblxuIFx0Ly8gYWRkIGVudHJ5IG1vZHVsZSB0byBkZWZlcnJlZCBsaXN0XG4gXHRkZWZlcnJlZE1vZHVsZXMucHVzaChbNjksMF0pO1xuIFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiByZWFkeVxuIFx0cmV0dXJuIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCk7XG4iLCIvKipcbiAqIG1hcmtlZCAtIGEgbWFya2Rvd24gcGFyc2VyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTEtMjAxOCwgQ2hyaXN0b3BoZXIgSmVmZnJleS4gKE1JVCBMaWNlbnNlZClcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJrZWRqcy9tYXJrZWRcbiAqL1xuXG47KGZ1bmN0aW9uKHJvb3QpIHtcbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBCbG9jay1MZXZlbCBHcmFtbWFyXG4gKi9cblxudmFyIGJsb2NrID0ge1xuICBuZXdsaW5lOiAvXlxcbisvLFxuICBjb2RlOiAvXiggezR9W15cXG5dK1xcbiopKy8sXG4gIGZlbmNlczogbm9vcCxcbiAgaHI6IC9eIHswLDN9KCg/Oi0gKil7Myx9fCg/Ol8gKil7Myx9fCg/OlxcKiAqKXszLH0pKD86XFxuK3wkKS8sXG4gIGhlYWRpbmc6IC9eICooI3sxLDZ9KSAqKFteXFxuXSs/KSAqKD86IysgKik/KD86XFxuK3wkKS8sXG4gIG5wdGFibGU6IG5vb3AsXG4gIGJsb2NrcXVvdGU6IC9eKCB7MCwzfT4gPyhwYXJhZ3JhcGh8W15cXG5dKikoPzpcXG58JCkpKy8sXG4gIGxpc3Q6IC9eKCAqKShidWxsKSBbXFxzXFxTXSs/KD86aHJ8ZGVmfFxcbnsyLH0oPyEgKSg/IVxcMWJ1bGwgKVxcbip8XFxzKiQpLyxcbiAgaHRtbDogJ14gezAsM30oPzonIC8vIG9wdGlvbmFsIGluZGVudGF0aW9uXG4gICAgKyAnPChzY3JpcHR8cHJlfHN0eWxlKVtcXFxccz5dW1xcXFxzXFxcXFNdKj8oPzo8L1xcXFwxPlteXFxcXG5dKlxcXFxuK3wkKScgLy8gKDEpXG4gICAgKyAnfGNvbW1lbnRbXlxcXFxuXSooXFxcXG4rfCQpJyAvLyAoMilcbiAgICArICd8PFxcXFw/W1xcXFxzXFxcXFNdKj9cXFxcPz5cXFxcbionIC8vICgzKVxuICAgICsgJ3w8IVtBLVpdW1xcXFxzXFxcXFNdKj8+XFxcXG4qJyAvLyAoNClcbiAgICArICd8PCFcXFxcW0NEQVRBXFxcXFtbXFxcXHNcXFxcU10qP1xcXFxdXFxcXF0+XFxcXG4qJyAvLyAoNSlcbiAgICArICd8PC8/KHRhZykoPzogK3xcXFxcbnwvPz4pW1xcXFxzXFxcXFNdKj8oPzpcXFxcbnsyLH18JCknIC8vICg2KVxuICAgICsgJ3w8KD8hc2NyaXB0fHByZXxzdHlsZSkoW2Etel1bXFxcXHctXSopKD86YXR0cmlidXRlKSo/ICovPz4oPz1cXFxcaCpcXFxcbilbXFxcXHNcXFxcU10qPyg/OlxcXFxuezIsfXwkKScgLy8gKDcpIG9wZW4gdGFnXG4gICAgKyAnfDwvKD8hc2NyaXB0fHByZXxzdHlsZSlbYS16XVtcXFxcdy1dKlxcXFxzKj4oPz1cXFxcaCpcXFxcbilbXFxcXHNcXFxcU10qPyg/OlxcXFxuezIsfXwkKScgLy8gKDcpIGNsb3NpbmcgdGFnXG4gICAgKyAnKScsXG4gIGRlZjogL14gezAsM31cXFsobGFiZWwpXFxdOiAqXFxuPyAqPD8oW15cXHM+XSspPj8oPzooPzogK1xcbj8gKnwgKlxcbiAqKSh0aXRsZSkpPyAqKD86XFxuK3wkKS8sXG4gIHRhYmxlOiBub29wLFxuICBsaGVhZGluZzogL14oW15cXG5dKylcXG4gKig9fC0pezIsfSAqKD86XFxuK3wkKS8sXG4gIHBhcmFncmFwaDogL14oW15cXG5dKyg/Olxcbig/IWhyfGhlYWRpbmd8bGhlYWRpbmd8IHswLDN9Pnw8XFwvPyg/OnRhZykoPzogK3xcXG58XFwvPz4pfDwoPzpzY3JpcHR8cHJlfHN0eWxlfCEtLSkpW15cXG5dKykqKS8sXG4gIHRleHQ6IC9eW15cXG5dKy9cbn07XG5cbmJsb2NrLl9sYWJlbCA9IC8oPyFcXHMqXFxdKSg/OlxcXFxbXFxbXFxdXXxbXlxcW1xcXV0pKy87XG5ibG9jay5fdGl0bGUgPSAvKD86XCIoPzpcXFxcXCI/fFteXCJcXFxcXSkqXCJ8J1teJ1xcbl0qKD86XFxuW14nXFxuXSspKlxcbj8nfFxcKFteKCldKlxcKSkvO1xuYmxvY2suZGVmID0gZWRpdChibG9jay5kZWYpXG4gIC5yZXBsYWNlKCdsYWJlbCcsIGJsb2NrLl9sYWJlbClcbiAgLnJlcGxhY2UoJ3RpdGxlJywgYmxvY2suX3RpdGxlKVxuICAuZ2V0UmVnZXgoKTtcblxuYmxvY2suYnVsbGV0ID0gLyg/OlsqKy1dfFxcZCtcXC4pLztcbmJsb2NrLml0ZW0gPSAvXiggKikoYnVsbCkgW15cXG5dKig/Olxcbig/IVxcMWJ1bGwgKVteXFxuXSopKi87XG5ibG9jay5pdGVtID0gZWRpdChibG9jay5pdGVtLCAnZ20nKVxuICAucmVwbGFjZSgvYnVsbC9nLCBibG9jay5idWxsZXQpXG4gIC5nZXRSZWdleCgpO1xuXG5ibG9jay5saXN0ID0gZWRpdChibG9jay5saXN0KVxuICAucmVwbGFjZSgvYnVsbC9nLCBibG9jay5idWxsZXQpXG4gIC5yZXBsYWNlKCdocicsICdcXFxcbisoPz1cXFxcMT8oPzooPzotICopezMsfXwoPzpfICopezMsfXwoPzpcXFxcKiAqKXszLH0pKD86XFxcXG4rfCQpKScpXG4gIC5yZXBsYWNlKCdkZWYnLCAnXFxcXG4rKD89JyArIGJsb2NrLmRlZi5zb3VyY2UgKyAnKScpXG4gIC5nZXRSZWdleCgpO1xuXG5ibG9jay5fdGFnID0gJ2FkZHJlc3N8YXJ0aWNsZXxhc2lkZXxiYXNlfGJhc2Vmb250fGJsb2NrcXVvdGV8Ym9keXxjYXB0aW9uJ1xuICArICd8Y2VudGVyfGNvbHxjb2xncm91cHxkZHxkZXRhaWxzfGRpYWxvZ3xkaXJ8ZGl2fGRsfGR0fGZpZWxkc2V0fGZpZ2NhcHRpb24nXG4gICsgJ3xmaWd1cmV8Zm9vdGVyfGZvcm18ZnJhbWV8ZnJhbWVzZXR8aFsxLTZdfGhlYWR8aGVhZGVyfGhyfGh0bWx8aWZyYW1lJ1xuICArICd8bGVnZW5kfGxpfGxpbmt8bWFpbnxtZW51fG1lbnVpdGVtfG1ldGF8bmF2fG5vZnJhbWVzfG9sfG9wdGdyb3VwfG9wdGlvbidcbiAgKyAnfHB8cGFyYW18c2VjdGlvbnxzb3VyY2V8c3VtbWFyeXx0YWJsZXx0Ym9keXx0ZHx0Zm9vdHx0aHx0aGVhZHx0aXRsZXx0cidcbiAgKyAnfHRyYWNrfHVsJztcbmJsb2NrLl9jb21tZW50ID0gLzwhLS0oPyEtPz4pW1xcc1xcU10qPy0tPi87XG5ibG9jay5odG1sID0gZWRpdChibG9jay5odG1sLCAnaScpXG4gIC5yZXBsYWNlKCdjb21tZW50JywgYmxvY2suX2NvbW1lbnQpXG4gIC5yZXBsYWNlKCd0YWcnLCBibG9jay5fdGFnKVxuICAucmVwbGFjZSgnYXR0cmlidXRlJywgLyArW2EtekEtWjpfXVtcXHcuOi1dKig/OiAqPSAqXCJbXlwiXFxuXSpcInwgKj0gKidbXidcXG5dKid8ICo9ICpbXlxcc1wiJz08PmBdKyk/LylcbiAgLmdldFJlZ2V4KCk7XG5cbmJsb2NrLnBhcmFncmFwaCA9IGVkaXQoYmxvY2sucGFyYWdyYXBoKVxuICAucmVwbGFjZSgnaHInLCBibG9jay5ocilcbiAgLnJlcGxhY2UoJ2hlYWRpbmcnLCBibG9jay5oZWFkaW5nKVxuICAucmVwbGFjZSgnbGhlYWRpbmcnLCBibG9jay5saGVhZGluZylcbiAgLnJlcGxhY2UoJ3RhZycsIGJsb2NrLl90YWcpIC8vIHBhcnMgY2FuIGJlIGludGVycnVwdGVkIGJ5IHR5cGUgKDYpIGh0bWwgYmxvY2tzXG4gIC5nZXRSZWdleCgpO1xuXG5ibG9jay5ibG9ja3F1b3RlID0gZWRpdChibG9jay5ibG9ja3F1b3RlKVxuICAucmVwbGFjZSgncGFyYWdyYXBoJywgYmxvY2sucGFyYWdyYXBoKVxuICAuZ2V0UmVnZXgoKTtcblxuLyoqXG4gKiBOb3JtYWwgQmxvY2sgR3JhbW1hclxuICovXG5cbmJsb2NrLm5vcm1hbCA9IG1lcmdlKHt9LCBibG9jayk7XG5cbi8qKlxuICogR0ZNIEJsb2NrIEdyYW1tYXJcbiAqL1xuXG5ibG9jay5nZm0gPSBtZXJnZSh7fSwgYmxvY2subm9ybWFsLCB7XG4gIGZlbmNlczogL14gKihgezMsfXx+ezMsfSlbIFxcLl0qKFxcUyspPyAqXFxuKFtcXHNcXFNdKj8pXFxuPyAqXFwxICooPzpcXG4rfCQpLyxcbiAgcGFyYWdyYXBoOiAvXi8sXG4gIGhlYWRpbmc6IC9eICooI3sxLDZ9KSArKFteXFxuXSs/KSAqIyogKig/Olxcbit8JCkvXG59KTtcblxuYmxvY2suZ2ZtLnBhcmFncmFwaCA9IGVkaXQoYmxvY2sucGFyYWdyYXBoKVxuICAucmVwbGFjZSgnKD8hJywgJyg/ISdcbiAgICArIGJsb2NrLmdmbS5mZW5jZXMuc291cmNlLnJlcGxhY2UoJ1xcXFwxJywgJ1xcXFwyJykgKyAnfCdcbiAgICArIGJsb2NrLmxpc3Quc291cmNlLnJlcGxhY2UoJ1xcXFwxJywgJ1xcXFwzJykgKyAnfCcpXG4gIC5nZXRSZWdleCgpO1xuXG4vKipcbiAqIEdGTSArIFRhYmxlcyBCbG9jayBHcmFtbWFyXG4gKi9cblxuYmxvY2sudGFibGVzID0gbWVyZ2Uoe30sIGJsb2NrLmdmbSwge1xuICBucHRhYmxlOiAvXiAqKFtefFxcbiBdLipcXHwuKilcXG4gKihbLTpdKyAqXFx8Wy18IDpdKikoPzpcXG4oKD86LipbXj5cXG4gXS4qKD86XFxufCQpKSopXFxuKnwkKS8sXG4gIHRhYmxlOiAvXiAqXFx8KC4rKVxcbiAqXFx8PyggKlstOl0rWy18IDpdKikoPzpcXG4oKD86ICpbXj5cXG4gXS4qKD86XFxufCQpKSopXFxuKnwkKS9cbn0pO1xuXG4vKipcbiAqIFBlZGFudGljIGdyYW1tYXJcbiAqL1xuXG5ibG9jay5wZWRhbnRpYyA9IG1lcmdlKHt9LCBibG9jay5ub3JtYWwsIHtcbiAgaHRtbDogZWRpdChcbiAgICAnXiAqKD86Y29tbWVudCAqKD86XFxcXG58XFxcXHMqJCknXG4gICAgKyAnfDwodGFnKVtcXFxcc1xcXFxTXSs/PC9cXFxcMT4gKig/OlxcXFxuezIsfXxcXFxccyokKScgLy8gY2xvc2VkIHRhZ1xuICAgICsgJ3w8dGFnKD86XCJbXlwiXSpcInxcXCdbXlxcJ10qXFwnfFxcXFxzW15cXCdcIi8+XFxcXHNdKikqPy8/PiAqKD86XFxcXG57Mix9fFxcXFxzKiQpKScpXG4gICAgLnJlcGxhY2UoJ2NvbW1lbnQnLCBibG9jay5fY29tbWVudClcbiAgICAucmVwbGFjZSgvdGFnL2csICcoPyEoPzonXG4gICAgICArICdhfGVtfHN0cm9uZ3xzbWFsbHxzfGNpdGV8cXxkZm58YWJicnxkYXRhfHRpbWV8Y29kZXx2YXJ8c2FtcHxrYmR8c3ViJ1xuICAgICAgKyAnfHN1cHxpfGJ8dXxtYXJrfHJ1Ynl8cnR8cnB8YmRpfGJkb3xzcGFufGJyfHdicnxpbnN8ZGVsfGltZyknXG4gICAgICArICdcXFxcYilcXFxcdysoPyE6fFteXFxcXHdcXFxcc0BdKkApXFxcXGInKVxuICAgIC5nZXRSZWdleCgpLFxuICBkZWY6IC9eICpcXFsoW15cXF1dKylcXF06ICo8PyhbXlxccz5dKyk+Pyg/OiArKFtcIihdW15cXG5dK1tcIildKSk/ICooPzpcXG4rfCQpL1xufSk7XG5cbi8qKlxuICogQmxvY2sgTGV4ZXJcbiAqL1xuXG5mdW5jdGlvbiBMZXhlcihvcHRpb25zKSB7XG4gIHRoaXMudG9rZW5zID0gW107XG4gIHRoaXMudG9rZW5zLmxpbmtzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCBtYXJrZWQuZGVmYXVsdHM7XG4gIHRoaXMucnVsZXMgPSBibG9jay5ub3JtYWw7XG5cbiAgaWYgKHRoaXMub3B0aW9ucy5wZWRhbnRpYykge1xuICAgIHRoaXMucnVsZXMgPSBibG9jay5wZWRhbnRpYztcbiAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuZ2ZtKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy50YWJsZXMpIHtcbiAgICAgIHRoaXMucnVsZXMgPSBibG9jay50YWJsZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucnVsZXMgPSBibG9jay5nZm07XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRXhwb3NlIEJsb2NrIFJ1bGVzXG4gKi9cblxuTGV4ZXIucnVsZXMgPSBibG9jaztcblxuLyoqXG4gKiBTdGF0aWMgTGV4IE1ldGhvZFxuICovXG5cbkxleGVyLmxleCA9IGZ1bmN0aW9uKHNyYywgb3B0aW9ucykge1xuICB2YXIgbGV4ZXIgPSBuZXcgTGV4ZXIob3B0aW9ucyk7XG4gIHJldHVybiBsZXhlci5sZXgoc3JjKTtcbn07XG5cbi8qKlxuICogUHJlcHJvY2Vzc2luZ1xuICovXG5cbkxleGVyLnByb3RvdHlwZS5sZXggPSBmdW5jdGlvbihzcmMpIHtcbiAgc3JjID0gc3JjXG4gICAgLnJlcGxhY2UoL1xcclxcbnxcXHIvZywgJ1xcbicpXG4gICAgLnJlcGxhY2UoL1xcdC9nLCAnICAgICcpXG4gICAgLnJlcGxhY2UoL1xcdTAwYTAvZywgJyAnKVxuICAgIC5yZXBsYWNlKC9cXHUyNDI0L2csICdcXG4nKTtcblxuICByZXR1cm4gdGhpcy50b2tlbihzcmMsIHRydWUpO1xufTtcblxuLyoqXG4gKiBMZXhpbmdcbiAqL1xuXG5MZXhlci5wcm90b3R5cGUudG9rZW4gPSBmdW5jdGlvbihzcmMsIHRvcCkge1xuICBzcmMgPSBzcmMucmVwbGFjZSgvXiArJC9nbSwgJycpO1xuICB2YXIgbmV4dCxcbiAgICAgIGxvb3NlLFxuICAgICAgY2FwLFxuICAgICAgYnVsbCxcbiAgICAgIGIsXG4gICAgICBpdGVtLFxuICAgICAgbGlzdFN0YXJ0LFxuICAgICAgbGlzdEl0ZW1zLFxuICAgICAgdCxcbiAgICAgIHNwYWNlLFxuICAgICAgaSxcbiAgICAgIHRhZyxcbiAgICAgIGwsXG4gICAgICBpc29yZGVyZWQsXG4gICAgICBpc3Rhc2ssXG4gICAgICBpc2NoZWNrZWQ7XG5cbiAgd2hpbGUgKHNyYykge1xuICAgIC8vIG5ld2xpbmVcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5uZXdsaW5lLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIGlmIChjYXBbMF0ubGVuZ3RoID4gMSkge1xuICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiAnc3BhY2UnXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNvZGVcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5jb2RlLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIGNhcCA9IGNhcFswXS5yZXBsYWNlKC9eIHs0fS9nbSwgJycpO1xuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdjb2RlJyxcbiAgICAgICAgdGV4dDogIXRoaXMub3B0aW9ucy5wZWRhbnRpY1xuICAgICAgICAgID8gcnRyaW0oY2FwLCAnXFxuJylcbiAgICAgICAgICA6IGNhcFxuICAgICAgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBmZW5jZXMgKGdmbSlcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5mZW5jZXMuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdjb2RlJyxcbiAgICAgICAgbGFuZzogY2FwWzJdLFxuICAgICAgICB0ZXh0OiBjYXBbM10gfHwgJydcbiAgICAgIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gaGVhZGluZ1xuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmhlYWRpbmcuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdoZWFkaW5nJyxcbiAgICAgICAgZGVwdGg6IGNhcFsxXS5sZW5ndGgsXG4gICAgICAgIHRleHQ6IGNhcFsyXVxuICAgICAgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyB0YWJsZSBubyBsZWFkaW5nIHBpcGUgKGdmbSlcbiAgICBpZiAodG9wICYmIChjYXAgPSB0aGlzLnJ1bGVzLm5wdGFibGUuZXhlYyhzcmMpKSkge1xuICAgICAgaXRlbSA9IHtcbiAgICAgICAgdHlwZTogJ3RhYmxlJyxcbiAgICAgICAgaGVhZGVyOiBzcGxpdENlbGxzKGNhcFsxXS5yZXBsYWNlKC9eICp8ICpcXHwgKiQvZywgJycpKSxcbiAgICAgICAgYWxpZ246IGNhcFsyXS5yZXBsYWNlKC9eICp8XFx8ICokL2csICcnKS5zcGxpdCgvICpcXHwgKi8pLFxuICAgICAgICBjZWxsczogY2FwWzNdID8gY2FwWzNdLnJlcGxhY2UoL1xcbiQvLCAnJykuc3BsaXQoJ1xcbicpIDogW11cbiAgICAgIH07XG5cbiAgICAgIGlmIChpdGVtLmhlYWRlci5sZW5ndGggPT09IGl0ZW0uYWxpZ24ubGVuZ3RoKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGl0ZW0uYWxpZ24ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoL14gKi0rOiAqJC8udGVzdChpdGVtLmFsaWduW2ldKSkge1xuICAgICAgICAgICAgaXRlbS5hbGlnbltpXSA9ICdyaWdodCc7XG4gICAgICAgICAgfSBlbHNlIGlmICgvXiAqOi0rOiAqJC8udGVzdChpdGVtLmFsaWduW2ldKSkge1xuICAgICAgICAgICAgaXRlbS5hbGlnbltpXSA9ICdjZW50ZXInO1xuICAgICAgICAgIH0gZWxzZSBpZiAoL14gKjotKyAqJC8udGVzdChpdGVtLmFsaWduW2ldKSkge1xuICAgICAgICAgICAgaXRlbS5hbGlnbltpXSA9ICdsZWZ0JztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXRlbS5hbGlnbltpXSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGl0ZW0uY2VsbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpdGVtLmNlbGxzW2ldID0gc3BsaXRDZWxscyhpdGVtLmNlbGxzW2ldLCBpdGVtLmhlYWRlci5sZW5ndGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50b2tlbnMucHVzaChpdGVtKTtcblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBoclxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmhyLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnaHInXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGJsb2NrcXVvdGVcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5ibG9ja3F1b3RlLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcblxuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdibG9ja3F1b3RlX3N0YXJ0J1xuICAgICAgfSk7XG5cbiAgICAgIGNhcCA9IGNhcFswXS5yZXBsYWNlKC9eICo+ID8vZ20sICcnKTtcblxuICAgICAgLy8gUGFzcyBgdG9wYCB0byBrZWVwIHRoZSBjdXJyZW50XG4gICAgICAvLyBcInRvcGxldmVsXCIgc3RhdGUuIFRoaXMgaXMgZXhhY3RseVxuICAgICAgLy8gaG93IG1hcmtkb3duLnBsIHdvcmtzLlxuICAgICAgdGhpcy50b2tlbihjYXAsIHRvcCk7XG5cbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnYmxvY2txdW90ZV9lbmQnXG4gICAgICB9KTtcblxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gbGlzdFxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmxpc3QuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgYnVsbCA9IGNhcFsyXTtcbiAgICAgIGlzb3JkZXJlZCA9IGJ1bGwubGVuZ3RoID4gMTtcblxuICAgICAgbGlzdFN0YXJ0ID0ge1xuICAgICAgICB0eXBlOiAnbGlzdF9zdGFydCcsXG4gICAgICAgIG9yZGVyZWQ6IGlzb3JkZXJlZCxcbiAgICAgICAgc3RhcnQ6IGlzb3JkZXJlZCA/ICtidWxsIDogJycsXG4gICAgICAgIGxvb3NlOiBmYWxzZVxuICAgICAgfTtcblxuICAgICAgdGhpcy50b2tlbnMucHVzaChsaXN0U3RhcnQpO1xuXG4gICAgICAvLyBHZXQgZWFjaCB0b3AtbGV2ZWwgaXRlbS5cbiAgICAgIGNhcCA9IGNhcFswXS5tYXRjaCh0aGlzLnJ1bGVzLml0ZW0pO1xuXG4gICAgICBsaXN0SXRlbXMgPSBbXTtcbiAgICAgIG5leHQgPSBmYWxzZTtcbiAgICAgIGwgPSBjYXAubGVuZ3RoO1xuICAgICAgaSA9IDA7XG5cbiAgICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGl0ZW0gPSBjYXBbaV07XG5cbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBsaXN0IGl0ZW0ncyBidWxsZXRcbiAgICAgICAgLy8gc28gaXQgaXMgc2VlbiBhcyB0aGUgbmV4dCB0b2tlbi5cbiAgICAgICAgc3BhY2UgPSBpdGVtLmxlbmd0aDtcbiAgICAgICAgaXRlbSA9IGl0ZW0ucmVwbGFjZSgvXiAqKFsqKy1dfFxcZCtcXC4pICsvLCAnJyk7XG5cbiAgICAgICAgLy8gT3V0ZGVudCB3aGF0ZXZlciB0aGVcbiAgICAgICAgLy8gbGlzdCBpdGVtIGNvbnRhaW5zLiBIYWNreS5cbiAgICAgICAgaWYgKH5pdGVtLmluZGV4T2YoJ1xcbiAnKSkge1xuICAgICAgICAgIHNwYWNlIC09IGl0ZW0ubGVuZ3RoO1xuICAgICAgICAgIGl0ZW0gPSAhdGhpcy5vcHRpb25zLnBlZGFudGljXG4gICAgICAgICAgICA/IGl0ZW0ucmVwbGFjZShuZXcgUmVnRXhwKCdeIHsxLCcgKyBzcGFjZSArICd9JywgJ2dtJyksICcnKVxuICAgICAgICAgICAgOiBpdGVtLnJlcGxhY2UoL14gezEsNH0vZ20sICcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERldGVybWluZSB3aGV0aGVyIHRoZSBuZXh0IGxpc3QgaXRlbSBiZWxvbmdzIGhlcmUuXG4gICAgICAgIC8vIEJhY2twZWRhbCBpZiBpdCBkb2VzIG5vdCBiZWxvbmcgaW4gdGhpcyBsaXN0LlxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNtYXJ0TGlzdHMgJiYgaSAhPT0gbCAtIDEpIHtcbiAgICAgICAgICBiID0gYmxvY2suYnVsbGV0LmV4ZWMoY2FwW2kgKyAxXSlbMF07XG4gICAgICAgICAgaWYgKGJ1bGwgIT09IGIgJiYgIShidWxsLmxlbmd0aCA+IDEgJiYgYi5sZW5ndGggPiAxKSkge1xuICAgICAgICAgICAgc3JjID0gY2FwLnNsaWNlKGkgKyAxKS5qb2luKCdcXG4nKSArIHNyYztcbiAgICAgICAgICAgIGkgPSBsIC0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZXRlcm1pbmUgd2hldGhlciBpdGVtIGlzIGxvb3NlIG9yIG5vdC5cbiAgICAgICAgLy8gVXNlOiAvKF58XFxuKSg/ISApW15cXG5dK1xcblxcbig/IVxccyokKS9cbiAgICAgICAgLy8gZm9yIGRpc2NvdW50IGJlaGF2aW9yLlxuICAgICAgICBsb29zZSA9IG5leHQgfHwgL1xcblxcbig/IVxccyokKS8udGVzdChpdGVtKTtcbiAgICAgICAgaWYgKGkgIT09IGwgLSAxKSB7XG4gICAgICAgICAgbmV4dCA9IGl0ZW0uY2hhckF0KGl0ZW0ubGVuZ3RoIC0gMSkgPT09ICdcXG4nO1xuICAgICAgICAgIGlmICghbG9vc2UpIGxvb3NlID0gbmV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsb29zZSkge1xuICAgICAgICAgIGxpc3RTdGFydC5sb29zZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBmb3IgdGFzayBsaXN0IGl0ZW1zXG4gICAgICAgIGlzdGFzayA9IC9eXFxbWyB4WF1cXF0gLy50ZXN0KGl0ZW0pO1xuICAgICAgICBpc2NoZWNrZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChpc3Rhc2spIHtcbiAgICAgICAgICBpc2NoZWNrZWQgPSBpdGVtWzFdICE9PSAnICc7XG4gICAgICAgICAgaXRlbSA9IGl0ZW0ucmVwbGFjZSgvXlxcW1sgeFhdXFxdICsvLCAnJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0ID0ge1xuICAgICAgICAgIHR5cGU6ICdsaXN0X2l0ZW1fc3RhcnQnLFxuICAgICAgICAgIHRhc2s6IGlzdGFzayxcbiAgICAgICAgICBjaGVja2VkOiBpc2NoZWNrZWQsXG4gICAgICAgICAgbG9vc2U6IGxvb3NlXG4gICAgICAgIH07XG5cbiAgICAgICAgbGlzdEl0ZW1zLnB1c2godCk7XG4gICAgICAgIHRoaXMudG9rZW5zLnB1c2godCk7XG5cbiAgICAgICAgLy8gUmVjdXJzZS5cbiAgICAgICAgdGhpcy50b2tlbihpdGVtLCBmYWxzZSk7XG5cbiAgICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgICAgdHlwZTogJ2xpc3RfaXRlbV9lbmQnXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAobGlzdFN0YXJ0Lmxvb3NlKSB7XG4gICAgICAgIGwgPSBsaXN0SXRlbXMubGVuZ3RoO1xuICAgICAgICBpID0gMDtcbiAgICAgICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBsaXN0SXRlbXNbaV0ubG9vc2UgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnbGlzdF9lbmQnXG4gICAgICB9KTtcblxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gaHRtbFxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmh0bWwuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6IHRoaXMub3B0aW9ucy5zYW5pdGl6ZVxuICAgICAgICAgID8gJ3BhcmFncmFwaCdcbiAgICAgICAgICA6ICdodG1sJyxcbiAgICAgICAgcHJlOiAhdGhpcy5vcHRpb25zLnNhbml0aXplclxuICAgICAgICAgICYmIChjYXBbMV0gPT09ICdwcmUnIHx8IGNhcFsxXSA9PT0gJ3NjcmlwdCcgfHwgY2FwWzFdID09PSAnc3R5bGUnKSxcbiAgICAgICAgdGV4dDogY2FwWzBdXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGRlZlxuICAgIGlmICh0b3AgJiYgKGNhcCA9IHRoaXMucnVsZXMuZGVmLmV4ZWMoc3JjKSkpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBpZiAoY2FwWzNdKSBjYXBbM10gPSBjYXBbM10uc3Vic3RyaW5nKDEsIGNhcFszXS5sZW5ndGggLSAxKTtcbiAgICAgIHRhZyA9IGNhcFsxXS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccysvZywgJyAnKTtcbiAgICAgIGlmICghdGhpcy50b2tlbnMubGlua3NbdGFnXSkge1xuICAgICAgICB0aGlzLnRva2Vucy5saW5rc1t0YWddID0ge1xuICAgICAgICAgIGhyZWY6IGNhcFsyXSxcbiAgICAgICAgICB0aXRsZTogY2FwWzNdXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyB0YWJsZSAoZ2ZtKVxuICAgIGlmICh0b3AgJiYgKGNhcCA9IHRoaXMucnVsZXMudGFibGUuZXhlYyhzcmMpKSkge1xuICAgICAgaXRlbSA9IHtcbiAgICAgICAgdHlwZTogJ3RhYmxlJyxcbiAgICAgICAgaGVhZGVyOiBzcGxpdENlbGxzKGNhcFsxXS5yZXBsYWNlKC9eICp8ICpcXHwgKiQvZywgJycpKSxcbiAgICAgICAgYWxpZ246IGNhcFsyXS5yZXBsYWNlKC9eICp8XFx8ICokL2csICcnKS5zcGxpdCgvICpcXHwgKi8pLFxuICAgICAgICBjZWxsczogY2FwWzNdID8gY2FwWzNdLnJlcGxhY2UoLyg/OiAqXFx8ICopP1xcbiQvLCAnJykuc3BsaXQoJ1xcbicpIDogW11cbiAgICAgIH07XG5cbiAgICAgIGlmIChpdGVtLmhlYWRlci5sZW5ndGggPT09IGl0ZW0uYWxpZ24ubGVuZ3RoKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGl0ZW0uYWxpZ24ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoL14gKi0rOiAqJC8udGVzdChpdGVtLmFsaWduW2ldKSkge1xuICAgICAgICAgICAgaXRlbS5hbGlnbltpXSA9ICdyaWdodCc7XG4gICAgICAgICAgfSBlbHNlIGlmICgvXiAqOi0rOiAqJC8udGVzdChpdGVtLmFsaWduW2ldKSkge1xuICAgICAgICAgICAgaXRlbS5hbGlnbltpXSA9ICdjZW50ZXInO1xuICAgICAgICAgIH0gZWxzZSBpZiAoL14gKjotKyAqJC8udGVzdChpdGVtLmFsaWduW2ldKSkge1xuICAgICAgICAgICAgaXRlbS5hbGlnbltpXSA9ICdsZWZ0JztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXRlbS5hbGlnbltpXSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGl0ZW0uY2VsbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpdGVtLmNlbGxzW2ldID0gc3BsaXRDZWxscyhcbiAgICAgICAgICAgIGl0ZW0uY2VsbHNbaV0ucmVwbGFjZSgvXiAqXFx8ICp8ICpcXHwgKiQvZywgJycpLFxuICAgICAgICAgICAgaXRlbS5oZWFkZXIubGVuZ3RoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudG9rZW5zLnB1c2goaXRlbSk7XG5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gbGhlYWRpbmdcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5saGVhZGluZy5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2hlYWRpbmcnLFxuICAgICAgICBkZXB0aDogY2FwWzJdID09PSAnPScgPyAxIDogMixcbiAgICAgICAgdGV4dDogY2FwWzFdXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHRvcC1sZXZlbCBwYXJhZ3JhcGhcbiAgICBpZiAodG9wICYmIChjYXAgPSB0aGlzLnJ1bGVzLnBhcmFncmFwaC5leGVjKHNyYykpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdwYXJhZ3JhcGgnLFxuICAgICAgICB0ZXh0OiBjYXBbMV0uY2hhckF0KGNhcFsxXS5sZW5ndGggLSAxKSA9PT0gJ1xcbidcbiAgICAgICAgICA/IGNhcFsxXS5zbGljZSgwLCAtMSlcbiAgICAgICAgICA6IGNhcFsxXVxuICAgICAgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyB0ZXh0XG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMudGV4dC5leGVjKHNyYykpIHtcbiAgICAgIC8vIFRvcC1sZXZlbCBzaG91bGQgbmV2ZXIgcmVhY2ggaGVyZS5cbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICB0ZXh0OiBjYXBbMF1cbiAgICAgIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHNyYykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbmZpbml0ZSBsb29wIG9uIGJ5dGU6ICcgKyBzcmMuY2hhckNvZGVBdCgwKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXMudG9rZW5zO1xufTtcblxuLyoqXG4gKiBJbmxpbmUtTGV2ZWwgR3JhbW1hclxuICovXG5cbnZhciBpbmxpbmUgPSB7XG4gIGVzY2FwZTogL15cXFxcKFshXCIjJCUmJygpKissXFwtLi86Ozw9Pj9AXFxbXFxdXFxcXF5fYHt8fX5dKS8sXG4gIGF1dG9saW5rOiAvXjwoc2NoZW1lOlteXFxzXFx4MDAtXFx4MWY8Pl0qfGVtYWlsKT4vLFxuICB1cmw6IG5vb3AsXG4gIHRhZzogJ15jb21tZW50J1xuICAgICsgJ3xePC9bYS16QS1aXVtcXFxcdzotXSpcXFxccyo+JyAvLyBzZWxmLWNsb3NpbmcgdGFnXG4gICAgKyAnfF48W2EtekEtWl1bXFxcXHctXSooPzphdHRyaWJ1dGUpKj9cXFxccyovPz4nIC8vIG9wZW4gdGFnXG4gICAgKyAnfF48XFxcXD9bXFxcXHNcXFxcU10qP1xcXFw/PicgLy8gcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiwgZS5nLiA8P3BocCA/PlxuICAgICsgJ3xePCFbYS16QS1aXStcXFxcc1tcXFxcc1xcXFxTXSo/PicgLy8gZGVjbGFyYXRpb24sIGUuZy4gPCFET0NUWVBFIGh0bWw+XG4gICAgKyAnfF48IVxcXFxbQ0RBVEFcXFxcW1tcXFxcc1xcXFxTXSo/XFxcXF1cXFxcXT4nLCAvLyBDREFUQSBzZWN0aW9uXG4gIGxpbms6IC9eIT9cXFsobGFiZWwpXFxdXFwoaHJlZig/OlxccysodGl0bGUpKT9cXHMqXFwpLyxcbiAgcmVmbGluazogL14hP1xcWyhsYWJlbClcXF1cXFsoPyFcXHMqXFxdKSgoPzpcXFxcW1xcW1xcXV0/fFteXFxbXFxdXFxcXF0pKylcXF0vLFxuICBub2xpbms6IC9eIT9cXFsoPyFcXHMqXFxdKSgoPzpcXFtbXlxcW1xcXV0qXFxdfFxcXFxbXFxbXFxdXXxbXlxcW1xcXV0pKilcXF0oPzpcXFtcXF0pPy8sXG4gIHN0cm9uZzogL15fXyhbXlxcc10pX18oPyFfKXxeXFwqXFwqKFteXFxzXSlcXCpcXCooPyFcXCopfF5fXyhbXlxcc11bXFxzXFxTXSo/W15cXHNdKV9fKD8hXyl8XlxcKlxcKihbXlxcc11bXFxzXFxTXSo/W15cXHNdKVxcKlxcKig/IVxcKikvLFxuICBlbTogL15fKFteXFxzX10pXyg/IV8pfF5cXCooW15cXHMqXCI8XFxbXSlcXCooPyFcXCopfF5fKFteXFxzXVtcXHNcXFNdKj9bXlxcc19dKV8oPyFfKXxeXyhbXlxcc19dW1xcc1xcU10qP1teXFxzXSlfKD8hXyl8XlxcKihbXlxcc1wiPFxcW11bXFxzXFxTXSo/W15cXHMqXSlcXCooPyFcXCopfF5cXCooW15cXHMqXCI8XFxbXVtcXHNcXFNdKj9bXlxcc10pXFwqKD8hXFwqKS8sXG4gIGNvZGU6IC9eKGArKShbXmBdfFteYF1bXFxzXFxTXSo/W15gXSlcXDEoPyFgKS8sXG4gIGJyOiAvXiggezIsfXxcXFxcKVxcbig/IVxccyokKS8sXG4gIGRlbDogbm9vcCxcbiAgdGV4dDogL14oYCt8W15gXSlbXFxzXFxTXSo/KD89W1xcXFw8IVxcW2AqXXxcXGJffCB7Mix9XFxufCQpL1xufTtcblxuaW5saW5lLl9lc2NhcGVzID0gL1xcXFwoWyFcIiMkJSYnKCkqKyxcXC0uLzo7PD0+P0BcXFtcXF1cXFxcXl9ge3x9fl0pL2c7XG5cbmlubGluZS5fc2NoZW1lID0gL1thLXpBLVpdW2EtekEtWjAtOSsuLV17MSwzMX0vO1xuaW5saW5lLl9lbWFpbCA9IC9bYS16QS1aMC05LiEjJCUmJyorLz0/Xl9ge3x9fi1dKyhAKVthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPyg/OlxcLlthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPykrKD8hWy1fXSkvO1xuaW5saW5lLmF1dG9saW5rID0gZWRpdChpbmxpbmUuYXV0b2xpbmspXG4gIC5yZXBsYWNlKCdzY2hlbWUnLCBpbmxpbmUuX3NjaGVtZSlcbiAgLnJlcGxhY2UoJ2VtYWlsJywgaW5saW5lLl9lbWFpbClcbiAgLmdldFJlZ2V4KCk7XG5cbmlubGluZS5fYXR0cmlidXRlID0gL1xccytbYS16QS1aOl9dW1xcdy46LV0qKD86XFxzKj1cXHMqXCJbXlwiXSpcInxcXHMqPVxccyonW14nXSonfFxccyo9XFxzKlteXFxzXCInPTw+YF0rKT8vO1xuXG5pbmxpbmUudGFnID0gZWRpdChpbmxpbmUudGFnKVxuICAucmVwbGFjZSgnY29tbWVudCcsIGJsb2NrLl9jb21tZW50KVxuICAucmVwbGFjZSgnYXR0cmlidXRlJywgaW5saW5lLl9hdHRyaWJ1dGUpXG4gIC5nZXRSZWdleCgpO1xuXG5pbmxpbmUuX2xhYmVsID0gLyg/OlxcW1teXFxbXFxdXSpcXF18XFxcXFtcXFtcXF1dP3xgW15gXSpgfFteXFxbXFxdXFxcXF0pKj8vO1xuaW5saW5lLl9ocmVmID0gL1xccyooPCg/OlxcXFxbPD5dP3xbXlxcczw+XFxcXF0pKj58KD86XFxcXFsoKV0/fFxcKFteXFxzXFx4MDAtXFx4MWZcXFxcXSpcXCl8W15cXHNcXHgwMC1cXHgxZigpXFxcXF0pKj8pLztcbmlubGluZS5fdGl0bGUgPSAvXCIoPzpcXFxcXCI/fFteXCJcXFxcXSkqXCJ8Jyg/OlxcXFwnP3xbXidcXFxcXSkqJ3xcXCgoPzpcXFxcXFwpP3xbXilcXFxcXSkqXFwpLztcblxuaW5saW5lLmxpbmsgPSBlZGl0KGlubGluZS5saW5rKVxuICAucmVwbGFjZSgnbGFiZWwnLCBpbmxpbmUuX2xhYmVsKVxuICAucmVwbGFjZSgnaHJlZicsIGlubGluZS5faHJlZilcbiAgLnJlcGxhY2UoJ3RpdGxlJywgaW5saW5lLl90aXRsZSlcbiAgLmdldFJlZ2V4KCk7XG5cbmlubGluZS5yZWZsaW5rID0gZWRpdChpbmxpbmUucmVmbGluaylcbiAgLnJlcGxhY2UoJ2xhYmVsJywgaW5saW5lLl9sYWJlbClcbiAgLmdldFJlZ2V4KCk7XG5cbi8qKlxuICogTm9ybWFsIElubGluZSBHcmFtbWFyXG4gKi9cblxuaW5saW5lLm5vcm1hbCA9IG1lcmdlKHt9LCBpbmxpbmUpO1xuXG4vKipcbiAqIFBlZGFudGljIElubGluZSBHcmFtbWFyXG4gKi9cblxuaW5saW5lLnBlZGFudGljID0gbWVyZ2Uoe30sIGlubGluZS5ub3JtYWwsIHtcbiAgc3Ryb25nOiAvXl9fKD89XFxTKShbXFxzXFxTXSo/XFxTKV9fKD8hXyl8XlxcKlxcKig/PVxcUykoW1xcc1xcU10qP1xcUylcXCpcXCooPyFcXCopLyxcbiAgZW06IC9eXyg/PVxcUykoW1xcc1xcU10qP1xcUylfKD8hXyl8XlxcKig/PVxcUykoW1xcc1xcU10qP1xcUylcXCooPyFcXCopLyxcbiAgbGluazogZWRpdCgvXiE/XFxbKGxhYmVsKVxcXVxcKCguKj8pXFwpLylcbiAgICAucmVwbGFjZSgnbGFiZWwnLCBpbmxpbmUuX2xhYmVsKVxuICAgIC5nZXRSZWdleCgpLFxuICByZWZsaW5rOiBlZGl0KC9eIT9cXFsobGFiZWwpXFxdXFxzKlxcWyhbXlxcXV0qKVxcXS8pXG4gICAgLnJlcGxhY2UoJ2xhYmVsJywgaW5saW5lLl9sYWJlbClcbiAgICAuZ2V0UmVnZXgoKVxufSk7XG5cbi8qKlxuICogR0ZNIElubGluZSBHcmFtbWFyXG4gKi9cblxuaW5saW5lLmdmbSA9IG1lcmdlKHt9LCBpbmxpbmUubm9ybWFsLCB7XG4gIGVzY2FwZTogZWRpdChpbmxpbmUuZXNjYXBlKS5yZXBsYWNlKCddKScsICd+fF0pJykuZ2V0UmVnZXgoKSxcbiAgX2V4dGVuZGVkX2VtYWlsOiAvW0EtWmEtejAtOS5fKy1dKyhAKVthLXpBLVowLTktX10rKD86XFwuW2EtekEtWjAtOS1fXSpbYS16QS1aMC05XSkrKD8hWy1fXSkvLFxuICB1cmw6IC9eKCg/OmZ0cHxodHRwcz8pOlxcL1xcL3x3d3dcXC4pKD86W2EtekEtWjAtOVxcLV0rXFwuPykrW15cXHM8XSp8XmVtYWlsLyxcbiAgX2JhY2twZWRhbDogLyg/OltePyEuLDo7Kl9+KCkmXSt8XFwoW14pXSpcXCl8Jig/IVthLXpBLVowLTldKzskKXxbPyEuLDo7Kl9+KV0rKD8hJCkpKy8sXG4gIGRlbDogL15+Kyg/PVxcUykoW1xcc1xcU10qP1xcUyl+Ky8sXG4gIHRleHQ6IGVkaXQoaW5saW5lLnRleHQpXG4gICAgLnJlcGxhY2UoJ118JywgJ35dfCcpXG4gICAgLnJlcGxhY2UoJ3wkJywgJ3xodHRwcz86Ly98ZnRwOi8vfHd3d1xcXFwufFthLXpBLVowLTkuISMkJSZcXCcqKy89P15fYHtcXFxcfH1+LV0rQHwkJylcbiAgICAuZ2V0UmVnZXgoKVxufSk7XG5cbmlubGluZS5nZm0udXJsID0gZWRpdChpbmxpbmUuZ2ZtLnVybClcbiAgLnJlcGxhY2UoJ2VtYWlsJywgaW5saW5lLmdmbS5fZXh0ZW5kZWRfZW1haWwpXG4gIC5nZXRSZWdleCgpO1xuLyoqXG4gKiBHRk0gKyBMaW5lIEJyZWFrcyBJbmxpbmUgR3JhbW1hclxuICovXG5cbmlubGluZS5icmVha3MgPSBtZXJnZSh7fSwgaW5saW5lLmdmbSwge1xuICBicjogZWRpdChpbmxpbmUuYnIpLnJlcGxhY2UoJ3syLH0nLCAnKicpLmdldFJlZ2V4KCksXG4gIHRleHQ6IGVkaXQoaW5saW5lLmdmbS50ZXh0KS5yZXBsYWNlKCd7Mix9JywgJyonKS5nZXRSZWdleCgpXG59KTtcblxuLyoqXG4gKiBJbmxpbmUgTGV4ZXIgJiBDb21waWxlclxuICovXG5cbmZ1bmN0aW9uIElubGluZUxleGVyKGxpbmtzLCBvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwgbWFya2VkLmRlZmF1bHRzO1xuICB0aGlzLmxpbmtzID0gbGlua3M7XG4gIHRoaXMucnVsZXMgPSBpbmxpbmUubm9ybWFsO1xuICB0aGlzLnJlbmRlcmVyID0gdGhpcy5vcHRpb25zLnJlbmRlcmVyIHx8IG5ldyBSZW5kZXJlcigpO1xuICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgaWYgKCF0aGlzLmxpbmtzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUb2tlbnMgYXJyYXkgcmVxdWlyZXMgYSBgbGlua3NgIHByb3BlcnR5LicpO1xuICB9XG5cbiAgaWYgKHRoaXMub3B0aW9ucy5wZWRhbnRpYykge1xuICAgIHRoaXMucnVsZXMgPSBpbmxpbmUucGVkYW50aWM7XG4gIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmdmbSkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuYnJlYWtzKSB7XG4gICAgICB0aGlzLnJ1bGVzID0gaW5saW5lLmJyZWFrcztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ydWxlcyA9IGlubGluZS5nZm07XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRXhwb3NlIElubGluZSBSdWxlc1xuICovXG5cbklubGluZUxleGVyLnJ1bGVzID0gaW5saW5lO1xuXG4vKipcbiAqIFN0YXRpYyBMZXhpbmcvQ29tcGlsaW5nIE1ldGhvZFxuICovXG5cbklubGluZUxleGVyLm91dHB1dCA9IGZ1bmN0aW9uKHNyYywgbGlua3MsIG9wdGlvbnMpIHtcbiAgdmFyIGlubGluZSA9IG5ldyBJbmxpbmVMZXhlcihsaW5rcywgb3B0aW9ucyk7XG4gIHJldHVybiBpbmxpbmUub3V0cHV0KHNyYyk7XG59O1xuXG4vKipcbiAqIExleGluZy9Db21waWxpbmdcbiAqL1xuXG5JbmxpbmVMZXhlci5wcm90b3R5cGUub3V0cHV0ID0gZnVuY3Rpb24oc3JjKSB7XG4gIHZhciBvdXQgPSAnJyxcbiAgICAgIGxpbmssXG4gICAgICB0ZXh0LFxuICAgICAgaHJlZixcbiAgICAgIHRpdGxlLFxuICAgICAgY2FwLFxuICAgICAgcHJldkNhcFplcm87XG5cbiAgd2hpbGUgKHNyYykge1xuICAgIC8vIGVzY2FwZVxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmVzY2FwZS5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBvdXQgKz0gY2FwWzFdO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gYXV0b2xpbmtcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5hdXRvbGluay5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBpZiAoY2FwWzJdID09PSAnQCcpIHtcbiAgICAgICAgdGV4dCA9IGVzY2FwZSh0aGlzLm1hbmdsZShjYXBbMV0pKTtcbiAgICAgICAgaHJlZiA9ICdtYWlsdG86JyArIHRleHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZXh0ID0gZXNjYXBlKGNhcFsxXSk7XG4gICAgICAgIGhyZWYgPSB0ZXh0O1xuICAgICAgfVxuICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIubGluayhocmVmLCBudWxsLCB0ZXh0KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHVybCAoZ2ZtKVxuICAgIGlmICghdGhpcy5pbkxpbmsgJiYgKGNhcCA9IHRoaXMucnVsZXMudXJsLmV4ZWMoc3JjKSkpIHtcbiAgICAgIGlmIChjYXBbMl0gPT09ICdAJykge1xuICAgICAgICB0ZXh0ID0gZXNjYXBlKGNhcFswXSk7XG4gICAgICAgIGhyZWYgPSAnbWFpbHRvOicgKyB0ZXh0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZG8gZXh0ZW5kZWQgYXV0b2xpbmsgcGF0aCB2YWxpZGF0aW9uXG4gICAgICAgIGRvIHtcbiAgICAgICAgICBwcmV2Q2FwWmVybyA9IGNhcFswXTtcbiAgICAgICAgICBjYXBbMF0gPSB0aGlzLnJ1bGVzLl9iYWNrcGVkYWwuZXhlYyhjYXBbMF0pWzBdO1xuICAgICAgICB9IHdoaWxlIChwcmV2Q2FwWmVybyAhPT0gY2FwWzBdKTtcbiAgICAgICAgdGV4dCA9IGVzY2FwZShjYXBbMF0pO1xuICAgICAgICBpZiAoY2FwWzFdID09PSAnd3d3LicpIHtcbiAgICAgICAgICBocmVmID0gJ2h0dHA6Ly8nICsgdGV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBocmVmID0gdGV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmxpbmsoaHJlZiwgbnVsbCwgdGV4dCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyB0YWdcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy50YWcuZXhlYyhzcmMpKSB7XG4gICAgICBpZiAoIXRoaXMuaW5MaW5rICYmIC9ePGEgL2kudGVzdChjYXBbMF0pKSB7XG4gICAgICAgIHRoaXMuaW5MaW5rID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pbkxpbmsgJiYgL148XFwvYT4vaS50ZXN0KGNhcFswXSkpIHtcbiAgICAgICAgdGhpcy5pbkxpbmsgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5pblJhd0Jsb2NrICYmIC9ePChwcmV8Y29kZXxrYmR8c2NyaXB0KShcXHN8PikvaS50ZXN0KGNhcFswXSkpIHtcbiAgICAgICAgdGhpcy5pblJhd0Jsb2NrID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pblJhd0Jsb2NrICYmIC9ePFxcLyhwcmV8Y29kZXxrYmR8c2NyaXB0KShcXHN8PikvaS50ZXN0KGNhcFswXSkpIHtcbiAgICAgICAgdGhpcy5pblJhd0Jsb2NrID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBvdXQgKz0gdGhpcy5vcHRpb25zLnNhbml0aXplXG4gICAgICAgID8gdGhpcy5vcHRpb25zLnNhbml0aXplclxuICAgICAgICAgID8gdGhpcy5vcHRpb25zLnNhbml0aXplcihjYXBbMF0pXG4gICAgICAgICAgOiBlc2NhcGUoY2FwWzBdKVxuICAgICAgICA6IGNhcFswXVxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gbGlua1xuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmxpbmsuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgdGhpcy5pbkxpbmsgPSB0cnVlO1xuICAgICAgaHJlZiA9IGNhcFsyXTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucGVkYW50aWMpIHtcbiAgICAgICAgbGluayA9IC9eKFteJ1wiXSpbXlxcc10pXFxzKyhbJ1wiXSkoLiopXFwyLy5leGVjKGhyZWYpO1xuXG4gICAgICAgIGlmIChsaW5rKSB7XG4gICAgICAgICAgaHJlZiA9IGxpbmtbMV07XG4gICAgICAgICAgdGl0bGUgPSBsaW5rWzNdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpdGxlID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRpdGxlID0gY2FwWzNdID8gY2FwWzNdLnNsaWNlKDEsIC0xKSA6ICcnO1xuICAgICAgfVxuICAgICAgaHJlZiA9IGhyZWYudHJpbSgpLnJlcGxhY2UoL148KFtcXHNcXFNdKik+JC8sICckMScpO1xuICAgICAgb3V0ICs9IHRoaXMub3V0cHV0TGluayhjYXAsIHtcbiAgICAgICAgaHJlZjogSW5saW5lTGV4ZXIuZXNjYXBlcyhocmVmKSxcbiAgICAgICAgdGl0bGU6IElubGluZUxleGVyLmVzY2FwZXModGl0bGUpXG4gICAgICB9KTtcbiAgICAgIHRoaXMuaW5MaW5rID0gZmFsc2U7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyByZWZsaW5rLCBub2xpbmtcbiAgICBpZiAoKGNhcCA9IHRoaXMucnVsZXMucmVmbGluay5leGVjKHNyYykpXG4gICAgICAgIHx8IChjYXAgPSB0aGlzLnJ1bGVzLm5vbGluay5leGVjKHNyYykpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgbGluayA9IChjYXBbMl0gfHwgY2FwWzFdKS5yZXBsYWNlKC9cXHMrL2csICcgJyk7XG4gICAgICBsaW5rID0gdGhpcy5saW5rc1tsaW5rLnRvTG93ZXJDYXNlKCldO1xuICAgICAgaWYgKCFsaW5rIHx8ICFsaW5rLmhyZWYpIHtcbiAgICAgICAgb3V0ICs9IGNhcFswXS5jaGFyQXQoMCk7XG4gICAgICAgIHNyYyA9IGNhcFswXS5zdWJzdHJpbmcoMSkgKyBzcmM7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdGhpcy5pbkxpbmsgPSB0cnVlO1xuICAgICAgb3V0ICs9IHRoaXMub3V0cHV0TGluayhjYXAsIGxpbmspO1xuICAgICAgdGhpcy5pbkxpbmsgPSBmYWxzZTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHN0cm9uZ1xuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLnN0cm9uZy5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5zdHJvbmcodGhpcy5vdXRwdXQoY2FwWzRdIHx8IGNhcFszXSB8fCBjYXBbMl0gfHwgY2FwWzFdKSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBlbVxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmVtLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmVtKHRoaXMub3V0cHV0KGNhcFs2XSB8fCBjYXBbNV0gfHwgY2FwWzRdIHx8IGNhcFszXSB8fCBjYXBbMl0gfHwgY2FwWzFdKSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBjb2RlXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuY29kZS5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5jb2Rlc3Bhbihlc2NhcGUoY2FwWzJdLnRyaW0oKSwgdHJ1ZSkpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gYnJcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5ici5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5icigpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gZGVsIChnZm0pXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuZGVsLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmRlbCh0aGlzLm91dHB1dChjYXBbMV0pKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHRleHRcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy50ZXh0LmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIGlmICh0aGlzLmluUmF3QmxvY2spIHtcbiAgICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIudGV4dChjYXBbMF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIudGV4dChlc2NhcGUodGhpcy5zbWFydHlwYW50cyhjYXBbMF0pKSk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoc3JjKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luZmluaXRlIGxvb3Agb24gYnl0ZTogJyArIHNyYy5jaGFyQ29kZUF0KDApKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0O1xufTtcblxuSW5saW5lTGV4ZXIuZXNjYXBlcyA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuIHRleHQgPyB0ZXh0LnJlcGxhY2UoSW5saW5lTGV4ZXIucnVsZXMuX2VzY2FwZXMsICckMScpIDogdGV4dDtcbn1cblxuLyoqXG4gKiBDb21waWxlIExpbmtcbiAqL1xuXG5JbmxpbmVMZXhlci5wcm90b3R5cGUub3V0cHV0TGluayA9IGZ1bmN0aW9uKGNhcCwgbGluaykge1xuICB2YXIgaHJlZiA9IGxpbmsuaHJlZixcbiAgICAgIHRpdGxlID0gbGluay50aXRsZSA/IGVzY2FwZShsaW5rLnRpdGxlKSA6IG51bGw7XG5cbiAgcmV0dXJuIGNhcFswXS5jaGFyQXQoMCkgIT09ICchJ1xuICAgID8gdGhpcy5yZW5kZXJlci5saW5rKGhyZWYsIHRpdGxlLCB0aGlzLm91dHB1dChjYXBbMV0pKVxuICAgIDogdGhpcy5yZW5kZXJlci5pbWFnZShocmVmLCB0aXRsZSwgZXNjYXBlKGNhcFsxXSkpO1xufTtcblxuLyoqXG4gKiBTbWFydHlwYW50cyBUcmFuc2Zvcm1hdGlvbnNcbiAqL1xuXG5JbmxpbmVMZXhlci5wcm90b3R5cGUuc21hcnR5cGFudHMgPSBmdW5jdGlvbih0ZXh0KSB7XG4gIGlmICghdGhpcy5vcHRpb25zLnNtYXJ0eXBhbnRzKSByZXR1cm4gdGV4dDtcbiAgcmV0dXJuIHRleHRcbiAgICAvLyBlbS1kYXNoZXNcbiAgICAucmVwbGFjZSgvLS0tL2csICdcXHUyMDE0JylcbiAgICAvLyBlbi1kYXNoZXNcbiAgICAucmVwbGFjZSgvLS0vZywgJ1xcdTIwMTMnKVxuICAgIC8vIG9wZW5pbmcgc2luZ2xlc1xuICAgIC5yZXBsYWNlKC8oXnxbLVxcdTIwMTQvKFxcW3tcIlxcc10pJy9nLCAnJDFcXHUyMDE4JylcbiAgICAvLyBjbG9zaW5nIHNpbmdsZXMgJiBhcG9zdHJvcGhlc1xuICAgIC5yZXBsYWNlKC8nL2csICdcXHUyMDE5JylcbiAgICAvLyBvcGVuaW5nIGRvdWJsZXNcbiAgICAucmVwbGFjZSgvKF58Wy1cXHUyMDE0LyhcXFt7XFx1MjAxOFxcc10pXCIvZywgJyQxXFx1MjAxYycpXG4gICAgLy8gY2xvc2luZyBkb3VibGVzXG4gICAgLnJlcGxhY2UoL1wiL2csICdcXHUyMDFkJylcbiAgICAvLyBlbGxpcHNlc1xuICAgIC5yZXBsYWNlKC9cXC57M30vZywgJ1xcdTIwMjYnKTtcbn07XG5cbi8qKlxuICogTWFuZ2xlIExpbmtzXG4gKi9cblxuSW5saW5lTGV4ZXIucHJvdG90eXBlLm1hbmdsZSA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgaWYgKCF0aGlzLm9wdGlvbnMubWFuZ2xlKSByZXR1cm4gdGV4dDtcbiAgdmFyIG91dCA9ICcnLFxuICAgICAgbCA9IHRleHQubGVuZ3RoLFxuICAgICAgaSA9IDAsXG4gICAgICBjaDtcblxuICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgIGNoID0gdGV4dC5jaGFyQ29kZUF0KGkpO1xuICAgIGlmIChNYXRoLnJhbmRvbSgpID4gMC41KSB7XG4gICAgICBjaCA9ICd4JyArIGNoLnRvU3RyaW5nKDE2KTtcbiAgICB9XG4gICAgb3V0ICs9ICcmIycgKyBjaCArICc7JztcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFJlbmRlcmVyXG4gKi9cblxuZnVuY3Rpb24gUmVuZGVyZXIob3B0aW9ucykge1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IG1hcmtlZC5kZWZhdWx0cztcbn1cblxuUmVuZGVyZXIucHJvdG90eXBlLmNvZGUgPSBmdW5jdGlvbihjb2RlLCBsYW5nLCBlc2NhcGVkKSB7XG4gIGlmICh0aGlzLm9wdGlvbnMuaGlnaGxpZ2h0KSB7XG4gICAgdmFyIG91dCA9IHRoaXMub3B0aW9ucy5oaWdobGlnaHQoY29kZSwgbGFuZyk7XG4gICAgaWYgKG91dCAhPSBudWxsICYmIG91dCAhPT0gY29kZSkge1xuICAgICAgZXNjYXBlZCA9IHRydWU7XG4gICAgICBjb2RlID0gb3V0O1xuICAgIH1cbiAgfVxuXG4gIGlmICghbGFuZykge1xuICAgIHJldHVybiAnPHByZT48Y29kZT4nXG4gICAgICArIChlc2NhcGVkID8gY29kZSA6IGVzY2FwZShjb2RlLCB0cnVlKSlcbiAgICAgICsgJzwvY29kZT48L3ByZT4nO1xuICB9XG5cbiAgcmV0dXJuICc8cHJlPjxjb2RlIGNsYXNzPVwiJ1xuICAgICsgdGhpcy5vcHRpb25zLmxhbmdQcmVmaXhcbiAgICArIGVzY2FwZShsYW5nLCB0cnVlKVxuICAgICsgJ1wiPidcbiAgICArIChlc2NhcGVkID8gY29kZSA6IGVzY2FwZShjb2RlLCB0cnVlKSlcbiAgICArICc8L2NvZGU+PC9wcmU+XFxuJztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5ibG9ja3F1b3RlID0gZnVuY3Rpb24ocXVvdGUpIHtcbiAgcmV0dXJuICc8YmxvY2txdW90ZT5cXG4nICsgcXVvdGUgKyAnPC9ibG9ja3F1b3RlPlxcbic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUuaHRtbCA9IGZ1bmN0aW9uKGh0bWwpIHtcbiAgcmV0dXJuIGh0bWw7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUuaGVhZGluZyA9IGZ1bmN0aW9uKHRleHQsIGxldmVsLCByYXcpIHtcbiAgaWYgKHRoaXMub3B0aW9ucy5oZWFkZXJJZHMpIHtcbiAgICByZXR1cm4gJzxoJ1xuICAgICAgKyBsZXZlbFxuICAgICAgKyAnIGlkPVwiJ1xuICAgICAgKyB0aGlzLm9wdGlvbnMuaGVhZGVyUHJlZml4XG4gICAgICArIHJhdy50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1teXFx3XSsvZywgJy0nKVxuICAgICAgKyAnXCI+J1xuICAgICAgKyB0ZXh0XG4gICAgICArICc8L2gnXG4gICAgICArIGxldmVsXG4gICAgICArICc+XFxuJztcbiAgfVxuICAvLyBpZ25vcmUgSURzXG4gIHJldHVybiAnPGgnICsgbGV2ZWwgKyAnPicgKyB0ZXh0ICsgJzwvaCcgKyBsZXZlbCArICc+XFxuJztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5ociA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5vcHRpb25zLnhodG1sID8gJzxoci8+XFxuJyA6ICc8aHI+XFxuJztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5saXN0ID0gZnVuY3Rpb24oYm9keSwgb3JkZXJlZCwgc3RhcnQpIHtcbiAgdmFyIHR5cGUgPSBvcmRlcmVkID8gJ29sJyA6ICd1bCcsXG4gICAgICBzdGFydGF0dCA9IChvcmRlcmVkICYmIHN0YXJ0ICE9PSAxKSA/ICgnIHN0YXJ0PVwiJyArIHN0YXJ0ICsgJ1wiJykgOiAnJztcbiAgcmV0dXJuICc8JyArIHR5cGUgKyBzdGFydGF0dCArICc+XFxuJyArIGJvZHkgKyAnPC8nICsgdHlwZSArICc+XFxuJztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5saXN0aXRlbSA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuICc8bGk+JyArIHRleHQgKyAnPC9saT5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmNoZWNrYm94ID0gZnVuY3Rpb24oY2hlY2tlZCkge1xuICByZXR1cm4gJzxpbnB1dCAnXG4gICAgKyAoY2hlY2tlZCA/ICdjaGVja2VkPVwiXCIgJyA6ICcnKVxuICAgICsgJ2Rpc2FibGVkPVwiXCIgdHlwZT1cImNoZWNrYm94XCInXG4gICAgKyAodGhpcy5vcHRpb25zLnhodG1sID8gJyAvJyA6ICcnKVxuICAgICsgJz4gJztcbn1cblxuUmVuZGVyZXIucHJvdG90eXBlLnBhcmFncmFwaCA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuICc8cD4nICsgdGV4dCArICc8L3A+XFxuJztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS50YWJsZSA9IGZ1bmN0aW9uKGhlYWRlciwgYm9keSkge1xuICBpZiAoYm9keSkgYm9keSA9ICc8dGJvZHk+JyArIGJvZHkgKyAnPC90Ym9keT4nO1xuXG4gIHJldHVybiAnPHRhYmxlPlxcbidcbiAgICArICc8dGhlYWQ+XFxuJ1xuICAgICsgaGVhZGVyXG4gICAgKyAnPC90aGVhZD5cXG4nXG4gICAgKyBib2R5XG4gICAgKyAnPC90YWJsZT5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLnRhYmxlcm93ID0gZnVuY3Rpb24oY29udGVudCkge1xuICByZXR1cm4gJzx0cj5cXG4nICsgY29udGVudCArICc8L3RyPlxcbic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUudGFibGVjZWxsID0gZnVuY3Rpb24oY29udGVudCwgZmxhZ3MpIHtcbiAgdmFyIHR5cGUgPSBmbGFncy5oZWFkZXIgPyAndGgnIDogJ3RkJztcbiAgdmFyIHRhZyA9IGZsYWdzLmFsaWduXG4gICAgPyAnPCcgKyB0eXBlICsgJyBhbGlnbj1cIicgKyBmbGFncy5hbGlnbiArICdcIj4nXG4gICAgOiAnPCcgKyB0eXBlICsgJz4nO1xuICByZXR1cm4gdGFnICsgY29udGVudCArICc8LycgKyB0eXBlICsgJz5cXG4nO1xufTtcblxuLy8gc3BhbiBsZXZlbCByZW5kZXJlclxuUmVuZGVyZXIucHJvdG90eXBlLnN0cm9uZyA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuICc8c3Ryb25nPicgKyB0ZXh0ICsgJzwvc3Ryb25nPic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUuZW0gPSBmdW5jdGlvbih0ZXh0KSB7XG4gIHJldHVybiAnPGVtPicgKyB0ZXh0ICsgJzwvZW0+Jztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5jb2Rlc3BhbiA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuICc8Y29kZT4nICsgdGV4dCArICc8L2NvZGU+Jztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5iciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5vcHRpb25zLnhodG1sID8gJzxici8+JyA6ICc8YnI+Jztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5kZWwgPSBmdW5jdGlvbih0ZXh0KSB7XG4gIHJldHVybiAnPGRlbD4nICsgdGV4dCArICc8L2RlbD4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmxpbmsgPSBmdW5jdGlvbihocmVmLCB0aXRsZSwgdGV4dCkge1xuICBpZiAodGhpcy5vcHRpb25zLnNhbml0aXplKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBwcm90ID0gZGVjb2RlVVJJQ29tcG9uZW50KHVuZXNjYXBlKGhyZWYpKVxuICAgICAgICAucmVwbGFjZSgvW15cXHc6XS9nLCAnJylcbiAgICAgICAgLnRvTG93ZXJDYXNlKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuICAgIGlmIChwcm90LmluZGV4T2YoJ2phdmFzY3JpcHQ6JykgPT09IDAgfHwgcHJvdC5pbmRleE9mKCd2YnNjcmlwdDonKSA9PT0gMCB8fCBwcm90LmluZGV4T2YoJ2RhdGE6JykgPT09IDApIHtcbiAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cbiAgfVxuICBpZiAodGhpcy5vcHRpb25zLmJhc2VVcmwgJiYgIW9yaWdpbkluZGVwZW5kZW50VXJsLnRlc3QoaHJlZikpIHtcbiAgICBocmVmID0gcmVzb2x2ZVVybCh0aGlzLm9wdGlvbnMuYmFzZVVybCwgaHJlZik7XG4gIH1cbiAgdHJ5IHtcbiAgICBocmVmID0gZW5jb2RlVVJJKGhyZWYpLnJlcGxhY2UoLyUyNS9nLCAnJScpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cbiAgdmFyIG91dCA9ICc8YSBocmVmPVwiJyArIGVzY2FwZShocmVmKSArICdcIic7XG4gIGlmICh0aXRsZSkge1xuICAgIG91dCArPSAnIHRpdGxlPVwiJyArIHRpdGxlICsgJ1wiJztcbiAgfVxuICBvdXQgKz0gJz4nICsgdGV4dCArICc8L2E+JztcbiAgcmV0dXJuIG91dDtcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5pbWFnZSA9IGZ1bmN0aW9uKGhyZWYsIHRpdGxlLCB0ZXh0KSB7XG4gIGlmICh0aGlzLm9wdGlvbnMuYmFzZVVybCAmJiAhb3JpZ2luSW5kZXBlbmRlbnRVcmwudGVzdChocmVmKSkge1xuICAgIGhyZWYgPSByZXNvbHZlVXJsKHRoaXMub3B0aW9ucy5iYXNlVXJsLCBocmVmKTtcbiAgfVxuICB2YXIgb3V0ID0gJzxpbWcgc3JjPVwiJyArIGhyZWYgKyAnXCIgYWx0PVwiJyArIHRleHQgKyAnXCInO1xuICBpZiAodGl0bGUpIHtcbiAgICBvdXQgKz0gJyB0aXRsZT1cIicgKyB0aXRsZSArICdcIic7XG4gIH1cbiAgb3V0ICs9IHRoaXMub3B0aW9ucy54aHRtbCA/ICcvPicgOiAnPic7XG4gIHJldHVybiBvdXQ7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUudGV4dCA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuIHRleHQ7XG59O1xuXG4vKipcbiAqIFRleHRSZW5kZXJlclxuICogcmV0dXJucyBvbmx5IHRoZSB0ZXh0dWFsIHBhcnQgb2YgdGhlIHRva2VuXG4gKi9cblxuZnVuY3Rpb24gVGV4dFJlbmRlcmVyKCkge31cblxuLy8gbm8gbmVlZCBmb3IgYmxvY2sgbGV2ZWwgcmVuZGVyZXJzXG5cblRleHRSZW5kZXJlci5wcm90b3R5cGUuc3Ryb25nID1cblRleHRSZW5kZXJlci5wcm90b3R5cGUuZW0gPVxuVGV4dFJlbmRlcmVyLnByb3RvdHlwZS5jb2Rlc3BhbiA9XG5UZXh0UmVuZGVyZXIucHJvdG90eXBlLmRlbCA9XG5UZXh0UmVuZGVyZXIucHJvdG90eXBlLnRleHQgPSBmdW5jdGlvbiAodGV4dCkge1xuICByZXR1cm4gdGV4dDtcbn1cblxuVGV4dFJlbmRlcmVyLnByb3RvdHlwZS5saW5rID1cblRleHRSZW5kZXJlci5wcm90b3R5cGUuaW1hZ2UgPSBmdW5jdGlvbihocmVmLCB0aXRsZSwgdGV4dCkge1xuICByZXR1cm4gJycgKyB0ZXh0O1xufVxuXG5UZXh0UmVuZGVyZXIucHJvdG90eXBlLmJyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBQYXJzaW5nICYgQ29tcGlsaW5nXG4gKi9cblxuZnVuY3Rpb24gUGFyc2VyKG9wdGlvbnMpIHtcbiAgdGhpcy50b2tlbnMgPSBbXTtcbiAgdGhpcy50b2tlbiA9IG51bGw7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwgbWFya2VkLmRlZmF1bHRzO1xuICB0aGlzLm9wdGlvbnMucmVuZGVyZXIgPSB0aGlzLm9wdGlvbnMucmVuZGVyZXIgfHwgbmV3IFJlbmRlcmVyKCk7XG4gIHRoaXMucmVuZGVyZXIgPSB0aGlzLm9wdGlvbnMucmVuZGVyZXI7XG4gIHRoaXMucmVuZGVyZXIub3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbn1cblxuLyoqXG4gKiBTdGF0aWMgUGFyc2UgTWV0aG9kXG4gKi9cblxuUGFyc2VyLnBhcnNlID0gZnVuY3Rpb24oc3JjLCBvcHRpb25zKSB7XG4gIHZhciBwYXJzZXIgPSBuZXcgUGFyc2VyKG9wdGlvbnMpO1xuICByZXR1cm4gcGFyc2VyLnBhcnNlKHNyYyk7XG59O1xuXG4vKipcbiAqIFBhcnNlIExvb3BcbiAqL1xuXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24oc3JjKSB7XG4gIHRoaXMuaW5saW5lID0gbmV3IElubGluZUxleGVyKHNyYy5saW5rcywgdGhpcy5vcHRpb25zKTtcbiAgLy8gdXNlIGFuIElubGluZUxleGVyIHdpdGggYSBUZXh0UmVuZGVyZXIgdG8gZXh0cmFjdCBwdXJlIHRleHRcbiAgdGhpcy5pbmxpbmVUZXh0ID0gbmV3IElubGluZUxleGVyKFxuICAgIHNyYy5saW5rcyxcbiAgICBtZXJnZSh7fSwgdGhpcy5vcHRpb25zLCB7cmVuZGVyZXI6IG5ldyBUZXh0UmVuZGVyZXIoKX0pXG4gICk7XG4gIHRoaXMudG9rZW5zID0gc3JjLnJldmVyc2UoKTtcblxuICB2YXIgb3V0ID0gJyc7XG4gIHdoaWxlICh0aGlzLm5leHQoKSkge1xuICAgIG91dCArPSB0aGlzLnRvaygpO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogTmV4dCBUb2tlblxuICovXG5cblBhcnNlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy50b2tlbiA9IHRoaXMudG9rZW5zLnBvcCgpO1xufTtcblxuLyoqXG4gKiBQcmV2aWV3IE5leHQgVG9rZW5cbiAqL1xuXG5QYXJzZXIucHJvdG90eXBlLnBlZWsgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMudG9rZW5zW3RoaXMudG9rZW5zLmxlbmd0aCAtIDFdIHx8IDA7XG59O1xuXG4vKipcbiAqIFBhcnNlIFRleHQgVG9rZW5zXG4gKi9cblxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZVRleHQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGJvZHkgPSB0aGlzLnRva2VuLnRleHQ7XG5cbiAgd2hpbGUgKHRoaXMucGVlaygpLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgIGJvZHkgKz0gJ1xcbicgKyB0aGlzLm5leHQoKS50ZXh0O1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuaW5saW5lLm91dHB1dChib2R5KTtcbn07XG5cbi8qKlxuICogUGFyc2UgQ3VycmVudCBUb2tlblxuICovXG5cblBhcnNlci5wcm90b3R5cGUudG9rID0gZnVuY3Rpb24oKSB7XG4gIHN3aXRjaCAodGhpcy50b2tlbi50eXBlKSB7XG4gICAgY2FzZSAnc3BhY2UnOiB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGNhc2UgJ2hyJzoge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuaHIoKTtcbiAgICB9XG4gICAgY2FzZSAnaGVhZGluZyc6IHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmhlYWRpbmcoXG4gICAgICAgIHRoaXMuaW5saW5lLm91dHB1dCh0aGlzLnRva2VuLnRleHQpLFxuICAgICAgICB0aGlzLnRva2VuLmRlcHRoLFxuICAgICAgICB1bmVzY2FwZSh0aGlzLmlubGluZVRleHQub3V0cHV0KHRoaXMudG9rZW4udGV4dCkpKTtcbiAgICB9XG4gICAgY2FzZSAnY29kZSc6IHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmNvZGUodGhpcy50b2tlbi50ZXh0LFxuICAgICAgICB0aGlzLnRva2VuLmxhbmcsXG4gICAgICAgIHRoaXMudG9rZW4uZXNjYXBlZCk7XG4gICAgfVxuICAgIGNhc2UgJ3RhYmxlJzoge1xuICAgICAgdmFyIGhlYWRlciA9ICcnLFxuICAgICAgICAgIGJvZHkgPSAnJyxcbiAgICAgICAgICBpLFxuICAgICAgICAgIHJvdyxcbiAgICAgICAgICBjZWxsLFxuICAgICAgICAgIGo7XG5cbiAgICAgIC8vIGhlYWRlclxuICAgICAgY2VsbCA9ICcnO1xuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMudG9rZW4uaGVhZGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNlbGwgKz0gdGhpcy5yZW5kZXJlci50YWJsZWNlbGwoXG4gICAgICAgICAgdGhpcy5pbmxpbmUub3V0cHV0KHRoaXMudG9rZW4uaGVhZGVyW2ldKSxcbiAgICAgICAgICB7IGhlYWRlcjogdHJ1ZSwgYWxpZ246IHRoaXMudG9rZW4uYWxpZ25baV0gfVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaGVhZGVyICs9IHRoaXMucmVuZGVyZXIudGFibGVyb3coY2VsbCk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLnRva2VuLmNlbGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJvdyA9IHRoaXMudG9rZW4uY2VsbHNbaV07XG5cbiAgICAgICAgY2VsbCA9ICcnO1xuICAgICAgICBmb3IgKGogPSAwOyBqIDwgcm93Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgY2VsbCArPSB0aGlzLnJlbmRlcmVyLnRhYmxlY2VsbChcbiAgICAgICAgICAgIHRoaXMuaW5saW5lLm91dHB1dChyb3dbal0pLFxuICAgICAgICAgICAgeyBoZWFkZXI6IGZhbHNlLCBhbGlnbjogdGhpcy50b2tlbi5hbGlnbltqXSB9XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJvZHkgKz0gdGhpcy5yZW5kZXJlci50YWJsZXJvdyhjZWxsKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLnRhYmxlKGhlYWRlciwgYm9keSk7XG4gICAgfVxuICAgIGNhc2UgJ2Jsb2NrcXVvdGVfc3RhcnQnOiB7XG4gICAgICBib2R5ID0gJyc7XG5cbiAgICAgIHdoaWxlICh0aGlzLm5leHQoKS50eXBlICE9PSAnYmxvY2txdW90ZV9lbmQnKSB7XG4gICAgICAgIGJvZHkgKz0gdGhpcy50b2soKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuYmxvY2txdW90ZShib2R5KTtcbiAgICB9XG4gICAgY2FzZSAnbGlzdF9zdGFydCc6IHtcbiAgICAgIGJvZHkgPSAnJztcbiAgICAgIHZhciBvcmRlcmVkID0gdGhpcy50b2tlbi5vcmRlcmVkLFxuICAgICAgICAgIHN0YXJ0ID0gdGhpcy50b2tlbi5zdGFydDtcblxuICAgICAgd2hpbGUgKHRoaXMubmV4dCgpLnR5cGUgIT09ICdsaXN0X2VuZCcpIHtcbiAgICAgICAgYm9keSArPSB0aGlzLnRvaygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5saXN0KGJvZHksIG9yZGVyZWQsIHN0YXJ0KTtcbiAgICB9XG4gICAgY2FzZSAnbGlzdF9pdGVtX3N0YXJ0Jzoge1xuICAgICAgYm9keSA9ICcnO1xuICAgICAgdmFyIGxvb3NlID0gdGhpcy50b2tlbi5sb29zZTtcblxuICAgICAgaWYgKHRoaXMudG9rZW4udGFzaykge1xuICAgICAgICBib2R5ICs9IHRoaXMucmVuZGVyZXIuY2hlY2tib3godGhpcy50b2tlbi5jaGVja2VkKTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKHRoaXMubmV4dCgpLnR5cGUgIT09ICdsaXN0X2l0ZW1fZW5kJykge1xuICAgICAgICBib2R5ICs9ICFsb29zZSAmJiB0aGlzLnRva2VuLnR5cGUgPT09ICd0ZXh0J1xuICAgICAgICAgID8gdGhpcy5wYXJzZVRleHQoKVxuICAgICAgICAgIDogdGhpcy50b2soKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIubGlzdGl0ZW0oYm9keSk7XG4gICAgfVxuICAgIGNhc2UgJ2h0bWwnOiB7XG4gICAgICAvLyBUT0RPIHBhcnNlIGlubGluZSBjb250ZW50IGlmIHBhcmFtZXRlciBtYXJrZG93bj0xXG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5odG1sKHRoaXMudG9rZW4udGV4dCk7XG4gICAgfVxuICAgIGNhc2UgJ3BhcmFncmFwaCc6IHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLnBhcmFncmFwaCh0aGlzLmlubGluZS5vdXRwdXQodGhpcy50b2tlbi50ZXh0KSk7XG4gICAgfVxuICAgIGNhc2UgJ3RleHQnOiB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5wYXJhZ3JhcGgodGhpcy5wYXJzZVRleHQoKSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEhlbHBlcnNcbiAqL1xuXG5mdW5jdGlvbiBlc2NhcGUoaHRtbCwgZW5jb2RlKSB7XG4gIGlmIChlbmNvZGUpIHtcbiAgICBpZiAoZXNjYXBlLmVzY2FwZVRlc3QudGVzdChodG1sKSkge1xuICAgICAgcmV0dXJuIGh0bWwucmVwbGFjZShlc2NhcGUuZXNjYXBlUmVwbGFjZSwgZnVuY3Rpb24gKGNoKSB7IHJldHVybiBlc2NhcGUucmVwbGFjZW1lbnRzW2NoXSB9KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGVzY2FwZS5lc2NhcGVUZXN0Tm9FbmNvZGUudGVzdChodG1sKSkge1xuICAgICAgcmV0dXJuIGh0bWwucmVwbGFjZShlc2NhcGUuZXNjYXBlUmVwbGFjZU5vRW5jb2RlLCBmdW5jdGlvbiAoY2gpIHsgcmV0dXJuIGVzY2FwZS5yZXBsYWNlbWVudHNbY2hdIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBodG1sO1xufVxuXG5lc2NhcGUuZXNjYXBlVGVzdCA9IC9bJjw+XCInXS87XG5lc2NhcGUuZXNjYXBlUmVwbGFjZSA9IC9bJjw+XCInXS9nO1xuZXNjYXBlLnJlcGxhY2VtZW50cyA9IHtcbiAgJyYnOiAnJmFtcDsnLFxuICAnPCc6ICcmbHQ7JyxcbiAgJz4nOiAnJmd0OycsXG4gICdcIic6ICcmcXVvdDsnLFxuICBcIidcIjogJyYjMzk7J1xufTtcblxuZXNjYXBlLmVzY2FwZVRlc3ROb0VuY29kZSA9IC9bPD5cIiddfCYoPyEjP1xcdys7KS87XG5lc2NhcGUuZXNjYXBlUmVwbGFjZU5vRW5jb2RlID0gL1s8PlwiJ118Jig/ISM/XFx3KzspL2c7XG5cbmZ1bmN0aW9uIHVuZXNjYXBlKGh0bWwpIHtcbiAgLy8gZXhwbGljaXRseSBtYXRjaCBkZWNpbWFsLCBoZXgsIGFuZCBuYW1lZCBIVE1MIGVudGl0aWVzXG4gIHJldHVybiBodG1sLnJlcGxhY2UoLyYoIyg/OlxcZCspfCg/OiN4WzAtOUEtRmEtZl0rKXwoPzpcXHcrKSk7Py9pZywgZnVuY3Rpb24oXywgbikge1xuICAgIG4gPSBuLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKG4gPT09ICdjb2xvbicpIHJldHVybiAnOic7XG4gICAgaWYgKG4uY2hhckF0KDApID09PSAnIycpIHtcbiAgICAgIHJldHVybiBuLmNoYXJBdCgxKSA9PT0gJ3gnXG4gICAgICAgID8gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChuLnN1YnN0cmluZygyKSwgMTYpKVxuICAgICAgICA6IFN0cmluZy5mcm9tQ2hhckNvZGUoK24uc3Vic3RyaW5nKDEpKTtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZWRpdChyZWdleCwgb3B0KSB7XG4gIHJlZ2V4ID0gcmVnZXguc291cmNlIHx8IHJlZ2V4O1xuICBvcHQgPSBvcHQgfHwgJyc7XG4gIHJldHVybiB7XG4gICAgcmVwbGFjZTogZnVuY3Rpb24obmFtZSwgdmFsKSB7XG4gICAgICB2YWwgPSB2YWwuc291cmNlIHx8IHZhbDtcbiAgICAgIHZhbCA9IHZhbC5yZXBsYWNlKC8oXnxbXlxcW10pXFxeL2csICckMScpO1xuICAgICAgcmVnZXggPSByZWdleC5yZXBsYWNlKG5hbWUsIHZhbCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGdldFJlZ2V4OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgUmVnRXhwKHJlZ2V4LCBvcHQpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVVybChiYXNlLCBocmVmKSB7XG4gIGlmICghYmFzZVVybHNbJyAnICsgYmFzZV0pIHtcbiAgICAvLyB3ZSBjYW4gaWdub3JlIGV2ZXJ5dGhpbmcgaW4gYmFzZSBhZnRlciB0aGUgbGFzdCBzbGFzaCBvZiBpdHMgcGF0aCBjb21wb25lbnQsXG4gICAgLy8gYnV0IHdlIG1pZ2h0IG5lZWQgdG8gYWRkIF90aGF0X1xuICAgIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tM1xuICAgIGlmICgvXlteOl0rOlxcLypbXi9dKiQvLnRlc3QoYmFzZSkpIHtcbiAgICAgIGJhc2VVcmxzWycgJyArIGJhc2VdID0gYmFzZSArICcvJztcbiAgICB9IGVsc2Uge1xuICAgICAgYmFzZVVybHNbJyAnICsgYmFzZV0gPSBydHJpbShiYXNlLCAnLycsIHRydWUpO1xuICAgIH1cbiAgfVxuICBiYXNlID0gYmFzZVVybHNbJyAnICsgYmFzZV07XG5cbiAgaWYgKGhyZWYuc2xpY2UoMCwgMikgPT09ICcvLycpIHtcbiAgICByZXR1cm4gYmFzZS5yZXBsYWNlKC86W1xcc1xcU10qLywgJzonKSArIGhyZWY7XG4gIH0gZWxzZSBpZiAoaHJlZi5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgIHJldHVybiBiYXNlLnJlcGxhY2UoLyg6XFwvKlteL10qKVtcXHNcXFNdKi8sICckMScpICsgaHJlZjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZSArIGhyZWY7XG4gIH1cbn1cbnZhciBiYXNlVXJscyA9IHt9O1xudmFyIG9yaWdpbkluZGVwZW5kZW50VXJsID0gL14kfF5bYS16XVthLXowLTkrLi1dKjp8Xls/I10vaTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5ub29wLmV4ZWMgPSBub29wO1xuXG5mdW5jdGlvbiBtZXJnZShvYmopIHtcbiAgdmFyIGkgPSAxLFxuICAgICAgdGFyZ2V0LFxuICAgICAga2V5O1xuXG4gIGZvciAoOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdGFyZ2V0ID0gYXJndW1lbnRzW2ldO1xuICAgIGZvciAoa2V5IGluIHRhcmdldCkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSkpIHtcbiAgICAgICAgb2JqW2tleV0gPSB0YXJnZXRba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBzcGxpdENlbGxzKHRhYmxlUm93LCBjb3VudCkge1xuICAvLyBlbnN1cmUgdGhhdCBldmVyeSBjZWxsLWRlbGltaXRpbmcgcGlwZSBoYXMgYSBzcGFjZVxuICAvLyBiZWZvcmUgaXQgdG8gZGlzdGluZ3Vpc2ggaXQgZnJvbSBhbiBlc2NhcGVkIHBpcGVcbiAgdmFyIHJvdyA9IHRhYmxlUm93LnJlcGxhY2UoL1xcfC9nLCBmdW5jdGlvbiAobWF0Y2gsIG9mZnNldCwgc3RyKSB7XG4gICAgICAgIHZhciBlc2NhcGVkID0gZmFsc2UsXG4gICAgICAgICAgICBjdXJyID0gb2Zmc2V0O1xuICAgICAgICB3aGlsZSAoLS1jdXJyID49IDAgJiYgc3RyW2N1cnJdID09PSAnXFxcXCcpIGVzY2FwZWQgPSAhZXNjYXBlZDtcbiAgICAgICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgICAgICAvLyBvZGQgbnVtYmVyIG9mIHNsYXNoZXMgbWVhbnMgfCBpcyBlc2NhcGVkXG4gICAgICAgICAgLy8gc28gd2UgbGVhdmUgaXQgYWxvbmVcbiAgICAgICAgICByZXR1cm4gJ3wnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGFkZCBzcGFjZSBiZWZvcmUgdW5lc2NhcGVkIHxcbiAgICAgICAgICByZXR1cm4gJyB8JztcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgICBjZWxscyA9IHJvdy5zcGxpdCgvIFxcfC8pLFxuICAgICAgaSA9IDA7XG5cbiAgaWYgKGNlbGxzLmxlbmd0aCA+IGNvdW50KSB7XG4gICAgY2VsbHMuc3BsaWNlKGNvdW50KTtcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoY2VsbHMubGVuZ3RoIDwgY291bnQpIGNlbGxzLnB1c2goJycpO1xuICB9XG5cbiAgZm9yICg7IGkgPCBjZWxscy5sZW5ndGg7IGkrKykge1xuICAgIC8vIGxlYWRpbmcgb3IgdHJhaWxpbmcgd2hpdGVzcGFjZSBpcyBpZ25vcmVkIHBlciB0aGUgZ2ZtIHNwZWNcbiAgICBjZWxsc1tpXSA9IGNlbGxzW2ldLnRyaW0oKS5yZXBsYWNlKC9cXFxcXFx8L2csICd8Jyk7XG4gIH1cbiAgcmV0dXJuIGNlbGxzO1xufVxuXG4vLyBSZW1vdmUgdHJhaWxpbmcgJ2Mncy4gRXF1aXZhbGVudCB0byBzdHIucmVwbGFjZSgvYyokLywgJycpLlxuLy8gL2MqJC8gaXMgdnVsbmVyYWJsZSB0byBSRURPUy5cbi8vIGludmVydDogUmVtb3ZlIHN1ZmZpeCBvZiBub24tYyBjaGFycyBpbnN0ZWFkLiBEZWZhdWx0IGZhbHNleS5cbmZ1bmN0aW9uIHJ0cmltKHN0ciwgYywgaW52ZXJ0KSB7XG4gIGlmIChzdHIubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgLy8gTGVuZ3RoIG9mIHN1ZmZpeCBtYXRjaGluZyB0aGUgaW52ZXJ0IGNvbmRpdGlvbi5cbiAgdmFyIHN1ZmZMZW4gPSAwO1xuXG4gIC8vIFN0ZXAgbGVmdCB1bnRpbCB3ZSBmYWlsIHRvIG1hdGNoIHRoZSBpbnZlcnQgY29uZGl0aW9uLlxuICB3aGlsZSAoc3VmZkxlbiA8IHN0ci5sZW5ndGgpIHtcbiAgICB2YXIgY3VyckNoYXIgPSBzdHIuY2hhckF0KHN0ci5sZW5ndGggLSBzdWZmTGVuIC0gMSk7XG4gICAgaWYgKGN1cnJDaGFyID09PSBjICYmICFpbnZlcnQpIHtcbiAgICAgIHN1ZmZMZW4rKztcbiAgICB9IGVsc2UgaWYgKGN1cnJDaGFyICE9PSBjICYmIGludmVydCkge1xuICAgICAgc3VmZkxlbisrO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyLnN1YnN0cigwLCBzdHIubGVuZ3RoIC0gc3VmZkxlbik7XG59XG5cbi8qKlxuICogTWFya2VkXG4gKi9cblxuZnVuY3Rpb24gbWFya2VkKHNyYywgb3B0LCBjYWxsYmFjaykge1xuICAvLyB0aHJvdyBlcnJvciBpbiBjYXNlIG9mIG5vbiBzdHJpbmcgaW5wdXRcbiAgaWYgKHR5cGVvZiBzcmMgPT09ICd1bmRlZmluZWQnIHx8IHNyYyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignbWFya2VkKCk6IGlucHV0IHBhcmFtZXRlciBpcyB1bmRlZmluZWQgb3IgbnVsbCcpO1xuICB9XG4gIGlmICh0eXBlb2Ygc3JjICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignbWFya2VkKCk6IGlucHV0IHBhcmFtZXRlciBpcyBvZiB0eXBlICdcbiAgICAgICsgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHNyYykgKyAnLCBzdHJpbmcgZXhwZWN0ZWQnKTtcbiAgfVxuXG4gIGlmIChjYWxsYmFjayB8fCB0eXBlb2Ygb3B0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2sgPSBvcHQ7XG4gICAgICBvcHQgPSBudWxsO1xuICAgIH1cblxuICAgIG9wdCA9IG1lcmdlKHt9LCBtYXJrZWQuZGVmYXVsdHMsIG9wdCB8fCB7fSk7XG5cbiAgICB2YXIgaGlnaGxpZ2h0ID0gb3B0LmhpZ2hsaWdodCxcbiAgICAgICAgdG9rZW5zLFxuICAgICAgICBwZW5kaW5nLFxuICAgICAgICBpID0gMDtcblxuICAgIHRyeSB7XG4gICAgICB0b2tlbnMgPSBMZXhlci5sZXgoc3JjLCBvcHQpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKGUpO1xuICAgIH1cblxuICAgIHBlbmRpbmcgPSB0b2tlbnMubGVuZ3RoO1xuXG4gICAgdmFyIGRvbmUgPSBmdW5jdGlvbihlcnIpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgb3B0LmhpZ2hsaWdodCA9IGhpZ2hsaWdodDtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICB9XG5cbiAgICAgIHZhciBvdXQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIG91dCA9IFBhcnNlci5wYXJzZSh0b2tlbnMsIG9wdCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGVyciA9IGU7XG4gICAgICB9XG5cbiAgICAgIG9wdC5oaWdobGlnaHQgPSBoaWdobGlnaHQ7XG5cbiAgICAgIHJldHVybiBlcnJcbiAgICAgICAgPyBjYWxsYmFjayhlcnIpXG4gICAgICAgIDogY2FsbGJhY2sobnVsbCwgb3V0KTtcbiAgICB9O1xuXG4gICAgaWYgKCFoaWdobGlnaHQgfHwgaGlnaGxpZ2h0Lmxlbmd0aCA8IDMpIHtcbiAgICAgIHJldHVybiBkb25lKCk7XG4gICAgfVxuXG4gICAgZGVsZXRlIG9wdC5oaWdobGlnaHQ7XG5cbiAgICBpZiAoIXBlbmRpbmcpIHJldHVybiBkb25lKCk7XG5cbiAgICBmb3IgKDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgKGZ1bmN0aW9uKHRva2VuKSB7XG4gICAgICAgIGlmICh0b2tlbi50eXBlICE9PSAnY29kZScpIHtcbiAgICAgICAgICByZXR1cm4gLS1wZW5kaW5nIHx8IGRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGlnaGxpZ2h0KHRva2VuLnRleHQsIHRva2VuLmxhbmcsIGZ1bmN0aW9uKGVyciwgY29kZSkge1xuICAgICAgICAgIGlmIChlcnIpIHJldHVybiBkb25lKGVycik7XG4gICAgICAgICAgaWYgKGNvZGUgPT0gbnVsbCB8fCBjb2RlID09PSB0b2tlbi50ZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gLS1wZW5kaW5nIHx8IGRvbmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdG9rZW4udGV4dCA9IGNvZGU7XG4gICAgICAgICAgdG9rZW4uZXNjYXBlZCA9IHRydWU7XG4gICAgICAgICAgLS1wZW5kaW5nIHx8IGRvbmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSh0b2tlbnNbaV0pO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuICB0cnkge1xuICAgIGlmIChvcHQpIG9wdCA9IG1lcmdlKHt9LCBtYXJrZWQuZGVmYXVsdHMsIG9wdCk7XG4gICAgcmV0dXJuIFBhcnNlci5wYXJzZShMZXhlci5sZXgoc3JjLCBvcHQpLCBvcHQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgZS5tZXNzYWdlICs9ICdcXG5QbGVhc2UgcmVwb3J0IHRoaXMgdG8gaHR0cHM6Ly9naXRodWIuY29tL21hcmtlZGpzL21hcmtlZC4nO1xuICAgIGlmICgob3B0IHx8IG1hcmtlZC5kZWZhdWx0cykuc2lsZW50KSB7XG4gICAgICByZXR1cm4gJzxwPkFuIGVycm9yIG9jY3VycmVkOjwvcD48cHJlPidcbiAgICAgICAgKyBlc2NhcGUoZS5tZXNzYWdlICsgJycsIHRydWUpXG4gICAgICAgICsgJzwvcHJlPic7XG4gICAgfVxuICAgIHRocm93IGU7XG4gIH1cbn1cblxuLyoqXG4gKiBPcHRpb25zXG4gKi9cblxubWFya2VkLm9wdGlvbnMgPVxubWFya2VkLnNldE9wdGlvbnMgPSBmdW5jdGlvbihvcHQpIHtcbiAgbWVyZ2UobWFya2VkLmRlZmF1bHRzLCBvcHQpO1xuICByZXR1cm4gbWFya2VkO1xufTtcblxubWFya2VkLmdldERlZmF1bHRzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIGJhc2VVcmw6IG51bGwsXG4gICAgYnJlYWtzOiBmYWxzZSxcbiAgICBnZm06IHRydWUsXG4gICAgaGVhZGVySWRzOiB0cnVlLFxuICAgIGhlYWRlclByZWZpeDogJycsXG4gICAgaGlnaGxpZ2h0OiBudWxsLFxuICAgIGxhbmdQcmVmaXg6ICdsYW5ndWFnZS0nLFxuICAgIG1hbmdsZTogdHJ1ZSxcbiAgICBwZWRhbnRpYzogZmFsc2UsXG4gICAgcmVuZGVyZXI6IG5ldyBSZW5kZXJlcigpLFxuICAgIHNhbml0aXplOiBmYWxzZSxcbiAgICBzYW5pdGl6ZXI6IG51bGwsXG4gICAgc2lsZW50OiBmYWxzZSxcbiAgICBzbWFydExpc3RzOiBmYWxzZSxcbiAgICBzbWFydHlwYW50czogZmFsc2UsXG4gICAgdGFibGVzOiB0cnVlLFxuICAgIHhodG1sOiBmYWxzZVxuICB9O1xufVxuXG5tYXJrZWQuZGVmYXVsdHMgPSBtYXJrZWQuZ2V0RGVmYXVsdHMoKTtcblxuLyoqXG4gKiBFeHBvc2VcbiAqL1xuXG5tYXJrZWQuUGFyc2VyID0gUGFyc2VyO1xubWFya2VkLnBhcnNlciA9IFBhcnNlci5wYXJzZTtcblxubWFya2VkLlJlbmRlcmVyID0gUmVuZGVyZXI7XG5tYXJrZWQuVGV4dFJlbmRlcmVyID0gVGV4dFJlbmRlcmVyO1xuXG5tYXJrZWQuTGV4ZXIgPSBMZXhlcjtcbm1hcmtlZC5sZXhlciA9IExleGVyLmxleDtcblxubWFya2VkLklubGluZUxleGVyID0gSW5saW5lTGV4ZXI7XG5tYXJrZWQuaW5saW5lTGV4ZXIgPSBJbmxpbmVMZXhlci5vdXRwdXQ7XG5cbm1hcmtlZC5wYXJzZSA9IG1hcmtlZDtcblxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICBtb2R1bGUuZXhwb3J0cyA9IG1hcmtlZDtcbn0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIG1hcmtlZDsgfSk7XG59IGVsc2Uge1xuICByb290Lm1hcmtlZCA9IG1hcmtlZDtcbn1cbn0pKHRoaXMgfHwgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsKSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGhsanMpIHtcbiAgdmFyIElERU5UX1JFID0gJ1tBLVphLXokX11bMC05QS1aYS16JF9dKic7XG4gIHZhciBLRVlXT1JEUyA9IHtcbiAgICBrZXl3b3JkOlxuICAgICAgJ2luIG9mIGlmIGZvciB3aGlsZSBmaW5hbGx5IHZhciBuZXcgZnVuY3Rpb24gZG8gcmV0dXJuIHZvaWQgZWxzZSBicmVhayBjYXRjaCAnICtcbiAgICAgICdpbnN0YW5jZW9mIHdpdGggdGhyb3cgY2FzZSBkZWZhdWx0IHRyeSB0aGlzIHN3aXRjaCBjb250aW51ZSB0eXBlb2YgZGVsZXRlICcgK1xuICAgICAgJ2xldCB5aWVsZCBjb25zdCBleHBvcnQgc3VwZXIgZGVidWdnZXIgYXMgYXN5bmMgYXdhaXQgc3RhdGljICcgK1xuICAgICAgLy8gRUNNQVNjcmlwdCA2IG1vZHVsZXMgaW1wb3J0XG4gICAgICAnaW1wb3J0IGZyb20gYXMnXG4gICAgLFxuICAgIGxpdGVyYWw6XG4gICAgICAndHJ1ZSBmYWxzZSBudWxsIHVuZGVmaW5lZCBOYU4gSW5maW5pdHknLFxuICAgIGJ1aWx0X2luOlxuICAgICAgJ2V2YWwgaXNGaW5pdGUgaXNOYU4gcGFyc2VGbG9hdCBwYXJzZUludCBkZWNvZGVVUkkgZGVjb2RlVVJJQ29tcG9uZW50ICcgK1xuICAgICAgJ2VuY29kZVVSSSBlbmNvZGVVUklDb21wb25lbnQgZXNjYXBlIHVuZXNjYXBlIE9iamVjdCBGdW5jdGlvbiBCb29sZWFuIEVycm9yICcgK1xuICAgICAgJ0V2YWxFcnJvciBJbnRlcm5hbEVycm9yIFJhbmdlRXJyb3IgUmVmZXJlbmNlRXJyb3IgU3RvcEl0ZXJhdGlvbiBTeW50YXhFcnJvciAnICtcbiAgICAgICdUeXBlRXJyb3IgVVJJRXJyb3IgTnVtYmVyIE1hdGggRGF0ZSBTdHJpbmcgUmVnRXhwIEFycmF5IEZsb2F0MzJBcnJheSAnICtcbiAgICAgICdGbG9hdDY0QXJyYXkgSW50MTZBcnJheSBJbnQzMkFycmF5IEludDhBcnJheSBVaW50MTZBcnJheSBVaW50MzJBcnJheSAnICtcbiAgICAgICdVaW50OEFycmF5IFVpbnQ4Q2xhbXBlZEFycmF5IEFycmF5QnVmZmVyIERhdGFWaWV3IEpTT04gSW50bCBhcmd1bWVudHMgcmVxdWlyZSAnICtcbiAgICAgICdtb2R1bGUgY29uc29sZSB3aW5kb3cgZG9jdW1lbnQgU3ltYm9sIFNldCBNYXAgV2Vha1NldCBXZWFrTWFwIFByb3h5IFJlZmxlY3QgJyArXG4gICAgICAnUHJvbWlzZSdcbiAgfTtcbiAgdmFyIEVYUFJFU1NJT05TO1xuICB2YXIgTlVNQkVSID0ge1xuICAgIGNsYXNzTmFtZTogJ251bWJlcicsXG4gICAgdmFyaWFudHM6IFtcbiAgICAgIHsgYmVnaW46ICdcXFxcYigwW2JCXVswMV0rKScgfSxcbiAgICAgIHsgYmVnaW46ICdcXFxcYigwW29PXVswLTddKyknIH0sXG4gICAgICB7IGJlZ2luOiBobGpzLkNfTlVNQkVSX1JFIH1cbiAgICBdLFxuICAgIHJlbGV2YW5jZTogMFxuICB9O1xuICB2YXIgU1VCU1QgPSB7XG4gICAgY2xhc3NOYW1lOiAnc3Vic3QnLFxuICAgIGJlZ2luOiAnXFxcXCRcXFxceycsIGVuZDogJ1xcXFx9JyxcbiAgICBrZXl3b3JkczogS0VZV09SRFMsXG4gICAgY29udGFpbnM6IFtdICAvLyBkZWZpbmVkIGxhdGVyXG4gIH07XG4gIHZhciBURU1QTEFURV9TVFJJTkcgPSB7XG4gICAgY2xhc3NOYW1lOiAnc3RyaW5nJyxcbiAgICBiZWdpbjogJ2AnLCBlbmQ6ICdgJyxcbiAgICBjb250YWluczogW1xuICAgICAgaGxqcy5CQUNLU0xBU0hfRVNDQVBFLFxuICAgICAgU1VCU1RcbiAgICBdXG4gIH07XG4gIFNVQlNULmNvbnRhaW5zID0gW1xuICAgIGhsanMuQVBPU19TVFJJTkdfTU9ERSxcbiAgICBobGpzLlFVT1RFX1NUUklOR19NT0RFLFxuICAgIFRFTVBMQVRFX1NUUklORyxcbiAgICBOVU1CRVIsXG4gICAgaGxqcy5SRUdFWFBfTU9ERVxuICBdXG4gIHZhciBQQVJBTVNfQ09OVEFJTlMgPSBTVUJTVC5jb250YWlucy5jb25jYXQoW1xuICAgIGhsanMuQ19CTE9DS19DT01NRU5UX01PREUsXG4gICAgaGxqcy5DX0xJTkVfQ09NTUVOVF9NT0RFXG4gIF0pO1xuXG4gIHJldHVybiB7XG4gICAgYWxpYXNlczogWydqcycsICdqc3gnXSxcbiAgICBrZXl3b3JkczogS0VZV09SRFMsXG4gICAgY29udGFpbnM6IFtcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnbWV0YScsXG4gICAgICAgIHJlbGV2YW5jZTogMTAsXG4gICAgICAgIGJlZ2luOiAvXlxccypbJ1wiXXVzZSAoc3RyaWN0fGFzbSlbJ1wiXS9cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ21ldGEnLFxuICAgICAgICBiZWdpbjogL14jIS8sIGVuZDogLyQvXG4gICAgICB9LFxuICAgICAgaGxqcy5BUE9TX1NUUklOR19NT0RFLFxuICAgICAgaGxqcy5RVU9URV9TVFJJTkdfTU9ERSxcbiAgICAgIFRFTVBMQVRFX1NUUklORyxcbiAgICAgIGhsanMuQ19MSU5FX0NPTU1FTlRfTU9ERSxcbiAgICAgIGhsanMuQ19CTE9DS19DT01NRU5UX01PREUsXG4gICAgICBOVU1CRVIsXG4gICAgICB7IC8vIG9iamVjdCBhdHRyIGNvbnRhaW5lclxuICAgICAgICBiZWdpbjogL1t7LF1cXHMqLywgcmVsZXZhbmNlOiAwLFxuICAgICAgICBjb250YWluczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGJlZ2luOiBJREVOVF9SRSArICdcXFxccyo6JywgcmV0dXJuQmVnaW46IHRydWUsXG4gICAgICAgICAgICByZWxldmFuY2U6IDAsXG4gICAgICAgICAgICBjb250YWluczogW3tjbGFzc05hbWU6ICdhdHRyJywgYmVnaW46IElERU5UX1JFLCByZWxldmFuY2U6IDB9XVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIHsgLy8gXCJ2YWx1ZVwiIGNvbnRhaW5lclxuICAgICAgICBiZWdpbjogJygnICsgaGxqcy5SRV9TVEFSVEVSU19SRSArICd8XFxcXGIoY2FzZXxyZXR1cm58dGhyb3cpXFxcXGIpXFxcXHMqJyxcbiAgICAgICAga2V5d29yZHM6ICdyZXR1cm4gdGhyb3cgY2FzZScsXG4gICAgICAgIGNvbnRhaW5zOiBbXG4gICAgICAgICAgaGxqcy5DX0xJTkVfQ09NTUVOVF9NT0RFLFxuICAgICAgICAgIGhsanMuQ19CTE9DS19DT01NRU5UX01PREUsXG4gICAgICAgICAgaGxqcy5SRUdFWFBfTU9ERSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICdmdW5jdGlvbicsXG4gICAgICAgICAgICBiZWdpbjogJyhcXFxcKC4qP1xcXFwpfCcgKyBJREVOVF9SRSArICcpXFxcXHMqPT4nLCByZXR1cm5CZWdpbjogdHJ1ZSxcbiAgICAgICAgICAgIGVuZDogJ1xcXFxzKj0+JyxcbiAgICAgICAgICAgIGNvbnRhaW5zOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdwYXJhbXMnLFxuICAgICAgICAgICAgICAgIHZhcmlhbnRzOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGJlZ2luOiBJREVOVF9SRVxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYmVnaW46IC9cXChcXHMqXFwpLyxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGJlZ2luOiAvXFwoLywgZW5kOiAvXFwpLyxcbiAgICAgICAgICAgICAgICAgICAgZXhjbHVkZUJlZ2luOiB0cnVlLCBleGNsdWRlRW5kOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBrZXl3b3JkczogS0VZV09SRFMsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5zOiBQQVJBTVNfQ09OVEFJTlNcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHsgLy8gRTRYIC8gSlNYXG4gICAgICAgICAgICBiZWdpbjogLzwvLCBlbmQ6IC8oXFwvXFx3K3xcXHcrXFwvKT4vLFxuICAgICAgICAgICAgc3ViTGFuZ3VhZ2U6ICd4bWwnLFxuICAgICAgICAgICAgY29udGFpbnM6IFtcbiAgICAgICAgICAgICAge2JlZ2luOiAvPFxcdytcXHMqXFwvPi8sIHNraXA6IHRydWV9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYmVnaW46IC88XFx3Ky8sIGVuZDogLyhcXC9cXHcrfFxcdytcXC8pPi8sIHNraXA6IHRydWUsXG4gICAgICAgICAgICAgICAgY29udGFpbnM6IFtcbiAgICAgICAgICAgICAgICAgIHtiZWdpbjogLzxcXHcrXFxzKlxcLz4vLCBza2lwOiB0cnVlfSxcbiAgICAgICAgICAgICAgICAgICdzZWxmJ1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcmVsZXZhbmNlOiAwXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6ICdmdW5jdGlvbicsXG4gICAgICAgIGJlZ2luS2V5d29yZHM6ICdmdW5jdGlvbicsIGVuZDogL1xcey8sIGV4Y2x1ZGVFbmQ6IHRydWUsXG4gICAgICAgIGNvbnRhaW5zOiBbXG4gICAgICAgICAgaGxqcy5pbmhlcml0KGhsanMuVElUTEVfTU9ERSwge2JlZ2luOiBJREVOVF9SRX0pLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ3BhcmFtcycsXG4gICAgICAgICAgICBiZWdpbjogL1xcKC8sIGVuZDogL1xcKS8sXG4gICAgICAgICAgICBleGNsdWRlQmVnaW46IHRydWUsXG4gICAgICAgICAgICBleGNsdWRlRW5kOiB0cnVlLFxuICAgICAgICAgICAgY29udGFpbnM6IFBBUkFNU19DT05UQUlOU1xuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgaWxsZWdhbDogL1xcW3wlL1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYmVnaW46IC9cXCRbKC5dLyAvLyByZWxldmFuY2UgYm9vc3RlciBmb3IgYSBwYXR0ZXJuIGNvbW1vbiB0byBKUyBsaWJzOiBgJChzb21ldGhpbmcpYCBhbmQgYCQuc29tZXRoaW5nYFxuICAgICAgfSxcbiAgICAgIGhsanMuTUVUSE9EX0dVQVJELFxuICAgICAgeyAvLyBFUzYgY2xhc3NcbiAgICAgICAgY2xhc3NOYW1lOiAnY2xhc3MnLFxuICAgICAgICBiZWdpbktleXdvcmRzOiAnY2xhc3MnLCBlbmQ6IC9bezs9XS8sIGV4Y2x1ZGVFbmQ6IHRydWUsXG4gICAgICAgIGlsbGVnYWw6IC9bOlwiXFxbXFxdXS8sXG4gICAgICAgIGNvbnRhaW5zOiBbXG4gICAgICAgICAge2JlZ2luS2V5d29yZHM6ICdleHRlbmRzJ30sXG4gICAgICAgICAgaGxqcy5VTkRFUlNDT1JFX1RJVExFX01PREVcbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYmVnaW5LZXl3b3JkczogJ2NvbnN0cnVjdG9yJywgZW5kOiAvXFx7LywgZXhjbHVkZUVuZDogdHJ1ZVxuICAgICAgfVxuICAgIF0sXG4gICAgaWxsZWdhbDogLyMoPyEhKS9cbiAgfTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihobGpzKSB7XG4gIHZhciBCVUlMVF9JTlMgPSAnYWN0aW9uIGNvbGxlY3Rpb24gY29tcG9uZW50IGNvbmNhdCBkZWJ1Z2dlciBlYWNoIGVhY2gtaW4gZWxzZSBnZXQgaGFzaCBpZiBpbnB1dCBsaW5rLXRvIGxvYyBsb2cgbXV0IG91dGxldCBwYXJ0aWFsIHF1ZXJ5LXBhcmFtcyByZW5kZXIgdGV4dGFyZWEgdW5ib3VuZCB1bmxlc3Mgd2l0aCB5aWVsZCB2aWV3JztcblxuICB2YXIgQVRUUl9BU1NJR05NRU5UID0ge1xuICAgIGlsbGVnYWw6IC9cXH1cXH0vLFxuICAgIGJlZ2luOiAvW2EtekEtWjAtOV9dKz0vLFxuICAgIHJldHVybkJlZ2luOiB0cnVlLFxuICAgIHJlbGV2YW5jZTogMCxcbiAgICBjb250YWluczogW1xuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6ICdhdHRyJywgYmVnaW46IC9bYS16QS1aMC05X10rL1xuICAgICAgfVxuICAgIF1cbiAgfTtcblxuICB2YXIgU1VCX0VYUFIgPSB7XG4gICAgaWxsZWdhbDogL1xcfVxcfS8sXG4gICAgYmVnaW46IC9cXCkvLCBlbmQ6IC9cXCkvLFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICB7XG4gICAgICAgIGJlZ2luOiAvW2EtekEtWlxcLlxcLV0rLyxcbiAgICAgICAga2V5d29yZHM6IHtidWlsdF9pbjogQlVJTFRfSU5TfSxcbiAgICAgICAgc3RhcnRzOiB7XG4gICAgICAgICAgZW5kc1dpdGhQYXJlbnQ6IHRydWUsIHJlbGV2YW5jZTogMCxcbiAgICAgICAgICBjb250YWluczogW1xuICAgICAgICAgICAgaGxqcy5RVU9URV9TVFJJTkdfTU9ERSxcbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH07XG5cbiAgdmFyIFRBR19JTk5BUkRTID0ge1xuICAgIGVuZHNXaXRoUGFyZW50OiB0cnVlLCByZWxldmFuY2U6IDAsXG4gICAga2V5d29yZHM6IHtrZXl3b3JkOiAnYXMnLCBidWlsdF9pbjogQlVJTFRfSU5TfSxcbiAgICBjb250YWluczogW1xuICAgICAgaGxqcy5RVU9URV9TVFJJTkdfTU9ERSxcbiAgICAgIEFUVFJfQVNTSUdOTUVOVCxcbiAgICAgIGhsanMuTlVNQkVSX01PREVcbiAgICBdXG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBjYXNlX2luc2Vuc2l0aXZlOiB0cnVlLFxuICAgIHN1Ykxhbmd1YWdlOiAneG1sJyxcbiAgICBjb250YWluczogW1xuICAgICAgaGxqcy5DT01NRU5UKCd7eyEoLS0pPycsICcoLS0pP319JyksXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ3RlbXBsYXRlLXRhZycsXG4gICAgICAgIGJlZ2luOiAvXFx7XFx7WyNcXC9dLywgZW5kOiAvXFx9XFx9LyxcbiAgICAgICAgY29udGFpbnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICduYW1lJyxcbiAgICAgICAgICAgIGJlZ2luOiAvW2EtekEtWlxcLlxcLV0rLyxcbiAgICAgICAgICAgIGtleXdvcmRzOiB7J2J1aWx0aW4tbmFtZSc6IEJVSUxUX0lOU30sXG4gICAgICAgICAgICBzdGFydHM6IFRBR19JTk5BUkRTXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6ICd0ZW1wbGF0ZS12YXJpYWJsZScsXG4gICAgICAgIGJlZ2luOiAvXFx7XFx7W2EtekEtWl1bYS16QS1aXFwtXSsvLCBlbmQ6IC9cXH1cXH0vLFxuICAgICAgICBrZXl3b3Jkczoge2tleXdvcmQ6ICdhcycsIGJ1aWx0X2luOiBCVUlMVF9JTlN9LFxuICAgICAgICBjb250YWluczogW1xuICAgICAgICAgIGhsanMuUVVPVEVfU1RSSU5HX01PREVcbiAgICAgICAgXVxuICAgICAgfVxuICAgIF1cbiAgfTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihobGpzKSB7XG4gIHZhciBMSVRFUkFMUyA9IHtsaXRlcmFsOiAndHJ1ZSBmYWxzZSBudWxsJ307XG4gIHZhciBUWVBFUyA9IFtcbiAgICBobGpzLlFVT1RFX1NUUklOR19NT0RFLFxuICAgIGhsanMuQ19OVU1CRVJfTU9ERVxuICBdO1xuICB2YXIgVkFMVUVfQ09OVEFJTkVSID0ge1xuICAgIGVuZDogJywnLCBlbmRzV2l0aFBhcmVudDogdHJ1ZSwgZXhjbHVkZUVuZDogdHJ1ZSxcbiAgICBjb250YWluczogVFlQRVMsXG4gICAga2V5d29yZHM6IExJVEVSQUxTXG4gIH07XG4gIHZhciBPQkpFQ1QgPSB7XG4gICAgYmVnaW46ICd7JywgZW5kOiAnfScsXG4gICAgY29udGFpbnM6IFtcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnYXR0cicsXG4gICAgICAgIGJlZ2luOiAvXCIvLCBlbmQ6IC9cIi8sXG4gICAgICAgIGNvbnRhaW5zOiBbaGxqcy5CQUNLU0xBU0hfRVNDQVBFXSxcbiAgICAgICAgaWxsZWdhbDogJ1xcXFxuJyxcbiAgICAgIH0sXG4gICAgICBobGpzLmluaGVyaXQoVkFMVUVfQ09OVEFJTkVSLCB7YmVnaW46IC86L30pXG4gICAgXSxcbiAgICBpbGxlZ2FsOiAnXFxcXFMnXG4gIH07XG4gIHZhciBBUlJBWSA9IHtcbiAgICBiZWdpbjogJ1xcXFxbJywgZW5kOiAnXFxcXF0nLFxuICAgIGNvbnRhaW5zOiBbaGxqcy5pbmhlcml0KFZBTFVFX0NPTlRBSU5FUildLCAvLyBpbmhlcml0IGlzIGEgd29ya2Fyb3VuZCBmb3IgYSBidWcgdGhhdCBtYWtlcyBzaGFyZWQgbW9kZXMgd2l0aCBlbmRzV2l0aFBhcmVudCBjb21waWxlIG9ubHkgdGhlIGVuZGluZyBvZiBvbmUgb2YgdGhlIHBhcmVudHNcbiAgICBpbGxlZ2FsOiAnXFxcXFMnXG4gIH07XG4gIFRZUEVTLnNwbGljZShUWVBFUy5sZW5ndGgsIDAsIE9CSkVDVCwgQVJSQVkpO1xuICByZXR1cm4ge1xuICAgIGNvbnRhaW5zOiBUWVBFUyxcbiAgICBrZXl3b3JkczogTElURVJBTFMsXG4gICAgaWxsZWdhbDogJ1xcXFxTJ1xuICB9O1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGhsanMpIHtcbiAgdmFyIEpBVkFfSURFTlRfUkUgPSAnW1xcdTAwQzAtXFx1MDJCOGEtekEtWl8kXVtcXHUwMEMwLVxcdTAyQjhhLXpBLVpfJDAtOV0qJztcbiAgdmFyIEdFTkVSSUNfSURFTlRfUkUgPSBKQVZBX0lERU5UX1JFICsgJyg8JyArIEpBVkFfSURFTlRfUkUgKyAnKFxcXFxzKixcXFxccyonICsgSkFWQV9JREVOVF9SRSArICcpKj4pPyc7XG4gIHZhciBLRVlXT1JEUyA9XG4gICAgJ2ZhbHNlIHN5bmNocm9uaXplZCBpbnQgYWJzdHJhY3QgZmxvYXQgcHJpdmF0ZSBjaGFyIGJvb2xlYW4gc3RhdGljIG51bGwgaWYgY29uc3QgJyArXG4gICAgJ2ZvciB0cnVlIHdoaWxlIGxvbmcgc3RyaWN0ZnAgZmluYWxseSBwcm90ZWN0ZWQgaW1wb3J0IG5hdGl2ZSBmaW5hbCB2b2lkICcgK1xuICAgICdlbnVtIGVsc2UgYnJlYWsgdHJhbnNpZW50IGNhdGNoIGluc3RhbmNlb2YgYnl0ZSBzdXBlciB2b2xhdGlsZSBjYXNlIGFzc2VydCBzaG9ydCAnICtcbiAgICAncGFja2FnZSBkZWZhdWx0IGRvdWJsZSBwdWJsaWMgdHJ5IHRoaXMgc3dpdGNoIGNvbnRpbnVlIHRocm93cyBwcm90ZWN0ZWQgcHVibGljIHByaXZhdGUgJyArXG4gICAgJ21vZHVsZSByZXF1aXJlcyBleHBvcnRzIGRvJztcblxuICAvLyBodHRwczovL2RvY3Mub3JhY2xlLmNvbS9qYXZhc2UvNy9kb2NzL3RlY2hub3Rlcy9ndWlkZXMvbGFuZ3VhZ2UvdW5kZXJzY29yZXMtbGl0ZXJhbHMuaHRtbFxuICB2YXIgSkFWQV9OVU1CRVJfUkUgPSAnXFxcXGInICtcbiAgICAnKCcgK1xuICAgICAgJzBbYkJdKFswMV0rWzAxX10rWzAxXSt8WzAxXSspJyArIC8vIDBiLi4uXG4gICAgICAnfCcgK1xuICAgICAgJzBbeFhdKFthLWZBLUYwLTldK1thLWZBLUYwLTlfXStbYS1mQS1GMC05XSt8W2EtZkEtRjAtOV0rKScgKyAvLyAweC4uLlxuICAgICAgJ3wnICtcbiAgICAgICcoJyArXG4gICAgICAgICcoW1xcXFxkXStbXFxcXGRfXStbXFxcXGRdK3xbXFxcXGRdKykoXFxcXC4oW1xcXFxkXStbXFxcXGRfXStbXFxcXGRdK3xbXFxcXGRdKykpPycgK1xuICAgICAgICAnfCcgK1xuICAgICAgICAnXFxcXC4oW1xcXFxkXStbXFxcXGRfXStbXFxcXGRdK3xbXFxcXGRdKyknICtcbiAgICAgICcpJyArXG4gICAgICAnKFtlRV1bLStdP1xcXFxkKyk/JyArIC8vIG9jdGFsLCBkZWNpbWFsLCBmbG9hdFxuICAgICcpJyArXG4gICAgJ1tsTGZGXT8nO1xuICB2YXIgSkFWQV9OVU1CRVJfTU9ERSA9IHtcbiAgICBjbGFzc05hbWU6ICdudW1iZXInLFxuICAgIGJlZ2luOiBKQVZBX05VTUJFUl9SRSxcbiAgICByZWxldmFuY2U6IDBcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGFsaWFzZXM6IFsnanNwJ10sXG4gICAga2V5d29yZHM6IEtFWVdPUkRTLFxuICAgIGlsbGVnYWw6IC88XFwvfCMvLFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICBobGpzLkNPTU1FTlQoXG4gICAgICAgICcvXFxcXCpcXFxcKicsXG4gICAgICAgICdcXFxcKi8nLFxuICAgICAgICB7XG4gICAgICAgICAgcmVsZXZhbmNlIDogMCxcbiAgICAgICAgICBjb250YWlucyA6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgLy8gZWF0IHVwIEAncyBpbiBlbWFpbHMgdG8gcHJldmVudCB0aGVtIHRvIGJlIHJlY29nbml6ZWQgYXMgZG9jdGFnc1xuICAgICAgICAgICAgICBiZWdpbjogL1xcdytALywgcmVsZXZhbmNlOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBjbGFzc05hbWUgOiAnZG9jdGFnJyxcbiAgICAgICAgICAgICAgYmVnaW4gOiAnQFtBLVphLXpdKydcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgICksXG4gICAgICBobGpzLkNfTElORV9DT01NRU5UX01PREUsXG4gICAgICBobGpzLkNfQkxPQ0tfQ09NTUVOVF9NT0RFLFxuICAgICAgaGxqcy5BUE9TX1NUUklOR19NT0RFLFxuICAgICAgaGxqcy5RVU9URV9TVFJJTkdfTU9ERSxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnY2xhc3MnLFxuICAgICAgICBiZWdpbktleXdvcmRzOiAnY2xhc3MgaW50ZXJmYWNlJywgZW5kOiAvW3s7PV0vLCBleGNsdWRlRW5kOiB0cnVlLFxuICAgICAgICBrZXl3b3JkczogJ2NsYXNzIGludGVyZmFjZScsXG4gICAgICAgIGlsbGVnYWw6IC9bOlwiXFxbXFxdXS8sXG4gICAgICAgIGNvbnRhaW5zOiBbXG4gICAgICAgICAge2JlZ2luS2V5d29yZHM6ICdleHRlbmRzIGltcGxlbWVudHMnfSxcbiAgICAgICAgICBobGpzLlVOREVSU0NPUkVfVElUTEVfTU9ERVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAvLyBFeHByZXNzaW9uIGtleXdvcmRzIHByZXZlbnQgJ2tleXdvcmQgTmFtZSguLi4pJyBmcm9tIGJlaW5nXG4gICAgICAgIC8vIHJlY29nbml6ZWQgYXMgYSBmdW5jdGlvbiBkZWZpbml0aW9uXG4gICAgICAgIGJlZ2luS2V5d29yZHM6ICduZXcgdGhyb3cgcmV0dXJuIGVsc2UnLFxuICAgICAgICByZWxldmFuY2U6IDBcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ2Z1bmN0aW9uJyxcbiAgICAgICAgYmVnaW46ICcoJyArIEdFTkVSSUNfSURFTlRfUkUgKyAnXFxcXHMrKSsnICsgaGxqcy5VTkRFUlNDT1JFX0lERU5UX1JFICsgJ1xcXFxzKlxcXFwoJywgcmV0dXJuQmVnaW46IHRydWUsIGVuZDogL1t7Oz1dLyxcbiAgICAgICAgZXhjbHVkZUVuZDogdHJ1ZSxcbiAgICAgICAga2V5d29yZHM6IEtFWVdPUkRTLFxuICAgICAgICBjb250YWluczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGJlZ2luOiBobGpzLlVOREVSU0NPUkVfSURFTlRfUkUgKyAnXFxcXHMqXFxcXCgnLCByZXR1cm5CZWdpbjogdHJ1ZSxcbiAgICAgICAgICAgIHJlbGV2YW5jZTogMCxcbiAgICAgICAgICAgIGNvbnRhaW5zOiBbaGxqcy5VTkRFUlNDT1JFX1RJVExFX01PREVdXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICdwYXJhbXMnLFxuICAgICAgICAgICAgYmVnaW46IC9cXCgvLCBlbmQ6IC9cXCkvLFxuICAgICAgICAgICAga2V5d29yZHM6IEtFWVdPUkRTLFxuICAgICAgICAgICAgcmVsZXZhbmNlOiAwLFxuICAgICAgICAgICAgY29udGFpbnM6IFtcbiAgICAgICAgICAgICAgaGxqcy5BUE9TX1NUUklOR19NT0RFLFxuICAgICAgICAgICAgICBobGpzLlFVT1RFX1NUUklOR19NT0RFLFxuICAgICAgICAgICAgICBobGpzLkNfTlVNQkVSX01PREUsXG4gICAgICAgICAgICAgIGhsanMuQ19CTE9DS19DT01NRU5UX01PREVcbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGhsanMuQ19MSU5FX0NPTU1FTlRfTU9ERSxcbiAgICAgICAgICBobGpzLkNfQkxPQ0tfQ09NTUVOVF9NT0RFXG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICBKQVZBX05VTUJFUl9NT0RFLFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6ICdtZXRhJywgYmVnaW46ICdAW0EtWmEtel0rJ1xuICAgICAgfVxuICAgIF1cbiAgfTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihobGpzKSB7XG4gIHZhciBWQVIgPSB7XG4gICAgY2xhc3NOYW1lOiAndmFyaWFibGUnLFxuICAgIHZhcmlhbnRzOiBbXG4gICAgICB7YmVnaW46IC9cXCRbXFx3XFxkI0BdW1xcd1xcZF9dKi99LFxuICAgICAge2JlZ2luOiAvXFwkXFx7KC4qPyl9L31cbiAgICBdXG4gIH07XG4gIHZhciBRVU9URV9TVFJJTkcgPSB7XG4gICAgY2xhc3NOYW1lOiAnc3RyaW5nJyxcbiAgICBiZWdpbjogL1wiLywgZW5kOiAvXCIvLFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICBobGpzLkJBQ0tTTEFTSF9FU0NBUEUsXG4gICAgICBWQVIsXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ3ZhcmlhYmxlJyxcbiAgICAgICAgYmVnaW46IC9cXCRcXCgvLCBlbmQ6IC9cXCkvLFxuICAgICAgICBjb250YWluczogW2hsanMuQkFDS1NMQVNIX0VTQ0FQRV1cbiAgICAgIH1cbiAgICBdXG4gIH07XG4gIHZhciBBUE9TX1NUUklORyA9IHtcbiAgICBjbGFzc05hbWU6ICdzdHJpbmcnLFxuICAgIGJlZ2luOiAvJy8sIGVuZDogLycvXG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBhbGlhc2VzOiBbJ3NoJywgJ3pzaCddLFxuICAgIGxleGVtZXM6IC9cXGItP1thLXpcXC5fXStcXGIvLFxuICAgIGtleXdvcmRzOiB7XG4gICAgICBrZXl3b3JkOlxuICAgICAgICAnaWYgdGhlbiBlbHNlIGVsaWYgZmkgZm9yIHdoaWxlIGluIGRvIGRvbmUgY2FzZSBlc2FjIGZ1bmN0aW9uJyxcbiAgICAgIGxpdGVyYWw6XG4gICAgICAgICd0cnVlIGZhbHNlJyxcbiAgICAgIGJ1aWx0X2luOlxuICAgICAgICAvLyBTaGVsbCBidWlsdC1pbnNcbiAgICAgICAgLy8gaHR0cDovL3d3dy5nbnUub3JnL3NvZnR3YXJlL2Jhc2gvbWFudWFsL2h0bWxfbm9kZS9TaGVsbC1CdWlsdGluLUNvbW1hbmRzLmh0bWxcbiAgICAgICAgJ2JyZWFrIGNkIGNvbnRpbnVlIGV2YWwgZXhlYyBleGl0IGV4cG9ydCBnZXRvcHRzIGhhc2ggcHdkIHJlYWRvbmx5IHJldHVybiBzaGlmdCB0ZXN0IHRpbWVzICcgK1xuICAgICAgICAndHJhcCB1bWFzayB1bnNldCAnICtcbiAgICAgICAgLy8gQmFzaCBidWlsdC1pbnNcbiAgICAgICAgJ2FsaWFzIGJpbmQgYnVpbHRpbiBjYWxsZXIgY29tbWFuZCBkZWNsYXJlIGVjaG8gZW5hYmxlIGhlbHAgbGV0IGxvY2FsIGxvZ291dCBtYXBmaWxlIHByaW50ZiAnICtcbiAgICAgICAgJ3JlYWQgcmVhZGFycmF5IHNvdXJjZSB0eXBlIHR5cGVzZXQgdWxpbWl0IHVuYWxpYXMgJyArXG4gICAgICAgIC8vIFNoZWxsIG1vZGlmaWVyc1xuICAgICAgICAnc2V0IHNob3B0ICcgK1xuICAgICAgICAvLyBac2ggYnVpbHQtaW5zXG4gICAgICAgICdhdXRvbG9hZCBiZyBiaW5ka2V5IGJ5ZSBjYXAgY2hkaXIgY2xvbmUgY29tcGFyZ3VtZW50cyBjb21wY2FsbCBjb21wY3RsIGNvbXBkZXNjcmliZSBjb21wZmlsZXMgJyArXG4gICAgICAgICdjb21wZ3JvdXBzIGNvbXBxdW90ZSBjb21wdGFncyBjb21wdHJ5IGNvbXB2YWx1ZXMgZGlycyBkaXNhYmxlIGRpc293biBlY2hvdGMgZWNob3RpIGVtdWxhdGUgJyArXG4gICAgICAgICdmYyBmZyBmbG9hdCBmdW5jdGlvbnMgZ2V0Y2FwIGdldGxuIGhpc3RvcnkgaW50ZWdlciBqb2JzIGtpbGwgbGltaXQgbG9nIG5vZ2xvYiBwb3BkIHByaW50ICcgK1xuICAgICAgICAncHVzaGQgcHVzaGxuIHJlaGFzaCBzY2hlZCBzZXRjYXAgc2V0b3B0IHN0YXQgc3VzcGVuZCB0dHljdGwgdW5mdW5jdGlvbiB1bmhhc2ggdW5saW1pdCAnICtcbiAgICAgICAgJ3Vuc2V0b3B0IHZhcmVkIHdhaXQgd2hlbmNlIHdoZXJlIHdoaWNoIHpjb21waWxlIHpmb3JtYXQgemZ0cCB6bGUgem1vZGxvYWQgenBhcnNlb3B0cyB6cHJvZiAnICtcbiAgICAgICAgJ3pwdHkgenJlZ2V4cGFyc2UgenNvY2tldCB6c3R5bGUgenRjcCcsXG4gICAgICBfOlxuICAgICAgICAnLW5lIC1lcSAtbHQgLWd0IC1mIC1kIC1lIC1zIC1sIC1hJyAvLyByZWxldmFuY2UgYm9vc3RlclxuICAgIH0sXG4gICAgY29udGFpbnM6IFtcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnbWV0YScsXG4gICAgICAgIGJlZ2luOiAvXiMhW15cXG5dK3NoXFxzKiQvLFxuICAgICAgICByZWxldmFuY2U6IDEwXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6ICdmdW5jdGlvbicsXG4gICAgICAgIGJlZ2luOiAvXFx3W1xcd1xcZF9dKlxccypcXChcXHMqXFwpXFxzKlxcey8sXG4gICAgICAgIHJldHVybkJlZ2luOiB0cnVlLFxuICAgICAgICBjb250YWluczogW2hsanMuaW5oZXJpdChobGpzLlRJVExFX01PREUsIHtiZWdpbjogL1xcd1tcXHdcXGRfXSovfSldLFxuICAgICAgICByZWxldmFuY2U6IDBcbiAgICAgIH0sXG4gICAgICBobGpzLkhBU0hfQ09NTUVOVF9NT0RFLFxuICAgICAgUVVPVEVfU1RSSU5HLFxuICAgICAgQVBPU19TVFJJTkcsXG4gICAgICBWQVJcbiAgICBdXG4gIH07XG59OyIsIi8qXG5TeW50YXggaGlnaGxpZ2h0aW5nIHdpdGggbGFuZ3VhZ2UgYXV0b2RldGVjdGlvbi5cbmh0dHBzOi8vaGlnaGxpZ2h0anMub3JnL1xuKi9cblxuKGZ1bmN0aW9uKGZhY3RvcnkpIHtcblxuICAvLyBGaW5kIHRoZSBnbG9iYWwgb2JqZWN0IGZvciBleHBvcnQgdG8gYm90aCB0aGUgYnJvd3NlciBhbmQgd2ViIHdvcmtlcnMuXG4gIHZhciBnbG9iYWxPYmplY3QgPSB0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB3aW5kb3cgfHxcbiAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBzZWxmID09PSAnb2JqZWN0JyAmJiBzZWxmO1xuXG4gIC8vIFNldHVwIGhpZ2hsaWdodC5qcyBmb3IgZGlmZmVyZW50IGVudmlyb25tZW50cy4gRmlyc3QgaXMgTm9kZS5qcyBvclxuICAvLyBDb21tb25KUy5cbiAgaWYodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZmFjdG9yeShleHBvcnRzKTtcbiAgfSBlbHNlIGlmKGdsb2JhbE9iamVjdCkge1xuICAgIC8vIEV4cG9ydCBobGpzIGdsb2JhbGx5IGV2ZW4gd2hlbiB1c2luZyBBTUQgZm9yIGNhc2VzIHdoZW4gdGhpcyBzY3JpcHRcbiAgICAvLyBpcyBsb2FkZWQgd2l0aCBvdGhlcnMgdGhhdCBtYXkgc3RpbGwgZXhwZWN0IGEgZ2xvYmFsIGhsanMuXG4gICAgZ2xvYmFsT2JqZWN0LmhsanMgPSBmYWN0b3J5KHt9KTtcblxuICAgIC8vIEZpbmFsbHkgcmVnaXN0ZXIgdGhlIGdsb2JhbCBobGpzIHdpdGggQU1ELlxuICAgIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgZGVmaW5lKFtdLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbE9iamVjdC5obGpzO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbn0oZnVuY3Rpb24oaGxqcykge1xuICAvLyBDb252ZW5pZW5jZSB2YXJpYWJsZXMgZm9yIGJ1aWxkLWluIG9iamVjdHNcbiAgdmFyIEFycmF5UHJvdG8gPSBbXSxcbiAgICAgIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cztcblxuICAvLyBHbG9iYWwgaW50ZXJuYWwgdmFyaWFibGVzIHVzZWQgd2l0aGluIHRoZSBoaWdobGlnaHQuanMgbGlicmFyeS5cbiAgdmFyIGxhbmd1YWdlcyA9IHt9LFxuICAgICAgYWxpYXNlcyAgID0ge307XG5cbiAgLy8gUmVndWxhciBleHByZXNzaW9ucyB1c2VkIHRocm91Z2hvdXQgdGhlIGhpZ2hsaWdodC5qcyBsaWJyYXJ5LlxuICB2YXIgbm9IaWdobGlnaHRSZSAgICA9IC9eKG5vLT9oaWdobGlnaHR8cGxhaW58dGV4dCkkL2ksXG4gICAgICBsYW5ndWFnZVByZWZpeFJlID0gL1xcYmxhbmcoPzp1YWdlKT8tKFtcXHctXSspXFxiL2ksXG4gICAgICBmaXhNYXJrdXBSZSAgICAgID0gLygoXig8W14+XSs+fFxcdHwpK3woPzpcXG4pKSkvZ207XG5cbiAgdmFyIHNwYW5FbmRUYWcgPSAnPC9zcGFuPic7XG5cbiAgLy8gR2xvYmFsIG9wdGlvbnMgdXNlZCB3aGVuIHdpdGhpbiBleHRlcm5hbCBBUElzLiBUaGlzIGlzIG1vZGlmaWVkIHdoZW5cbiAgLy8gY2FsbGluZyB0aGUgYGhsanMuY29uZmlndXJlYCBmdW5jdGlvbi5cbiAgdmFyIG9wdGlvbnMgPSB7XG4gICAgY2xhc3NQcmVmaXg6ICdobGpzLScsXG4gICAgdGFiUmVwbGFjZTogbnVsbCxcbiAgICB1c2VCUjogZmFsc2UsXG4gICAgbGFuZ3VhZ2VzOiB1bmRlZmluZWRcbiAgfTtcblxuXG4gIC8qIFV0aWxpdHkgZnVuY3Rpb25zICovXG5cbiAgZnVuY3Rpb24gZXNjYXBlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoLyYvZywgJyZhbXA7JykucmVwbGFjZSgvPC9nLCAnJmx0OycpLnJlcGxhY2UoLz4vZywgJyZndDsnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRhZyhub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRlc3RSZShyZSwgbGV4ZW1lKSB7XG4gICAgdmFyIG1hdGNoID0gcmUgJiYgcmUuZXhlYyhsZXhlbWUpO1xuICAgIHJldHVybiBtYXRjaCAmJiBtYXRjaC5pbmRleCA9PT0gMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzTm90SGlnaGxpZ2h0ZWQobGFuZ3VhZ2UpIHtcbiAgICByZXR1cm4gbm9IaWdobGlnaHRSZS50ZXN0KGxhbmd1YWdlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrTGFuZ3VhZ2UoYmxvY2spIHtcbiAgICB2YXIgaSwgbWF0Y2gsIGxlbmd0aCwgX2NsYXNzO1xuICAgIHZhciBjbGFzc2VzID0gYmxvY2suY2xhc3NOYW1lICsgJyAnO1xuXG4gICAgY2xhc3NlcyArPSBibG9jay5wYXJlbnROb2RlID8gYmxvY2sucGFyZW50Tm9kZS5jbGFzc05hbWUgOiAnJztcblxuICAgIC8vIGxhbmd1YWdlLSogdGFrZXMgcHJlY2VkZW5jZSBvdmVyIG5vbi1wcmVmaXhlZCBjbGFzcyBuYW1lcy5cbiAgICBtYXRjaCA9IGxhbmd1YWdlUHJlZml4UmUuZXhlYyhjbGFzc2VzKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIHJldHVybiBnZXRMYW5ndWFnZShtYXRjaFsxXSkgPyBtYXRjaFsxXSA6ICduby1oaWdobGlnaHQnO1xuICAgIH1cblxuICAgIGNsYXNzZXMgPSBjbGFzc2VzLnNwbGl0KC9cXHMrLyk7XG5cbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBjbGFzc2VzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBfY2xhc3MgPSBjbGFzc2VzW2ldXG5cbiAgICAgIGlmIChpc05vdEhpZ2hsaWdodGVkKF9jbGFzcykgfHwgZ2V0TGFuZ3VhZ2UoX2NsYXNzKSkge1xuICAgICAgICByZXR1cm4gX2NsYXNzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaGVyaXQocGFyZW50KSB7ICAvLyBpbmhlcml0KHBhcmVudCwgb3ZlcnJpZGVfb2JqLCBvdmVycmlkZV9vYmosIC4uLilcbiAgICB2YXIga2V5O1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgb2JqZWN0cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgICBmb3IgKGtleSBpbiBwYXJlbnQpXG4gICAgICByZXN1bHRba2V5XSA9IHBhcmVudFtrZXldO1xuICAgIG9iamVjdHMuZm9yRWFjaChmdW5jdGlvbihvYmopIHtcbiAgICAgIGZvciAoa2V5IGluIG9iailcbiAgICAgICAgcmVzdWx0W2tleV0gPSBvYmpba2V5XTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyogU3RyZWFtIG1lcmdpbmcgKi9cblxuICBmdW5jdGlvbiBub2RlU3RyZWFtKG5vZGUpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgKGZ1bmN0aW9uIF9ub2RlU3RyZWFtKG5vZGUsIG9mZnNldCkge1xuICAgICAgZm9yICh2YXIgY2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7IGNoaWxkOyBjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nKSB7XG4gICAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMylcbiAgICAgICAgICBvZmZzZXQgKz0gY2hpbGQubm9kZVZhbHVlLmxlbmd0aDtcbiAgICAgICAgZWxzZSBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICBldmVudDogJ3N0YXJ0JyxcbiAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICAgICAgbm9kZTogY2hpbGRcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBvZmZzZXQgPSBfbm9kZVN0cmVhbShjaGlsZCwgb2Zmc2V0KTtcbiAgICAgICAgICAvLyBQcmV2ZW50IHZvaWQgZWxlbWVudHMgZnJvbSBoYXZpbmcgYW4gZW5kIHRhZyB0aGF0IHdvdWxkIGFjdHVhbGx5XG4gICAgICAgICAgLy8gZG91YmxlIHRoZW0gaW4gdGhlIG91dHB1dC4gVGhlcmUgYXJlIG1vcmUgdm9pZCBlbGVtZW50cyBpbiBIVE1MXG4gICAgICAgICAgLy8gYnV0IHdlIGxpc3Qgb25seSB0aG9zZSByZWFsaXN0aWNhbGx5IGV4cGVjdGVkIGluIGNvZGUgZGlzcGxheS5cbiAgICAgICAgICBpZiAoIXRhZyhjaGlsZCkubWF0Y2goL2JyfGhyfGltZ3xpbnB1dC8pKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgIGV2ZW50OiAnc3RvcCcsXG4gICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICAgICAgICBub2RlOiBjaGlsZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb2Zmc2V0O1xuICAgIH0pKG5vZGUsIDApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZVN0cmVhbXMob3JpZ2luYWwsIGhpZ2hsaWdodGVkLCB2YWx1ZSkge1xuICAgIHZhciBwcm9jZXNzZWQgPSAwO1xuICAgIHZhciByZXN1bHQgPSAnJztcbiAgICB2YXIgbm9kZVN0YWNrID0gW107XG5cbiAgICBmdW5jdGlvbiBzZWxlY3RTdHJlYW0oKSB7XG4gICAgICBpZiAoIW9yaWdpbmFsLmxlbmd0aCB8fCAhaGlnaGxpZ2h0ZWQubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbC5sZW5ndGggPyBvcmlnaW5hbCA6IGhpZ2hsaWdodGVkO1xuICAgICAgfVxuICAgICAgaWYgKG9yaWdpbmFsWzBdLm9mZnNldCAhPT0gaGlnaGxpZ2h0ZWRbMF0ub2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiAob3JpZ2luYWxbMF0ub2Zmc2V0IDwgaGlnaGxpZ2h0ZWRbMF0ub2Zmc2V0KSA/IG9yaWdpbmFsIDogaGlnaGxpZ2h0ZWQ7XG4gICAgICB9XG5cbiAgICAgIC8qXG4gICAgICBUbyBhdm9pZCBzdGFydGluZyB0aGUgc3RyZWFtIGp1c3QgYmVmb3JlIGl0IHNob3VsZCBzdG9wIHRoZSBvcmRlciBpc1xuICAgICAgZW5zdXJlZCB0aGF0IG9yaWdpbmFsIGFsd2F5cyBzdGFydHMgZmlyc3QgYW5kIGNsb3NlcyBsYXN0OlxuXG4gICAgICBpZiAoZXZlbnQxID09ICdzdGFydCcgJiYgZXZlbnQyID09ICdzdGFydCcpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbDtcbiAgICAgIGlmIChldmVudDEgPT0gJ3N0YXJ0JyAmJiBldmVudDIgPT0gJ3N0b3AnKVxuICAgICAgICByZXR1cm4gaGlnaGxpZ2h0ZWQ7XG4gICAgICBpZiAoZXZlbnQxID09ICdzdG9wJyAmJiBldmVudDIgPT0gJ3N0YXJ0JylcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsO1xuICAgICAgaWYgKGV2ZW50MSA9PSAnc3RvcCcgJiYgZXZlbnQyID09ICdzdG9wJylcbiAgICAgICAgcmV0dXJuIGhpZ2hsaWdodGVkO1xuXG4gICAgICAuLi4gd2hpY2ggaXMgY29sbGFwc2VkIHRvOlxuICAgICAgKi9cbiAgICAgIHJldHVybiBoaWdobGlnaHRlZFswXS5ldmVudCA9PT0gJ3N0YXJ0JyA/IG9yaWdpbmFsIDogaGlnaGxpZ2h0ZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb3Blbihub2RlKSB7XG4gICAgICBmdW5jdGlvbiBhdHRyX3N0cihhKSB7cmV0dXJuICcgJyArIGEubm9kZU5hbWUgKyAnPVwiJyArIGVzY2FwZShhLnZhbHVlKS5yZXBsYWNlKCdcIicsICcmcXVvdDsnKSArICdcIic7fVxuICAgICAgcmVzdWx0ICs9ICc8JyArIHRhZyhub2RlKSArIEFycmF5UHJvdG8ubWFwLmNhbGwobm9kZS5hdHRyaWJ1dGVzLCBhdHRyX3N0cikuam9pbignJykgKyAnPic7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvc2Uobm9kZSkge1xuICAgICAgcmVzdWx0ICs9ICc8LycgKyB0YWcobm9kZSkgKyAnPic7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVuZGVyKGV2ZW50KSB7XG4gICAgICAoZXZlbnQuZXZlbnQgPT09ICdzdGFydCcgPyBvcGVuIDogY2xvc2UpKGV2ZW50Lm5vZGUpO1xuICAgIH1cblxuICAgIHdoaWxlIChvcmlnaW5hbC5sZW5ndGggfHwgaGlnaGxpZ2h0ZWQubGVuZ3RoKSB7XG4gICAgICB2YXIgc3RyZWFtID0gc2VsZWN0U3RyZWFtKCk7XG4gICAgICByZXN1bHQgKz0gZXNjYXBlKHZhbHVlLnN1YnN0cmluZyhwcm9jZXNzZWQsIHN0cmVhbVswXS5vZmZzZXQpKTtcbiAgICAgIHByb2Nlc3NlZCA9IHN0cmVhbVswXS5vZmZzZXQ7XG4gICAgICBpZiAoc3RyZWFtID09PSBvcmlnaW5hbCkge1xuICAgICAgICAvKlxuICAgICAgICBPbiBhbnkgb3BlbmluZyBvciBjbG9zaW5nIHRhZyBvZiB0aGUgb3JpZ2luYWwgbWFya3VwIHdlIGZpcnN0IGNsb3NlXG4gICAgICAgIHRoZSBlbnRpcmUgaGlnaGxpZ2h0ZWQgbm9kZSBzdGFjaywgdGhlbiByZW5kZXIgdGhlIG9yaWdpbmFsIHRhZyBhbG9uZ1xuICAgICAgICB3aXRoIGFsbCB0aGUgZm9sbG93aW5nIG9yaWdpbmFsIHRhZ3MgYXQgdGhlIHNhbWUgb2Zmc2V0IGFuZCB0aGVuXG4gICAgICAgIHJlb3BlbiBhbGwgdGhlIHRhZ3Mgb24gdGhlIGhpZ2hsaWdodGVkIHN0YWNrLlxuICAgICAgICAqL1xuICAgICAgICBub2RlU3RhY2sucmV2ZXJzZSgpLmZvckVhY2goY2xvc2UpO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgcmVuZGVyKHN0cmVhbS5zcGxpY2UoMCwgMSlbMF0pO1xuICAgICAgICAgIHN0cmVhbSA9IHNlbGVjdFN0cmVhbSgpO1xuICAgICAgICB9IHdoaWxlIChzdHJlYW0gPT09IG9yaWdpbmFsICYmIHN0cmVhbS5sZW5ndGggJiYgc3RyZWFtWzBdLm9mZnNldCA9PT0gcHJvY2Vzc2VkKTtcbiAgICAgICAgbm9kZVN0YWNrLnJldmVyc2UoKS5mb3JFYWNoKG9wZW4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN0cmVhbVswXS5ldmVudCA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICAgIG5vZGVTdGFjay5wdXNoKHN0cmVhbVswXS5ub2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlU3RhY2sucG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVuZGVyKHN0cmVhbS5zcGxpY2UoMCwgMSlbMF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0ICsgZXNjYXBlKHZhbHVlLnN1YnN0cihwcm9jZXNzZWQpKTtcbiAgfVxuXG4gIC8qIEluaXRpYWxpemF0aW9uICovXG5cbiAgZnVuY3Rpb24gZXhwYW5kX21vZGUobW9kZSkge1xuICAgIGlmIChtb2RlLnZhcmlhbnRzICYmICFtb2RlLmNhY2hlZF92YXJpYW50cykge1xuICAgICAgbW9kZS5jYWNoZWRfdmFyaWFudHMgPSBtb2RlLnZhcmlhbnRzLm1hcChmdW5jdGlvbih2YXJpYW50KSB7XG4gICAgICAgIHJldHVybiBpbmhlcml0KG1vZGUsIHt2YXJpYW50czogbnVsbH0sIHZhcmlhbnQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBtb2RlLmNhY2hlZF92YXJpYW50cyB8fCAobW9kZS5lbmRzV2l0aFBhcmVudCAmJiBbaW5oZXJpdChtb2RlKV0pIHx8IFttb2RlXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXBpbGVMYW5ndWFnZShsYW5ndWFnZSkge1xuXG4gICAgZnVuY3Rpb24gcmVTdHIocmUpIHtcbiAgICAgICAgcmV0dXJuIChyZSAmJiByZS5zb3VyY2UpIHx8IHJlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxhbmdSZSh2YWx1ZSwgZ2xvYmFsKSB7XG4gICAgICByZXR1cm4gbmV3IFJlZ0V4cChcbiAgICAgICAgcmVTdHIodmFsdWUpLFxuICAgICAgICAnbScgKyAobGFuZ3VhZ2UuY2FzZV9pbnNlbnNpdGl2ZSA/ICdpJyA6ICcnKSArIChnbG9iYWwgPyAnZycgOiAnJylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcGlsZU1vZGUobW9kZSwgcGFyZW50KSB7XG4gICAgICBpZiAobW9kZS5jb21waWxlZClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgbW9kZS5jb21waWxlZCA9IHRydWU7XG5cbiAgICAgIG1vZGUua2V5d29yZHMgPSBtb2RlLmtleXdvcmRzIHx8IG1vZGUuYmVnaW5LZXl3b3JkcztcbiAgICAgIGlmIChtb2RlLmtleXdvcmRzKSB7XG4gICAgICAgIHZhciBjb21waWxlZF9rZXl3b3JkcyA9IHt9O1xuXG4gICAgICAgIHZhciBmbGF0dGVuID0gZnVuY3Rpb24oY2xhc3NOYW1lLCBzdHIpIHtcbiAgICAgICAgICBpZiAobGFuZ3VhZ2UuY2FzZV9pbnNlbnNpdGl2ZSkge1xuICAgICAgICAgICAgc3RyID0gc3RyLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0ci5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24oa3cpIHtcbiAgICAgICAgICAgIHZhciBwYWlyID0ga3cuc3BsaXQoJ3wnKTtcbiAgICAgICAgICAgIGNvbXBpbGVkX2tleXdvcmRzW3BhaXJbMF1dID0gW2NsYXNzTmFtZSwgcGFpclsxXSA/IE51bWJlcihwYWlyWzFdKSA6IDFdO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0eXBlb2YgbW9kZS5rZXl3b3JkcyA9PT0gJ3N0cmluZycpIHsgLy8gc3RyaW5nXG4gICAgICAgICAgZmxhdHRlbigna2V5d29yZCcsIG1vZGUua2V5d29yZHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9iamVjdEtleXMobW9kZS5rZXl3b3JkcykuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICBmbGF0dGVuKGNsYXNzTmFtZSwgbW9kZS5rZXl3b3Jkc1tjbGFzc05hbWVdKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBtb2RlLmtleXdvcmRzID0gY29tcGlsZWRfa2V5d29yZHM7XG4gICAgICB9XG4gICAgICBtb2RlLmxleGVtZXNSZSA9IGxhbmdSZShtb2RlLmxleGVtZXMgfHwgL1xcdysvLCB0cnVlKTtcblxuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICBpZiAobW9kZS5iZWdpbktleXdvcmRzKSB7XG4gICAgICAgICAgbW9kZS5iZWdpbiA9ICdcXFxcYignICsgbW9kZS5iZWdpbktleXdvcmRzLnNwbGl0KCcgJykuam9pbignfCcpICsgJylcXFxcYic7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtb2RlLmJlZ2luKVxuICAgICAgICAgIG1vZGUuYmVnaW4gPSAvXFxCfFxcYi87XG4gICAgICAgIG1vZGUuYmVnaW5SZSA9IGxhbmdSZShtb2RlLmJlZ2luKTtcbiAgICAgICAgaWYgKCFtb2RlLmVuZCAmJiAhbW9kZS5lbmRzV2l0aFBhcmVudClcbiAgICAgICAgICBtb2RlLmVuZCA9IC9cXEJ8XFxiLztcbiAgICAgICAgaWYgKG1vZGUuZW5kKVxuICAgICAgICAgIG1vZGUuZW5kUmUgPSBsYW5nUmUobW9kZS5lbmQpO1xuICAgICAgICBtb2RlLnRlcm1pbmF0b3JfZW5kID0gcmVTdHIobW9kZS5lbmQpIHx8ICcnO1xuICAgICAgICBpZiAobW9kZS5lbmRzV2l0aFBhcmVudCAmJiBwYXJlbnQudGVybWluYXRvcl9lbmQpXG4gICAgICAgICAgbW9kZS50ZXJtaW5hdG9yX2VuZCArPSAobW9kZS5lbmQgPyAnfCcgOiAnJykgKyBwYXJlbnQudGVybWluYXRvcl9lbmQ7XG4gICAgICB9XG4gICAgICBpZiAobW9kZS5pbGxlZ2FsKVxuICAgICAgICBtb2RlLmlsbGVnYWxSZSA9IGxhbmdSZShtb2RlLmlsbGVnYWwpO1xuICAgICAgaWYgKG1vZGUucmVsZXZhbmNlID09IG51bGwpXG4gICAgICAgIG1vZGUucmVsZXZhbmNlID0gMTtcbiAgICAgIGlmICghbW9kZS5jb250YWlucykge1xuICAgICAgICBtb2RlLmNvbnRhaW5zID0gW107XG4gICAgICB9XG4gICAgICBtb2RlLmNvbnRhaW5zID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgbW9kZS5jb250YWlucy5tYXAoZnVuY3Rpb24oYykge1xuICAgICAgICByZXR1cm4gZXhwYW5kX21vZGUoYyA9PT0gJ3NlbGYnID8gbW9kZSA6IGMpXG4gICAgICB9KSk7XG4gICAgICBtb2RlLmNvbnRhaW5zLmZvckVhY2goZnVuY3Rpb24oYykge2NvbXBpbGVNb2RlKGMsIG1vZGUpO30pO1xuXG4gICAgICBpZiAobW9kZS5zdGFydHMpIHtcbiAgICAgICAgY29tcGlsZU1vZGUobW9kZS5zdGFydHMsIHBhcmVudCk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0ZXJtaW5hdG9ycyA9XG4gICAgICAgIG1vZGUuY29udGFpbnMubWFwKGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICByZXR1cm4gYy5iZWdpbktleXdvcmRzID8gJ1xcXFwuPygnICsgYy5iZWdpbiArICcpXFxcXC4/JyA6IGMuYmVnaW47XG4gICAgICAgIH0pXG4gICAgICAgIC5jb25jYXQoW21vZGUudGVybWluYXRvcl9lbmQsIG1vZGUuaWxsZWdhbF0pXG4gICAgICAgIC5tYXAocmVTdHIpXG4gICAgICAgIC5maWx0ZXIoQm9vbGVhbik7XG4gICAgICBtb2RlLnRlcm1pbmF0b3JzID0gdGVybWluYXRvcnMubGVuZ3RoID8gbGFuZ1JlKHRlcm1pbmF0b3JzLmpvaW4oJ3wnKSwgdHJ1ZSkgOiB7ZXhlYzogZnVuY3Rpb24oLypzKi8pIHtyZXR1cm4gbnVsbDt9fTtcbiAgICB9XG5cbiAgICBjb21waWxlTW9kZShsYW5ndWFnZSk7XG4gIH1cblxuICAvKlxuICBDb3JlIGhpZ2hsaWdodGluZyBmdW5jdGlvbi4gQWNjZXB0cyBhIGxhbmd1YWdlIG5hbWUsIG9yIGFuIGFsaWFzLCBhbmQgYVxuICBzdHJpbmcgd2l0aCB0aGUgY29kZSB0byBoaWdobGlnaHQuIFJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZ1xuICBwcm9wZXJ0aWVzOlxuXG4gIC0gcmVsZXZhbmNlIChpbnQpXG4gIC0gdmFsdWUgKGFuIEhUTUwgc3RyaW5nIHdpdGggaGlnaGxpZ2h0aW5nIG1hcmt1cClcblxuICAqL1xuICBmdW5jdGlvbiBoaWdobGlnaHQobmFtZSwgdmFsdWUsIGlnbm9yZV9pbGxlZ2FscywgY29udGludWF0aW9uKSB7XG5cbiAgICBmdW5jdGlvbiBzdWJNb2RlKGxleGVtZSwgbW9kZSkge1xuICAgICAgdmFyIGksIGxlbmd0aDtcblxuICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gbW9kZS5jb250YWlucy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodGVzdFJlKG1vZGUuY29udGFpbnNbaV0uYmVnaW5SZSwgbGV4ZW1lKSkge1xuICAgICAgICAgIHJldHVybiBtb2RlLmNvbnRhaW5zW2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW5kT2ZNb2RlKG1vZGUsIGxleGVtZSkge1xuICAgICAgaWYgKHRlc3RSZShtb2RlLmVuZFJlLCBsZXhlbWUpKSB7XG4gICAgICAgIHdoaWxlIChtb2RlLmVuZHNQYXJlbnQgJiYgbW9kZS5wYXJlbnQpIHtcbiAgICAgICAgICBtb2RlID0gbW9kZS5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1vZGU7XG4gICAgICB9XG4gICAgICBpZiAobW9kZS5lbmRzV2l0aFBhcmVudCkge1xuICAgICAgICByZXR1cm4gZW5kT2ZNb2RlKG1vZGUucGFyZW50LCBsZXhlbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSWxsZWdhbChsZXhlbWUsIG1vZGUpIHtcbiAgICAgIHJldHVybiAhaWdub3JlX2lsbGVnYWxzICYmIHRlc3RSZShtb2RlLmlsbGVnYWxSZSwgbGV4ZW1lKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrZXl3b3JkTWF0Y2gobW9kZSwgbWF0Y2gpIHtcbiAgICAgIHZhciBtYXRjaF9zdHIgPSBsYW5ndWFnZS5jYXNlX2luc2Vuc2l0aXZlID8gbWF0Y2hbMF0udG9Mb3dlckNhc2UoKSA6IG1hdGNoWzBdO1xuICAgICAgcmV0dXJuIG1vZGUua2V5d29yZHMuaGFzT3duUHJvcGVydHkobWF0Y2hfc3RyKSAmJiBtb2RlLmtleXdvcmRzW21hdGNoX3N0cl07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYnVpbGRTcGFuKGNsYXNzbmFtZSwgaW5zaWRlU3BhbiwgbGVhdmVPcGVuLCBub1ByZWZpeCkge1xuICAgICAgdmFyIGNsYXNzUHJlZml4ID0gbm9QcmVmaXggPyAnJyA6IG9wdGlvbnMuY2xhc3NQcmVmaXgsXG4gICAgICAgICAgb3BlblNwYW4gICAgPSAnPHNwYW4gY2xhc3M9XCInICsgY2xhc3NQcmVmaXgsXG4gICAgICAgICAgY2xvc2VTcGFuICAgPSBsZWF2ZU9wZW4gPyAnJyA6IHNwYW5FbmRUYWdcblxuICAgICAgb3BlblNwYW4gKz0gY2xhc3NuYW1lICsgJ1wiPic7XG5cbiAgICAgIHJldHVybiBvcGVuU3BhbiArIGluc2lkZVNwYW4gKyBjbG9zZVNwYW47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc0tleXdvcmRzKCkge1xuICAgICAgdmFyIGtleXdvcmRfbWF0Y2gsIGxhc3RfaW5kZXgsIG1hdGNoLCByZXN1bHQ7XG5cbiAgICAgIGlmICghdG9wLmtleXdvcmRzKVxuICAgICAgICByZXR1cm4gZXNjYXBlKG1vZGVfYnVmZmVyKTtcblxuICAgICAgcmVzdWx0ID0gJyc7XG4gICAgICBsYXN0X2luZGV4ID0gMDtcbiAgICAgIHRvcC5sZXhlbWVzUmUubGFzdEluZGV4ID0gMDtcbiAgICAgIG1hdGNoID0gdG9wLmxleGVtZXNSZS5leGVjKG1vZGVfYnVmZmVyKTtcblxuICAgICAgd2hpbGUgKG1hdGNoKSB7XG4gICAgICAgIHJlc3VsdCArPSBlc2NhcGUobW9kZV9idWZmZXIuc3Vic3RyaW5nKGxhc3RfaW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgIGtleXdvcmRfbWF0Y2ggPSBrZXl3b3JkTWF0Y2godG9wLCBtYXRjaCk7XG4gICAgICAgIGlmIChrZXl3b3JkX21hdGNoKSB7XG4gICAgICAgICAgcmVsZXZhbmNlICs9IGtleXdvcmRfbWF0Y2hbMV07XG4gICAgICAgICAgcmVzdWx0ICs9IGJ1aWxkU3BhbihrZXl3b3JkX21hdGNoWzBdLCBlc2NhcGUobWF0Y2hbMF0pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgKz0gZXNjYXBlKG1hdGNoWzBdKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0X2luZGV4ID0gdG9wLmxleGVtZXNSZS5sYXN0SW5kZXg7XG4gICAgICAgIG1hdGNoID0gdG9wLmxleGVtZXNSZS5leGVjKG1vZGVfYnVmZmVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQgKyBlc2NhcGUobW9kZV9idWZmZXIuc3Vic3RyKGxhc3RfaW5kZXgpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzU3ViTGFuZ3VhZ2UoKSB7XG4gICAgICB2YXIgZXhwbGljaXQgPSB0eXBlb2YgdG9wLnN1Ykxhbmd1YWdlID09PSAnc3RyaW5nJztcbiAgICAgIGlmIChleHBsaWNpdCAmJiAhbGFuZ3VhZ2VzW3RvcC5zdWJMYW5ndWFnZV0pIHtcbiAgICAgICAgcmV0dXJuIGVzY2FwZShtb2RlX2J1ZmZlcik7XG4gICAgICB9XG5cbiAgICAgIHZhciByZXN1bHQgPSBleHBsaWNpdCA/XG4gICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0KHRvcC5zdWJMYW5ndWFnZSwgbW9kZV9idWZmZXIsIHRydWUsIGNvbnRpbnVhdGlvbnNbdG9wLnN1Ykxhbmd1YWdlXSkgOlxuICAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodEF1dG8obW9kZV9idWZmZXIsIHRvcC5zdWJMYW5ndWFnZS5sZW5ndGggPyB0b3Auc3ViTGFuZ3VhZ2UgOiB1bmRlZmluZWQpO1xuXG4gICAgICAvLyBDb3VudGluZyBlbWJlZGRlZCBsYW5ndWFnZSBzY29yZSB0b3dhcmRzIHRoZSBob3N0IGxhbmd1YWdlIG1heSBiZSBkaXNhYmxlZFxuICAgICAgLy8gd2l0aCB6ZXJvaW5nIHRoZSBjb250YWluaW5nIG1vZGUgcmVsZXZhbmNlLiBVc2VjYXNlIGluIHBvaW50IGlzIE1hcmtkb3duIHRoYXRcbiAgICAgIC8vIGFsbG93cyBYTUwgZXZlcnl3aGVyZSBhbmQgbWFrZXMgZXZlcnkgWE1MIHNuaXBwZXQgdG8gaGF2ZSBhIG11Y2ggbGFyZ2VyIE1hcmtkb3duXG4gICAgICAvLyBzY29yZS5cbiAgICAgIGlmICh0b3AucmVsZXZhbmNlID4gMCkge1xuICAgICAgICByZWxldmFuY2UgKz0gcmVzdWx0LnJlbGV2YW5jZTtcbiAgICAgIH1cbiAgICAgIGlmIChleHBsaWNpdCkge1xuICAgICAgICBjb250aW51YXRpb25zW3RvcC5zdWJMYW5ndWFnZV0gPSByZXN1bHQudG9wO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJ1aWxkU3BhbihyZXN1bHQubGFuZ3VhZ2UsIHJlc3VsdC52YWx1ZSwgZmFsc2UsIHRydWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NCdWZmZXIoKSB7XG4gICAgICByZXN1bHQgKz0gKHRvcC5zdWJMYW5ndWFnZSAhPSBudWxsID8gcHJvY2Vzc1N1Ykxhbmd1YWdlKCkgOiBwcm9jZXNzS2V5d29yZHMoKSk7XG4gICAgICBtb2RlX2J1ZmZlciA9ICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0YXJ0TmV3TW9kZShtb2RlKSB7XG4gICAgICByZXN1bHQgKz0gbW9kZS5jbGFzc05hbWU/IGJ1aWxkU3Bhbihtb2RlLmNsYXNzTmFtZSwgJycsIHRydWUpOiAnJztcbiAgICAgIHRvcCA9IE9iamVjdC5jcmVhdGUobW9kZSwge3BhcmVudDoge3ZhbHVlOiB0b3B9fSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc0xleGVtZShidWZmZXIsIGxleGVtZSkge1xuXG4gICAgICBtb2RlX2J1ZmZlciArPSBidWZmZXI7XG5cbiAgICAgIGlmIChsZXhlbWUgPT0gbnVsbCkge1xuICAgICAgICBwcm9jZXNzQnVmZmVyKCk7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV3X21vZGUgPSBzdWJNb2RlKGxleGVtZSwgdG9wKTtcbiAgICAgIGlmIChuZXdfbW9kZSkge1xuICAgICAgICBpZiAobmV3X21vZGUuc2tpcCkge1xuICAgICAgICAgIG1vZGVfYnVmZmVyICs9IGxleGVtZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobmV3X21vZGUuZXhjbHVkZUJlZ2luKSB7XG4gICAgICAgICAgICBtb2RlX2J1ZmZlciArPSBsZXhlbWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByb2Nlc3NCdWZmZXIoKTtcbiAgICAgICAgICBpZiAoIW5ld19tb2RlLnJldHVybkJlZ2luICYmICFuZXdfbW9kZS5leGNsdWRlQmVnaW4pIHtcbiAgICAgICAgICAgIG1vZGVfYnVmZmVyID0gbGV4ZW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdGFydE5ld01vZGUobmV3X21vZGUsIGxleGVtZSk7XG4gICAgICAgIHJldHVybiBuZXdfbW9kZS5yZXR1cm5CZWdpbiA/IDAgOiBsZXhlbWUubGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICB2YXIgZW5kX21vZGUgPSBlbmRPZk1vZGUodG9wLCBsZXhlbWUpO1xuICAgICAgaWYgKGVuZF9tb2RlKSB7XG4gICAgICAgIHZhciBvcmlnaW4gPSB0b3A7XG4gICAgICAgIGlmIChvcmlnaW4uc2tpcCkge1xuICAgICAgICAgIG1vZGVfYnVmZmVyICs9IGxleGVtZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIShvcmlnaW4ucmV0dXJuRW5kIHx8IG9yaWdpbi5leGNsdWRlRW5kKSkge1xuICAgICAgICAgICAgbW9kZV9idWZmZXIgKz0gbGV4ZW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwcm9jZXNzQnVmZmVyKCk7XG4gICAgICAgICAgaWYgKG9yaWdpbi5leGNsdWRlRW5kKSB7XG4gICAgICAgICAgICBtb2RlX2J1ZmZlciA9IGxleGVtZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmICh0b3AuY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gc3BhbkVuZFRhZztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCF0b3Auc2tpcCkge1xuICAgICAgICAgICAgcmVsZXZhbmNlICs9IHRvcC5yZWxldmFuY2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRvcCA9IHRvcC5wYXJlbnQ7XG4gICAgICAgIH0gd2hpbGUgKHRvcCAhPT0gZW5kX21vZGUucGFyZW50KTtcbiAgICAgICAgaWYgKGVuZF9tb2RlLnN0YXJ0cykge1xuICAgICAgICAgIHN0YXJ0TmV3TW9kZShlbmRfbW9kZS5zdGFydHMsICcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3JpZ2luLnJldHVybkVuZCA/IDAgOiBsZXhlbWUubGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNJbGxlZ2FsKGxleGVtZSwgdG9wKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbGxlZ2FsIGxleGVtZSBcIicgKyBsZXhlbWUgKyAnXCIgZm9yIG1vZGUgXCInICsgKHRvcC5jbGFzc05hbWUgfHwgJzx1bm5hbWVkPicpICsgJ1wiJyk7XG5cbiAgICAgIC8qXG4gICAgICBQYXJzZXIgc2hvdWxkIG5vdCByZWFjaCB0aGlzIHBvaW50IGFzIGFsbCB0eXBlcyBvZiBsZXhlbWVzIHNob3VsZCBiZSBjYXVnaHRcbiAgICAgIGVhcmxpZXIsIGJ1dCBpZiBpdCBkb2VzIGR1ZSB0byBzb21lIGJ1ZyBtYWtlIHN1cmUgaXQgYWR2YW5jZXMgYXQgbGVhc3Qgb25lXG4gICAgICBjaGFyYWN0ZXIgZm9yd2FyZCB0byBwcmV2ZW50IGluZmluaXRlIGxvb3BpbmcuXG4gICAgICAqL1xuICAgICAgbW9kZV9idWZmZXIgKz0gbGV4ZW1lO1xuICAgICAgcmV0dXJuIGxleGVtZS5sZW5ndGggfHwgMTtcbiAgICB9XG5cbiAgICB2YXIgbGFuZ3VhZ2UgPSBnZXRMYW5ndWFnZShuYW1lKTtcbiAgICBpZiAoIWxhbmd1YWdlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbGFuZ3VhZ2U6IFwiJyArIG5hbWUgKyAnXCInKTtcbiAgICB9XG5cbiAgICBjb21waWxlTGFuZ3VhZ2UobGFuZ3VhZ2UpO1xuICAgIHZhciB0b3AgPSBjb250aW51YXRpb24gfHwgbGFuZ3VhZ2U7XG4gICAgdmFyIGNvbnRpbnVhdGlvbnMgPSB7fTsgLy8ga2VlcCBjb250aW51YXRpb25zIGZvciBzdWItbGFuZ3VhZ2VzXG4gICAgdmFyIHJlc3VsdCA9ICcnLCBjdXJyZW50O1xuICAgIGZvcihjdXJyZW50ID0gdG9wOyBjdXJyZW50ICE9PSBsYW5ndWFnZTsgY3VycmVudCA9IGN1cnJlbnQucGFyZW50KSB7XG4gICAgICBpZiAoY3VycmVudC5jbGFzc05hbWUpIHtcbiAgICAgICAgcmVzdWx0ID0gYnVpbGRTcGFuKGN1cnJlbnQuY2xhc3NOYW1lLCAnJywgdHJ1ZSkgKyByZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBtb2RlX2J1ZmZlciA9ICcnO1xuICAgIHZhciByZWxldmFuY2UgPSAwO1xuICAgIHRyeSB7XG4gICAgICB2YXIgbWF0Y2gsIGNvdW50LCBpbmRleCA9IDA7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB0b3AudGVybWluYXRvcnMubGFzdEluZGV4ID0gaW5kZXg7XG4gICAgICAgIG1hdGNoID0gdG9wLnRlcm1pbmF0b3JzLmV4ZWModmFsdWUpO1xuICAgICAgICBpZiAoIW1hdGNoKVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjb3VudCA9IHByb2Nlc3NMZXhlbWUodmFsdWUuc3Vic3RyaW5nKGluZGV4LCBtYXRjaC5pbmRleCksIG1hdGNoWzBdKTtcbiAgICAgICAgaW5kZXggPSBtYXRjaC5pbmRleCArIGNvdW50O1xuICAgICAgfVxuICAgICAgcHJvY2Vzc0xleGVtZSh2YWx1ZS5zdWJzdHIoaW5kZXgpKTtcbiAgICAgIGZvcihjdXJyZW50ID0gdG9wOyBjdXJyZW50LnBhcmVudDsgY3VycmVudCA9IGN1cnJlbnQucGFyZW50KSB7IC8vIGNsb3NlIGRhbmdsaW5nIG1vZGVzXG4gICAgICAgIGlmIChjdXJyZW50LmNsYXNzTmFtZSkge1xuICAgICAgICAgIHJlc3VsdCArPSBzcGFuRW5kVGFnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZWxldmFuY2U6IHJlbGV2YW5jZSxcbiAgICAgICAgdmFsdWU6IHJlc3VsdCxcbiAgICAgICAgbGFuZ3VhZ2U6IG5hbWUsXG4gICAgICAgIHRvcDogdG9wXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLm1lc3NhZ2UgJiYgZS5tZXNzYWdlLmluZGV4T2YoJ0lsbGVnYWwnKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICByZWxldmFuY2U6IDAsXG4gICAgICAgICAgdmFsdWU6IGVzY2FwZSh2YWx1ZSlcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLypcbiAgSGlnaGxpZ2h0aW5nIHdpdGggbGFuZ3VhZ2UgZGV0ZWN0aW9uLiBBY2NlcHRzIGEgc3RyaW5nIHdpdGggdGhlIGNvZGUgdG9cbiAgaGlnaGxpZ2h0LiBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcblxuICAtIGxhbmd1YWdlIChkZXRlY3RlZCBsYW5ndWFnZSlcbiAgLSByZWxldmFuY2UgKGludClcbiAgLSB2YWx1ZSAoYW4gSFRNTCBzdHJpbmcgd2l0aCBoaWdobGlnaHRpbmcgbWFya3VwKVxuICAtIHNlY29uZF9iZXN0IChvYmplY3Qgd2l0aCB0aGUgc2FtZSBzdHJ1Y3R1cmUgZm9yIHNlY29uZC1iZXN0IGhldXJpc3RpY2FsbHlcbiAgICBkZXRlY3RlZCBsYW5ndWFnZSwgbWF5IGJlIGFic2VudClcblxuICAqL1xuICBmdW5jdGlvbiBoaWdobGlnaHRBdXRvKHRleHQsIGxhbmd1YWdlU3Vic2V0KSB7XG4gICAgbGFuZ3VhZ2VTdWJzZXQgPSBsYW5ndWFnZVN1YnNldCB8fCBvcHRpb25zLmxhbmd1YWdlcyB8fCBvYmplY3RLZXlzKGxhbmd1YWdlcyk7XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgIHJlbGV2YW5jZTogMCxcbiAgICAgIHZhbHVlOiBlc2NhcGUodGV4dClcbiAgICB9O1xuICAgIHZhciBzZWNvbmRfYmVzdCA9IHJlc3VsdDtcbiAgICBsYW5ndWFnZVN1YnNldC5maWx0ZXIoZ2V0TGFuZ3VhZ2UpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBoaWdobGlnaHQobmFtZSwgdGV4dCwgZmFsc2UpO1xuICAgICAgY3VycmVudC5sYW5ndWFnZSA9IG5hbWU7XG4gICAgICBpZiAoY3VycmVudC5yZWxldmFuY2UgPiBzZWNvbmRfYmVzdC5yZWxldmFuY2UpIHtcbiAgICAgICAgc2Vjb25kX2Jlc3QgPSBjdXJyZW50O1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnQucmVsZXZhbmNlID4gcmVzdWx0LnJlbGV2YW5jZSkge1xuICAgICAgICBzZWNvbmRfYmVzdCA9IHJlc3VsdDtcbiAgICAgICAgcmVzdWx0ID0gY3VycmVudDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc2Vjb25kX2Jlc3QubGFuZ3VhZ2UpIHtcbiAgICAgIHJlc3VsdC5zZWNvbmRfYmVzdCA9IHNlY29uZF9iZXN0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLypcbiAgUG9zdC1wcm9jZXNzaW5nIG9mIHRoZSBoaWdobGlnaHRlZCBtYXJrdXA6XG5cbiAgLSByZXBsYWNlIFRBQnMgd2l0aCBzb21ldGhpbmcgbW9yZSB1c2VmdWxcbiAgLSByZXBsYWNlIHJlYWwgbGluZS1icmVha3Mgd2l0aCAnPGJyPicgZm9yIG5vbi1wcmUgY29udGFpbmVyc1xuXG4gICovXG4gIGZ1bmN0aW9uIGZpeE1hcmt1cCh2YWx1ZSkge1xuICAgIHJldHVybiAhKG9wdGlvbnMudGFiUmVwbGFjZSB8fCBvcHRpb25zLnVzZUJSKVxuICAgICAgPyB2YWx1ZVxuICAgICAgOiB2YWx1ZS5yZXBsYWNlKGZpeE1hcmt1cFJlLCBmdW5jdGlvbihtYXRjaCwgcDEpIHtcbiAgICAgICAgICBpZiAob3B0aW9ucy51c2VCUiAmJiBtYXRjaCA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgIHJldHVybiAnPGJyPic7XG4gICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnRhYlJlcGxhY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBwMS5yZXBsYWNlKC9cXHQvZywgb3B0aW9ucy50YWJSZXBsYWNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZENsYXNzTmFtZShwcmV2Q2xhc3NOYW1lLCBjdXJyZW50TGFuZywgcmVzdWx0TGFuZykge1xuICAgIHZhciBsYW5ndWFnZSA9IGN1cnJlbnRMYW5nID8gYWxpYXNlc1tjdXJyZW50TGFuZ10gOiByZXN1bHRMYW5nLFxuICAgICAgICByZXN1bHQgICA9IFtwcmV2Q2xhc3NOYW1lLnRyaW0oKV07XG5cbiAgICBpZiAoIXByZXZDbGFzc05hbWUubWF0Y2goL1xcYmhsanNcXGIvKSkge1xuICAgICAgcmVzdWx0LnB1c2goJ2hsanMnKTtcbiAgICB9XG5cbiAgICBpZiAocHJldkNsYXNzTmFtZS5pbmRleE9mKGxhbmd1YWdlKSA9PT0gLTEpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGxhbmd1YWdlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0LmpvaW4oJyAnKS50cmltKCk7XG4gIH1cblxuICAvKlxuICBBcHBsaWVzIGhpZ2hsaWdodGluZyB0byBhIERPTSBub2RlIGNvbnRhaW5pbmcgY29kZS4gQWNjZXB0cyBhIERPTSBub2RlIGFuZFxuICB0d28gb3B0aW9uYWwgcGFyYW1ldGVycyBmb3IgZml4TWFya3VwLlxuICAqL1xuICBmdW5jdGlvbiBoaWdobGlnaHRCbG9jayhibG9jaykge1xuICAgIHZhciBub2RlLCBvcmlnaW5hbFN0cmVhbSwgcmVzdWx0LCByZXN1bHROb2RlLCB0ZXh0O1xuICAgIHZhciBsYW5ndWFnZSA9IGJsb2NrTGFuZ3VhZ2UoYmxvY2spO1xuXG4gICAgaWYgKGlzTm90SGlnaGxpZ2h0ZWQobGFuZ3VhZ2UpKVxuICAgICAgICByZXR1cm47XG5cbiAgICBpZiAob3B0aW9ucy51c2VCUikge1xuICAgICAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcsICdkaXYnKTtcbiAgICAgIG5vZGUuaW5uZXJIVE1MID0gYmxvY2suaW5uZXJIVE1MLnJlcGxhY2UoL1xcbi9nLCAnJykucmVwbGFjZSgvPGJyWyBcXC9dKj4vZywgJ1xcbicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlID0gYmxvY2s7XG4gICAgfVxuICAgIHRleHQgPSBub2RlLnRleHRDb250ZW50O1xuICAgIHJlc3VsdCA9IGxhbmd1YWdlID8gaGlnaGxpZ2h0KGxhbmd1YWdlLCB0ZXh0LCB0cnVlKSA6IGhpZ2hsaWdodEF1dG8odGV4dCk7XG5cbiAgICBvcmlnaW5hbFN0cmVhbSA9IG5vZGVTdHJlYW0obm9kZSk7XG4gICAgaWYgKG9yaWdpbmFsU3RyZWFtLmxlbmd0aCkge1xuICAgICAgcmVzdWx0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcsICdkaXYnKTtcbiAgICAgIHJlc3VsdE5vZGUuaW5uZXJIVE1MID0gcmVzdWx0LnZhbHVlO1xuICAgICAgcmVzdWx0LnZhbHVlID0gbWVyZ2VTdHJlYW1zKG9yaWdpbmFsU3RyZWFtLCBub2RlU3RyZWFtKHJlc3VsdE5vZGUpLCB0ZXh0KTtcbiAgICB9XG4gICAgcmVzdWx0LnZhbHVlID0gZml4TWFya3VwKHJlc3VsdC52YWx1ZSk7XG5cbiAgICBibG9jay5pbm5lckhUTUwgPSByZXN1bHQudmFsdWU7XG4gICAgYmxvY2suY2xhc3NOYW1lID0gYnVpbGRDbGFzc05hbWUoYmxvY2suY2xhc3NOYW1lLCBsYW5ndWFnZSwgcmVzdWx0Lmxhbmd1YWdlKTtcbiAgICBibG9jay5yZXN1bHQgPSB7XG4gICAgICBsYW5ndWFnZTogcmVzdWx0Lmxhbmd1YWdlLFxuICAgICAgcmU6IHJlc3VsdC5yZWxldmFuY2VcbiAgICB9O1xuICAgIGlmIChyZXN1bHQuc2Vjb25kX2Jlc3QpIHtcbiAgICAgIGJsb2NrLnNlY29uZF9iZXN0ID0ge1xuICAgICAgICBsYW5ndWFnZTogcmVzdWx0LnNlY29uZF9iZXN0Lmxhbmd1YWdlLFxuICAgICAgICByZTogcmVzdWx0LnNlY29uZF9iZXN0LnJlbGV2YW5jZVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvKlxuICBVcGRhdGVzIGhpZ2hsaWdodC5qcyBnbG9iYWwgb3B0aW9ucyB3aXRoIHZhbHVlcyBwYXNzZWQgaW4gdGhlIGZvcm0gb2YgYW4gb2JqZWN0LlxuICAqL1xuICBmdW5jdGlvbiBjb25maWd1cmUodXNlcl9vcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IGluaGVyaXQob3B0aW9ucywgdXNlcl9vcHRpb25zKTtcbiAgfVxuXG4gIC8qXG4gIEFwcGxpZXMgaGlnaGxpZ2h0aW5nIHRvIGFsbCA8cHJlPjxjb2RlPi4uPC9jb2RlPjwvcHJlPiBibG9ja3Mgb24gYSBwYWdlLlxuICAqL1xuICBmdW5jdGlvbiBpbml0SGlnaGxpZ2h0aW5nKCkge1xuICAgIGlmIChpbml0SGlnaGxpZ2h0aW5nLmNhbGxlZClcbiAgICAgIHJldHVybjtcbiAgICBpbml0SGlnaGxpZ2h0aW5nLmNhbGxlZCA9IHRydWU7XG5cbiAgICB2YXIgYmxvY2tzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgncHJlIGNvZGUnKTtcbiAgICBBcnJheVByb3RvLmZvckVhY2guY2FsbChibG9ja3MsIGhpZ2hsaWdodEJsb2NrKTtcbiAgfVxuXG4gIC8qXG4gIEF0dGFjaGVzIGhpZ2hsaWdodGluZyB0byB0aGUgcGFnZSBsb2FkIGV2ZW50LlxuICAqL1xuICBmdW5jdGlvbiBpbml0SGlnaGxpZ2h0aW5nT25Mb2FkKCkge1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBpbml0SGlnaGxpZ2h0aW5nLCBmYWxzZSk7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGluaXRIaWdobGlnaHRpbmcsIGZhbHNlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyTGFuZ3VhZ2UobmFtZSwgbGFuZ3VhZ2UpIHtcbiAgICB2YXIgbGFuZyA9IGxhbmd1YWdlc1tuYW1lXSA9IGxhbmd1YWdlKGhsanMpO1xuICAgIGlmIChsYW5nLmFsaWFzZXMpIHtcbiAgICAgIGxhbmcuYWxpYXNlcy5mb3JFYWNoKGZ1bmN0aW9uKGFsaWFzKSB7YWxpYXNlc1thbGlhc10gPSBuYW1lO30pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RMYW5ndWFnZXMoKSB7XG4gICAgcmV0dXJuIG9iamVjdEtleXMobGFuZ3VhZ2VzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldExhbmd1YWdlKG5hbWUpIHtcbiAgICBuYW1lID0gKG5hbWUgfHwgJycpLnRvTG93ZXJDYXNlKCk7XG4gICAgcmV0dXJuIGxhbmd1YWdlc1tuYW1lXSB8fCBsYW5ndWFnZXNbYWxpYXNlc1tuYW1lXV07XG4gIH1cblxuICAvKiBJbnRlcmZhY2UgZGVmaW5pdGlvbiAqL1xuXG4gIGhsanMuaGlnaGxpZ2h0ID0gaGlnaGxpZ2h0O1xuICBobGpzLmhpZ2hsaWdodEF1dG8gPSBoaWdobGlnaHRBdXRvO1xuICBobGpzLmZpeE1hcmt1cCA9IGZpeE1hcmt1cDtcbiAgaGxqcy5oaWdobGlnaHRCbG9jayA9IGhpZ2hsaWdodEJsb2NrO1xuICBobGpzLmNvbmZpZ3VyZSA9IGNvbmZpZ3VyZTtcbiAgaGxqcy5pbml0SGlnaGxpZ2h0aW5nID0gaW5pdEhpZ2hsaWdodGluZztcbiAgaGxqcy5pbml0SGlnaGxpZ2h0aW5nT25Mb2FkID0gaW5pdEhpZ2hsaWdodGluZ09uTG9hZDtcbiAgaGxqcy5yZWdpc3Rlckxhbmd1YWdlID0gcmVnaXN0ZXJMYW5ndWFnZTtcbiAgaGxqcy5saXN0TGFuZ3VhZ2VzID0gbGlzdExhbmd1YWdlcztcbiAgaGxqcy5nZXRMYW5ndWFnZSA9IGdldExhbmd1YWdlO1xuICBobGpzLmluaGVyaXQgPSBpbmhlcml0O1xuXG4gIC8vIENvbW1vbiByZWdleHBzXG4gIGhsanMuSURFTlRfUkUgPSAnW2EtekEtWl1cXFxcdyonO1xuICBobGpzLlVOREVSU0NPUkVfSURFTlRfUkUgPSAnW2EtekEtWl9dXFxcXHcqJztcbiAgaGxqcy5OVU1CRVJfUkUgPSAnXFxcXGJcXFxcZCsoXFxcXC5cXFxcZCspPyc7XG4gIGhsanMuQ19OVU1CRVJfUkUgPSAnKC0/KShcXFxcYjBbeFhdW2EtZkEtRjAtOV0rfChcXFxcYlxcXFxkKyhcXFxcLlxcXFxkKik/fFxcXFwuXFxcXGQrKShbZUVdWy0rXT9cXFxcZCspPyknOyAvLyAweC4uLiwgMC4uLiwgZGVjaW1hbCwgZmxvYXRcbiAgaGxqcy5CSU5BUllfTlVNQkVSX1JFID0gJ1xcXFxiKDBiWzAxXSspJzsgLy8gMGIuLi5cbiAgaGxqcy5SRV9TVEFSVEVSU19SRSA9ICchfCE9fCE9PXwlfCU9fCZ8JiZ8Jj18XFxcXCp8XFxcXCo9fFxcXFwrfFxcXFwrPXwsfC18LT18Lz18L3w6fDt8PDx8PDw9fDw9fDx8PT09fD09fD18Pj4+PXw+Pj18Pj18Pj4+fD4+fD58XFxcXD98XFxcXFt8XFxcXHt8XFxcXCh8XFxcXF58XFxcXF49fFxcXFx8fFxcXFx8PXxcXFxcfFxcXFx8fH4nO1xuXG4gIC8vIENvbW1vbiBtb2Rlc1xuICBobGpzLkJBQ0tTTEFTSF9FU0NBUEUgPSB7XG4gICAgYmVnaW46ICdcXFxcXFxcXFtcXFxcc1xcXFxTXScsIHJlbGV2YW5jZTogMFxuICB9O1xuICBobGpzLkFQT1NfU1RSSU5HX01PREUgPSB7XG4gICAgY2xhc3NOYW1lOiAnc3RyaW5nJyxcbiAgICBiZWdpbjogJ1xcJycsIGVuZDogJ1xcJycsXG4gICAgaWxsZWdhbDogJ1xcXFxuJyxcbiAgICBjb250YWluczogW2hsanMuQkFDS1NMQVNIX0VTQ0FQRV1cbiAgfTtcbiAgaGxqcy5RVU9URV9TVFJJTkdfTU9ERSA9IHtcbiAgICBjbGFzc05hbWU6ICdzdHJpbmcnLFxuICAgIGJlZ2luOiAnXCInLCBlbmQ6ICdcIicsXG4gICAgaWxsZWdhbDogJ1xcXFxuJyxcbiAgICBjb250YWluczogW2hsanMuQkFDS1NMQVNIX0VTQ0FQRV1cbiAgfTtcbiAgaGxqcy5QSFJBU0FMX1dPUkRTX01PREUgPSB7XG4gICAgYmVnaW46IC9cXGIoYXxhbnx0aGV8YXJlfEknbXxpc24ndHxkb24ndHxkb2Vzbid0fHdvbid0fGJ1dHxqdXN0fHNob3VsZHxwcmV0dHl8c2ltcGx5fGVub3VnaHxnb25uYXxnb2luZ3x3dGZ8c298c3VjaHx3aWxsfHlvdXx5b3VyfHRoZXl8bGlrZXxtb3JlKVxcYi9cbiAgfTtcbiAgaGxqcy5DT01NRU5UID0gZnVuY3Rpb24gKGJlZ2luLCBlbmQsIGluaGVyaXRzKSB7XG4gICAgdmFyIG1vZGUgPSBobGpzLmluaGVyaXQoXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ2NvbW1lbnQnLFxuICAgICAgICBiZWdpbjogYmVnaW4sIGVuZDogZW5kLFxuICAgICAgICBjb250YWluczogW11cbiAgICAgIH0sXG4gICAgICBpbmhlcml0cyB8fCB7fVxuICAgICk7XG4gICAgbW9kZS5jb250YWlucy5wdXNoKGhsanMuUEhSQVNBTF9XT1JEU19NT0RFKTtcbiAgICBtb2RlLmNvbnRhaW5zLnB1c2goe1xuICAgICAgY2xhc3NOYW1lOiAnZG9jdGFnJyxcbiAgICAgIGJlZ2luOiAnKD86VE9ET3xGSVhNRXxOT1RFfEJVR3xYWFgpOicsXG4gICAgICByZWxldmFuY2U6IDBcbiAgICB9KTtcbiAgICByZXR1cm4gbW9kZTtcbiAgfTtcbiAgaGxqcy5DX0xJTkVfQ09NTUVOVF9NT0RFID0gaGxqcy5DT01NRU5UKCcvLycsICckJyk7XG4gIGhsanMuQ19CTE9DS19DT01NRU5UX01PREUgPSBobGpzLkNPTU1FTlQoJy9cXFxcKicsICdcXFxcKi8nKTtcbiAgaGxqcy5IQVNIX0NPTU1FTlRfTU9ERSA9IGhsanMuQ09NTUVOVCgnIycsICckJyk7XG4gIGhsanMuTlVNQkVSX01PREUgPSB7XG4gICAgY2xhc3NOYW1lOiAnbnVtYmVyJyxcbiAgICBiZWdpbjogaGxqcy5OVU1CRVJfUkUsXG4gICAgcmVsZXZhbmNlOiAwXG4gIH07XG4gIGhsanMuQ19OVU1CRVJfTU9ERSA9IHtcbiAgICBjbGFzc05hbWU6ICdudW1iZXInLFxuICAgIGJlZ2luOiBobGpzLkNfTlVNQkVSX1JFLFxuICAgIHJlbGV2YW5jZTogMFxuICB9O1xuICBobGpzLkJJTkFSWV9OVU1CRVJfTU9ERSA9IHtcbiAgICBjbGFzc05hbWU6ICdudW1iZXInLFxuICAgIGJlZ2luOiBobGpzLkJJTkFSWV9OVU1CRVJfUkUsXG4gICAgcmVsZXZhbmNlOiAwXG4gIH07XG4gIGhsanMuQ1NTX05VTUJFUl9NT0RFID0ge1xuICAgIGNsYXNzTmFtZTogJ251bWJlcicsXG4gICAgYmVnaW46IGhsanMuTlVNQkVSX1JFICsgJygnICtcbiAgICAgICclfGVtfGV4fGNofHJlbScgICtcbiAgICAgICd8dnd8dmh8dm1pbnx2bWF4JyArXG4gICAgICAnfGNtfG1tfGlufHB0fHBjfHB4JyArXG4gICAgICAnfGRlZ3xncmFkfHJhZHx0dXJuJyArXG4gICAgICAnfHN8bXMnICtcbiAgICAgICd8SHp8a0h6JyArXG4gICAgICAnfGRwaXxkcGNtfGRwcHgnICtcbiAgICAgICcpPycsXG4gICAgcmVsZXZhbmNlOiAwXG4gIH07XG4gIGhsanMuUkVHRVhQX01PREUgPSB7XG4gICAgY2xhc3NOYW1lOiAncmVnZXhwJyxcbiAgICBiZWdpbjogL1xcLy8sIGVuZDogL1xcL1tnaW11eV0qLyxcbiAgICBpbGxlZ2FsOiAvXFxuLyxcbiAgICBjb250YWluczogW1xuICAgICAgaGxqcy5CQUNLU0xBU0hfRVNDQVBFLFxuICAgICAge1xuICAgICAgICBiZWdpbjogL1xcWy8sIGVuZDogL1xcXS8sXG4gICAgICAgIHJlbGV2YW5jZTogMCxcbiAgICAgICAgY29udGFpbnM6IFtobGpzLkJBQ0tTTEFTSF9FU0NBUEVdXG4gICAgICB9XG4gICAgXVxuICB9O1xuICBobGpzLlRJVExFX01PREUgPSB7XG4gICAgY2xhc3NOYW1lOiAndGl0bGUnLFxuICAgIGJlZ2luOiBobGpzLklERU5UX1JFLFxuICAgIHJlbGV2YW5jZTogMFxuICB9O1xuICBobGpzLlVOREVSU0NPUkVfVElUTEVfTU9ERSA9IHtcbiAgICBjbGFzc05hbWU6ICd0aXRsZScsXG4gICAgYmVnaW46IGhsanMuVU5ERVJTQ09SRV9JREVOVF9SRSxcbiAgICByZWxldmFuY2U6IDBcbiAgfTtcbiAgaGxqcy5NRVRIT0RfR1VBUkQgPSB7XG4gICAgLy8gZXhjbHVkZXMgbWV0aG9kIG5hbWVzIGZyb20ga2V5d29yZCBwcm9jZXNzaW5nXG4gICAgYmVnaW46ICdcXFxcLlxcXFxzKicgKyBobGpzLlVOREVSU0NPUkVfSURFTlRfUkUsXG4gICAgcmVsZXZhbmNlOiAwXG4gIH07XG5cbiAgcmV0dXJuIGhsanM7XG59KSk7XG4iLCJcclxuaW1wb3J0IG1hcmtlZCBmcm9tICdtYXJrZWQnO1xyXG5pbXBvcnQgJ2hpZ2hsaWdodC5qcy9zdHlsZXMvYXRvbS1vbmUtbGlnaHQuY3NzJ1xyXG5cclxuaW1wb3J0IGhsanMgZnJvbSAnaGlnaGxpZ2h0LmpzL2xpYi9oaWdobGlnaHQnO1xyXG5pbXBvcnQgamF2YXNjcmlwdCBmcm9tICdoaWdobGlnaHQuanMvbGliL2xhbmd1YWdlcy9qYXZhc2NyaXB0JztcclxuaW1wb3J0IGh0bWwgZnJvbSAnaGlnaGxpZ2h0LmpzL2xpYi9sYW5ndWFnZXMvaHRtbGJhcnMnO1xyXG5pbXBvcnQganNvbiBmcm9tICdoaWdobGlnaHQuanMvbGliL2xhbmd1YWdlcy9qc29uJztcclxuaW1wb3J0IGphdmEgZnJvbSAnaGlnaGxpZ2h0LmpzL2xpYi9sYW5ndWFnZXMvamF2YSc7XHJcbmltcG9ydCBiYXNoIGZyb20gJ2hpZ2hsaWdodC5qcy9saWIvbGFuZ3VhZ2VzL2Jhc2gnO1xyXG5obGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoJ2phdmFzY3JpcHQnLCBqYXZhc2NyaXB0KTtcclxuaGxqcy5yZWdpc3Rlckxhbmd1YWdlKCdodG1sJywgaHRtbCk7XHJcbmhsanMucmVnaXN0ZXJMYW5ndWFnZSgnanNvbicsIGpzb24pO1xyXG5obGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoJ2pzb24nLCBqYXZhKTtcclxuaGxqcy5yZWdpc3Rlckxhbmd1YWdlKCdiYXNoJywgYmFzaCk7XHJcblxyXG4kKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICB2YXIgc3RyID0gXCJcXG5cIiArXHJcbiAgICAgICAgXCJcXG5cIiArXHJcbiAgICAgICAgXCJb5paH5qGjXShodHRwczovL3d3dy53ZWJwYWNranMuY29tL2d1aWRlcy9nZXR0aW5nLXN0YXJ0ZWQvKVxcblwiICtcclxuICAgICAgICBcIlxcblwiICtcclxuICAgICAgICBcIndlYnBhY2sg55So5LqO57yW6K+RIEphdmFTY3JpcHQg5qih5Z2X44CCXFxuXCIgK1xyXG4gICAgICAgIFwi5LiA5pem5a6M5oiQ5a6J6KOF77yM5L2g5bCx5Y+v5Lul6YCa6L+HIHdlYnBhY2sgXFxuXCIgK1xyXG4gICAgICAgIFwi55qEIENMSSDmiJYgQVBJIOS4juWFtumFjeWQiOS6pOS6kuOAglxcblwiICtcclxuICAgICAgICBcIuWmguaenOS9oOi/mOS4jeeGn+aCiSB3ZWJwYWNr77yM6K+36ZiF6K+75qC45b+D5qaC5b+1XFxuXCIgK1xyXG4gICAgICAgIFwi5ZKM5omT5YyF5Zmo5a+55q+U77yM5LqG6Kej5Li65LuA5LmI5L2g6KaB5L2/55SoIHdlYnBhY2vvvIxcXG5cIiArXHJcbiAgICAgICAgXCLogIzkuI3mmK/npL7ljLrkuK3nmoTlhbbku5blt6XlhbfjgIJcXG5cIiArXHJcbiAgICAgICAgXCJcXG5cIiArXHJcbiAgICAgICAgXCIjIGJlZ2luXFxuXCIgK1xyXG4gICAgICAgIFwiXFxuXCIgK1xyXG4gICAgICAgIFwiIyMgd2VicGFja+WuieijhVxcblwiICtcclxuICAgICAgICBcIlxcblwiICtcclxuICAgICAgICBcImBgYGJhc2hcXG5cIiArXHJcbiAgICAgICAgXCJucG0gaW5zdGFsbCB3ZWJwYWNrIHdlYnBhY2stY2xpXFxuXCIgK1xyXG4gICAgICAgIFwiYGBgXFxuXCIgK1xyXG4gICAgICAgIFwiXFxuXCIgK1xyXG4gICAgICAgIFwiIyMgaGVsbG93b3JsZFxcblwiICtcclxuICAgICAgICBcIlxcblwiICtcclxuICAgICAgICBcImRpc3QvaW5kZXguaHRtbFxcblwiICtcclxuICAgICAgICBcImBgYGh0bWxcXG5cIiArXHJcbiAgICAgICAgXCI8IWRvY3R5cGUgaHRtbD5cXG5cIiArXHJcbiAgICAgICAgXCI8aHRtbD5cXG5cIiArXHJcbiAgICAgICAgXCI8aGVhZD5cXG5cIiArXHJcbiAgICAgICAgXCIgICAgPHRpdGxlPui1t+atpTwvdGl0bGU+XFxuXCIgK1xyXG4gICAgICAgIFwiPC9oZWFkPlxcblwiICtcclxuICAgICAgICBcIjxib2R5PlxcblwiICtcclxuICAgICAgICBcIjxzY3JpcHQgc3JjPVxcXCJtYWluLmpzXFxcIj48L3NjcmlwdD5cXG5cIiArXHJcbiAgICAgICAgXCI8L2JvZHk+XFxuXCIgK1xyXG4gICAgICAgIFwiPC9odG1sPlxcblwiICtcclxuICAgICAgICBcImBgYFxcblwiICtcclxuICAgICAgICBcIlxcblwiICtcclxuICAgICAgICBcInNyYy9pbmRleC5qc1xcblwiICtcclxuICAgICAgICBcImBgYGphdmFzY3JpcHRcXG5cIiArXHJcbiAgICAgICAgXCJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnXFxuXCIgK1xyXG4gICAgICAgIFwiXFxuXCIgK1xyXG4gICAgICAgIFwiZnVuY3Rpb24gY29tcG9uZW50KCkge1xcblwiICtcclxuICAgICAgICBcIiAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xcblwiICtcclxuICAgICAgICBcIlxcblwiICtcclxuICAgICAgICBcIiAgICAvLyBMb2Rhc2gsIG5vdyBpbXBvcnRlZCBieSB0aGlzIHNjcmlwdFxcblwiICtcclxuICAgICAgICBcIiAgICBlbGVtZW50LmlubmVySFRNTCA9IF8uam9pbihbJ0hlbGxvJywgJ3dlYnBhY2snXSwgJyAnKTtcXG5cIiArXHJcbiAgICAgICAgXCJcXG5cIiArXHJcbiAgICAgICAgXCIgICAgcmV0dXJuIGVsZW1lbnQ7XFxuXCIgK1xyXG4gICAgICAgIFwifVxcblwiICtcclxuICAgICAgICBcIlxcblwiICtcclxuICAgICAgICBcImRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29tcG9uZW50KCkpO1xcblwiICtcclxuICAgICAgICBcImBgYFxcblwiICtcclxuICAgICAgICBcIlxcblwiICtcclxuICAgICAgICBcIue8luivkWBucHggd2VicGFja2BcXG5cIiArXHJcbiAgICAgICAgXCJcXG5cIiArXHJcbiAgICAgICAgXCJcXG5cIiArXHJcbiAgICAgICAgXCLorr/pl65pbmRleC5odG1s77yM5Y+v5Lul55yL5YiwJ0hlbGxvIHdlYnBhY2sn44CCXFxuXCIgK1xyXG4gICAgICAgIFwiXFxuXCIgK1xyXG4gICAgICAgIFwiXFxuXCIgK1xyXG4gICAgICAgIFwiIyMg5L2/55So6YWN572u5paH5Lu2XFxuXCIgK1xyXG4gICAgICAgIFwiXFxuXCIgK1xyXG4gICAgICAgIFwi5Zyod2VicGFjazTkuK3vvIzlj6/ku6Xml6DpnIDkvb/nlKjku7vkvZXphY3nva7vvIzkvYbmmK/lnKjlrp7pmYVcXG5cIiArXHJcbiAgICAgICAgXCLpobnnm67kuK3nlLHkuo7ov4fkuo7lpI3mnYLnmoTlkb3ku6TooYzlkb3ku6TkuI3lpoLnm7TmjqXlnKjphY3nva7mlofku7ZcXG5cIiArXHJcbiAgICAgICAgXCLkuK3nvJblhpnjgILlm6DmraTvvIx3ZWJwYWNr5LuN54S25pSv5oyBd2VicGFjay5jb25maWcuanNcXG5cIiArXHJcbiAgICAgICAgXCJcXG5cIiArXHJcbiAgICAgICAgXCLliJvlu7rkuIDkuKp3ZWJwYWNrLmNvbmZpZy5qc1xcblwiICtcclxuICAgICAgICBcIlxcblwiICtcclxuICAgICAgICBcImBgYGphdmFzY3JpcHRcXG5cIiArXHJcbiAgICAgICAgXCJjb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xcblwiICtcclxuICAgICAgICBcIlxcblwiICtcclxuICAgICAgICBcIm1vZHVsZS5leHBvcnRzID0ge1xcblwiICtcclxuICAgICAgICBcIiAgZW50cnk6ICcuL3NyYy9pbmRleC5qcycsXFxuXCIgK1xyXG4gICAgICAgIFwiICBvdXRwdXQ6IHtcXG5cIiArXHJcbiAgICAgICAgXCIgICAgZmlsZW5hbWU6ICdidW5kbGUuanMnLFxcblwiICtcclxuICAgICAgICBcIiAgICBwYXRoOiBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnZGlzdCcpXFxuXCIgK1xyXG4gICAgICAgIFwiICB9XFxuXCIgK1xyXG4gICAgICAgIFwifTtcXG5cIiArXHJcbiAgICAgICAgXCJgYGBcXG5cIiArXHJcbiAgICAgICAgXCJcXG5cIiArXHJcbiAgICAgICAgXCLph43mlrDov5vooYzmiZPljIVgbnB4IHdlYnBhY2sgLS13ZWJwYWNrLmNvbmZpZy5qc2BcXG5cIiArXHJcbiAgICAgICAgXCLmr4/mrKHpg73ovpPlhaXlkb3ku6Tlvojpurvng6bvvIzlj6/ku6XlnKhwYWNrYWdlLmpzb27kuK3nmoRzY3JpcHRz5Lit5aKe5Yqg6YWN572uXFxuXCIgK1xyXG4gICAgICAgIFwi5bCx5Y+v5Lul6YCa6L+HbnBtIHJ1biBidWlsZOadpei/m+ihjOe8luivkeS6hlxcblwiICtcclxuICAgICAgICBcImBgYGpzb25cXG5cIiArXHJcbiAgICAgICAgXCJ7XFxuXCIgK1xyXG4gICAgICAgIFwiICBcXFwic2NyaXB0c1xcXCI6IHtcXG5cIiArXHJcbiAgICAgICAgXCIgICAgXFxcInRlc3RcXFwiOiBcXFwiZWNobyBcXFxcXFxcIkVycm9yOiBubyB0ZXN0IHNwZWNpZmllZFxcXFxcXFwiICYmIGV4aXQgMVxcXCIsXFxuXCIgK1xyXG4gICAgICAgIFwiICAgIFxcXCJidWlsZFxcXCI6IFxcXCJ3ZWJwYWNrXFxcIlxcblwiICtcclxuICAgICAgICBcIiAgfVxcblwiICtcclxuICAgICAgICBcIn1cXG5cIiArXHJcbiAgICAgICAgXCJgYGBcXG5cIiArXHJcbiAgICAgICAgXCJcXG5cIiArXHJcbiAgICAgICAgXCJcXG5cIiArXHJcbiAgICAgICAgXCIjIGRldmVsb3BcXG5cIiArXHJcbiAgICAgICAgXCJcXG5cIiArXHJcbiAgICAgICAgXCIjIyBzb3VyY2UgbWFwXFxuXCIgK1xyXG4gICAgICAgIFwiXFxuXCIgK1xyXG4gICAgICAgIFwi5byA5Y+R6L+H56iL5Lit77yM55Sx5LqOd2VicGFja+aJk+WMheaIkOS4gOS4qmpz5paH5Lu26Zq+5Lul6LCD6K+VXFxuXCIgK1xyXG4gICAgICAgIFwi5Y+v5Lul5Zyod2VicGFjay5jb25maWcuanPkuK3lop7liqDku6XkuIvku6PnoIHvvIzkvr/kuo7osIPor5XjgIJcXG5cIiArXHJcbiAgICAgICAgXCJgYGBqYXZhc2NyaXB0XFxuXCIgK1xyXG4gICAgICAgIFwibW9kdWxlLmV4cG9ydHMgPSB7XFxuXCIgK1xyXG4gICAgICAgIFwiICAgIGRldnRvb2w6ICdpbmxpbmUtc291cmNlLW1hcCdcXG5cIiArXHJcbiAgICAgICAgXCJ9XFxuXCIgK1xyXG4gICAgICAgIFwiYGBgXFxuXCIgK1xyXG4gICAgICAgIFwiXFxuXCIgK1xyXG4gICAgICAgIFwiIyMgd2F0Y2hcXG5cIiArXHJcbiAgICAgICAgXCJcXG5cIiArXHJcbiAgICAgICAgXCLkv67mlLnku6PnoIHlkI7oh6rliqhidWlsZO+8jOWcqHBhY2thZ2UuanNvbuS4reWinuWKoOS7peS4i+S7o+eggVxcblwiICtcclxuICAgICAgICBcIuWwseWPr+S7peS9v+eUqG5wbSBydW4gd2F0Y2jmnaXov5vooYzmjIHnu63nm5HlkKzjgIJcXG5cIiArXHJcbiAgICAgICAgXCJgYGBqc29uXFxuXCIgK1xyXG4gICAgICAgIFwie1xcblwiICtcclxuICAgICAgICBcIiAgXFxcInNjcmlwdHNcXFwiOiB7XFxuXCIgK1xyXG4gICAgICAgIFwiICAgIFxcXCJ0ZXN0XFxcIjogXFxcImVjaG8gXFxcXFxcXCJFcnJvcjogbm8gdGVzdCBzcGVjaWZpZWRcXFxcXFxcIiAmJiBleGl0IDFcXFwiLFxcblwiICtcclxuICAgICAgICBcIiAgICBcXFwiYnVpbGRcXFwiOiBcXFwid2VicGFja1xcXCIsXFxuXCIgK1xyXG4gICAgICAgIFwiICAgIFxcXCJ3YXRjaFxcXCI6IFxcXCJ3ZWJwYWNrIC0td2F0Y2hcXFwiXFxuXCIgK1xyXG4gICAgICAgIFwiICB9XFxuXCIgK1xyXG4gICAgICAgIFwifVxcblwiICtcclxuICAgICAgICBcImBgYFxcblwiICtcclxuICAgICAgICBcIlxcblwiICtcclxuICAgICAgICBcIiMjIHdlYnBhY2stZGV2LXNlcnZlclxcblwiICtcclxuICAgICAgICBcIlxcblwiICtcclxuICAgICAgICBcImB3ZWJwYWNrLWRldi1zZXJ2ZXJgIOS4uuS9oOaPkOS+m+S6huS4gOS4queugOWNleeahCB3ZWIg5pyN5Yqh5Zmo77yMXFxuXCIgK1xyXG4gICAgICAgIFwi5bm25LiU6IO95aSf5a6e5pe26YeN5paw5Yqg6L29KGxpdmUgcmVsb2FkaW5nKeOAglxcblwiICtcclxuICAgICAgICBcIummluWFiOi/m+ihjOWuieijhSBgbnBtIGluc3RhbGwgLS1zYXZlLWRldiB3ZWJwYWNrLWRldi1zZXJ2ZXJgXFxuXCIgK1xyXG4gICAgICAgIFwiXFxuXCIgK1xyXG4gICAgICAgIFwi5L+u5pS56YWN572u5paH5Lu277yM5ZGK6K+J5byA5Y+R5pyN5Yqh5ZmoKGRldiBzZXJ2ZXIp77yM5Zyo5ZOq6YeM5p+l5om+5paH5Lu277yaXFxuXCIgK1xyXG4gICAgICAgIFwiXFxuXCIgK1xyXG4gICAgICAgIFwid2VicGFjay5jb25maWcuanNcXG5cIiArXHJcbiAgICAgICAgXCJcXG5cIiArXHJcbiAgICAgICAgXCJgYGBqYXZhc2NyaXB0XFxuXCIgK1xyXG4gICAgICAgIFwibW9kdWxlLmV4cG9ydHMgPSB7XFxuXCIgK1xyXG4gICAgICAgIFwiICAgIGVudHJ5OiB7XFxuXCIgK1xyXG4gICAgICAgIFwiICAgICAgYXBwOiAnLi9zcmMvaW5kZXguanMnLFxcblwiICtcclxuICAgICAgICBcIiAgICAgIHByaW50OiAnLi9zcmMvcHJpbnQuanMnXFxuXCIgK1xyXG4gICAgICAgIFwiICAgIH0sXFxuXCIgK1xyXG4gICAgICAgIFwiICAgIGRldnRvb2w6ICdpbmxpbmUtc291cmNlLW1hcCcsLy9kZWJ1Z+aJvuWIsOa6kOS7o+eggVxcblwiICtcclxuICAgICAgICBcIiAgICAgICBkZXZTZXJ2ZXI6IHsvL+W8gOWPkeacjeWKoVxcblwiICtcclxuICAgICAgICBcIiAgICAgICAgIGNvbnRlbnRCYXNlOiAnLi9kaXN0J1xcblwiICtcclxuICAgICAgICBcIiAgICB9LFxcblwiICtcclxuICAgICAgICBcIiAgICBwbHVnaW5zOiBbXFxuXCIgK1xyXG4gICAgICAgIFwiICAgICAgbmV3IENsZWFuV2VicGFja1BsdWdpbihbJ2Rpc3QnXSksXFxuXCIgK1xyXG4gICAgICAgIFwiICAgICAgbmV3IEh0bWxXZWJwYWNrUGx1Z2luKHtcXG5cIiArXHJcbiAgICAgICAgXCIgICAgICAgIHRpdGxlOiAnRGV2ZWxvcG1lbnQnXFxuXCIgK1xyXG4gICAgICAgIFwiICAgICAgfSlcXG5cIiArXHJcbiAgICAgICAgXCIgICAgXSxcXG5cIiArXHJcbiAgICAgICAgXCIgICAgb3V0cHV0OiB7XFxuXCIgK1xyXG4gICAgICAgIFwiICAgICAgZmlsZW5hbWU6ICdbbmFtZV0uYnVuZGxlLmpzJyxcXG5cIiArXHJcbiAgICAgICAgXCIgICAgICBwYXRoOiBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnZGlzdCcpXFxuXCIgK1xyXG4gICAgICAgIFwiICAgIH1cXG5cIiArXHJcbiAgICAgICAgXCJ9O1xcblwiICtcclxuICAgICAgICBcImBgYFxcblwiICtcclxuICAgICAgICBcIlxcblwiICtcclxuICAgICAgICBcInBhY2thZ2UuanNvblxcblwiICtcclxuICAgICAgICBcIlxcblwiICtcclxuICAgICAgICBcImBgYGpzb25cXG5cIiArXHJcbiAgICAgICAgXCIge1xcblwiICtcclxuICAgICAgICBcIiAgICBcXFwibmFtZVxcXCI6IFxcXCJkZXZlbG9wbWVudFxcXCIsXFxuXCIgK1xyXG4gICAgICAgIFwiICAgIFxcXCJ2ZXJzaW9uXFxcIjogXFxcIjEuMC4wXFxcIixcXG5cIiArXHJcbiAgICAgICAgXCIgICAgXFxcImRlc2NyaXB0aW9uXFxcIjogXFxcIlxcXCIsXFxuXCIgK1xyXG4gICAgICAgIFwiICAgIFxcXCJtYWluXFxcIjogXFxcIndlYnBhY2suY29uZmlnLmpzXFxcIixcXG5cIiArXHJcbiAgICAgICAgXCIgICAgXFxcInNjcmlwdHNcXFwiOiB7XFxuXCIgK1xyXG4gICAgICAgIFwiICAgICAgXFxcInN0YXJ0XFxcIjogXFxcIndlYnBhY2stZGV2LXNlcnZlciAtLW9wZW5cXFwiXFxuXCIgK1xyXG4gICAgICAgIFwiICAgIH1cXG5cIiArXHJcbiAgICAgICAgXCJ9XFxuXCIgK1xyXG4gICAgICAgIFwiYGBgXFxuXCIgK1xyXG4gICAgICAgIFwiXFxuXCIgK1xyXG4gICAgICAgIFwi5L2/55So6Ieq5Yqo57yW6K+R5Luj56CB5pe277yM5Y+v6IO95Lya5Zyo5L+d5a2Y5paH5Lu25pe26YGH5Yiw5LiA5Lqb6Zeu6aKY44CC5p+Q5Lqb57yW6L6R5Zmo5YW35pyJ4oCc5a6J5YWo5YaZ5YWl4oCd5Yqf6IO977yMXFxuXCIgK1xyXG4gICAgICAgIFwi5Y+v6IO95Lya5b2x5ZON6YeN5paw57yW6K+R44CCXFxuXCIgK1xyXG4gICAgICAgIFwiXFxuXCIgK1xyXG4gICAgICAgIFwi6KaB5Zyo5LiA5Lqb5bi46KeB55qE57yW6L6R5Zmo5Lit56aB55So5q2k5Yqf6IO977yMXFxuXCIgK1xyXG4gICAgICAgIFwi6K+35p+l55yL5Lul5LiL5YiX6KGo77yaXFxuXCIgK1xyXG4gICAgICAgIFwiXFxuXCIgK1xyXG4gICAgICAgIFwiLSBTdWJsaW1lIFRleHQgMyAtIOWcqOeUqOaIt+mmlumAiemhuSh1c2VyIHByZWZlcmVuY2VzKeS4rea3u+WKoCBhdG9taWNfc2F2ZTogXFxcImZhbHNlXFxcIuOAglxcblwiICtcclxuICAgICAgICBcIi0gSW50ZWxsaUogLSDlnKjpppbpgInpobkocHJlZmVyZW5jZXMp5Lit5L2/55So5pCc57Si77yM5p+l5om+5YiwIFxcXCJzYWZlIHdyaXRlXFxcIiDlubbkuJTnpoHnlKjlroPjgIJcXG5cIiArXHJcbiAgICAgICAgXCItIFZpbSAtIOWcqOiuvue9rihzZXR0aW5ncynkuK3lop7liqAgOnNldCBiYWNrdXBjb3B5PXllc+OAglxcblwiICtcclxuICAgICAgICBcIi0gV2ViU3Rvcm0gLSDlnKggUHJlZmVyZW5jZXMgPiBBcHBlYXJhbmNlICYgQmVoYXZpb3IgPiBTeXN0ZW0gU2V0dGluZ3Mg5Lit5Y+W5raI6YCJ5LitIFVzZSBcXFwic2FmZSB3cml0ZVxcXCLjgIJcXG5cIiArXHJcbiAgICAgICAgXCJcXG5cIiArXHJcbiAgICAgICAgXCJcXG5cIiArXHJcbiAgICAgICAgXCIjIyBtb2R1bGVcXG5cIiArXHJcbiAgICAgICAgXCJcXG5cIiArXHJcbiAgICAgICAgXCLlvIDlj5Hku6PnoIHml7bvvIzljLrliIbmqKHlnZfljYHliIbph43opoFcXG5cIiArXHJcbiAgICAgICAgXCJcXG5cIiArXHJcbiAgICAgICAgXCLlpJrmqKHlnZflvJXnlKjnm7jlkIzkvp3otZbml7bkvJrmiqXplJnvvJpcXG5cIiArXHJcbiAgICAgICAgXCJgQ29uZmxpY3Q6IE11bHRpcGxlIGNodW5rcyBlbWl0IGFzc2V0cyB0byB0aGUgc2FtZSBmaWxlbmFtZSBidW5kbGUuanMgKGNodW5rcyAwIGFuZCAxKWBcXG5cIiArXHJcbiAgICAgICAgXCJcXG5cIiArXHJcbiAgICAgICAgXCLop6PlhrPph43lpI3lnZfvvJpcXG5cIiArXHJcbiAgICAgICAgXCJgYGBqYXZhc2NyaXB0XFxuXCIgK1xyXG4gICAgICAgIFwibW9kdWxlLmV4cG9ydHMgPSB7XFxuXCIgK1xyXG4gICAgICAgIFwiICAgIGVudHJ5OiB7XFxuXCIgK1xyXG4gICAgICAgIFwiICAgICAgICBcXFwibWFpblxcXCI6IFxcXCIuL3NyYy9pbmRleC5qc1xcXCIsXFxuXCIgK1xyXG4gICAgICAgIFwiICAgICAgICBcXFwibW9kdWxlMVxcXCI6IFxcXCIuL3NyYy9tb2R1bGUxLmpzXFxcIlxcblwiICtcclxuICAgICAgICBcIiAgICB9LFxcblwiICtcclxuICAgICAgICBcIiAgICBvdXRwdXQ6IHtcXG5cIiArXHJcbiAgICAgICAgXCIgICAgICAgIC8v6L6T5Ye66L+b6KGM6LCD5pW077yM5pyA57uI6L6T5Ye6OlxcblwiICtcclxuICAgICAgICBcIiAgICAgICAgLy9tYWluLmJ1bmRsZS5qcyAgbW9kdWxlMS5idW5kbGUuanMgY29tbW9uLmJ1bmRsZS5qc1xcblwiICtcclxuICAgICAgICBcIiAgICAgICAgZmlsZW5hbWU6ICdbbmFtZV0uYnVuZGxlLmpzJyxcXG5cIiArXHJcbiAgICAgICAgXCIgICAgICAgIGNodW5rRmlsZW5hbWU6ICdbbmFtZV0uYnVuZGxlLmpzJyxcXG5cIiArXHJcbiAgICAgICAgXCIgICAgICAgIHBhdGg6IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICdkaXN0JylcXG5cIiArXHJcbiAgICAgICAgXCIgICAgfSxcXG5cIiArXHJcbiAgICAgICAgXCIgICAgZGV2dG9vbDogJ2lubGluZS1zb3VyY2UtbWFwJywvL+W8gOWPkeWumuS9jeS9leWkhOaKpemUmVxcblwiICtcclxuICAgICAgICBcIiAgICBkZXZTZXJ2ZXI6IHtcXG5cIiArXHJcbiAgICAgICAgXCIgICAgICAgIGNvbnRlbnRCYXNlOiAnLi9kaXN0J1xcblwiICtcclxuICAgICAgICBcIiAgICB9LFxcblwiICtcclxuICAgICAgICBcIiAgICBwbHVnaW5zOiBbXFxuXCIgK1xyXG4gICAgICAgIFwiXFxuXCIgK1xyXG4gICAgICAgIFwiICAgIF0sXFxuXCIgK1xyXG4gICAgICAgIFwiICAgIG9wdGltaXphdGlvbjoge1xcblwiICtcclxuICAgICAgICBcIiAgICAgICAgc3BsaXRDaHVua3M6IHtcXG5cIiArXHJcbiAgICAgICAgXCIgICAgICAgICAgICBjYWNoZUdyb3Vwczoge1xcblwiICtcclxuICAgICAgICBcIiAgICAgICAgICAgICAgICBjb21tb25zOiB7XFxuXCIgK1xyXG4gICAgICAgIFwiICAgICAgICAgICAgICAgICAgICBuYW1lOiBcXFwiY29tbW9uc1xcXCIsXFxuXCIgK1xyXG4gICAgICAgIFwiICAgICAgICAgICAgICAgICAgICBjaHVua3M6IFxcXCJpbml0aWFsXFxcIixcXG5cIiArXHJcbiAgICAgICAgXCIgICAgICAgICAgICAgICAgICAgIG1pbkNodW5rczogMlxcblwiICtcclxuICAgICAgICBcIiAgICAgICAgICAgICAgICB9XFxuXCIgK1xyXG4gICAgICAgIFwiICAgICAgICAgICAgfVxcblwiICtcclxuICAgICAgICBcIiAgICAgICAgfVxcblwiICtcclxuICAgICAgICBcIiAgICB9LFxcblwiICtcclxuICAgICAgICBcIn07XFxuXCIgK1xyXG4gICAgICAgIFwiYGBgXFxuXCIgK1xyXG4gICAgICAgIFwiXFxuXCIgK1xyXG4gICAgICAgIFwiaHRtbOS+nei1luS/ruaUuSzlvJXnlKjkuInkuKpqc+aWh+S7tlxcblwiICtcclxuICAgICAgICBcImBgYGh0bWxcXG5cIiArXHJcbiAgICAgICAgXCI8c2NyaXB0IHNyYz1cXFwiY29tbW9ucy5idW5kbGUuanNcXFwiPjwvc2NyaXB0PlxcblwiICtcclxuICAgICAgICBcIjxzY3JpcHQgc3JjPVxcXCJtYWluLmJ1bmRsZS5qc1xcXCI+PC9zY3JpcHQ+XFxuXCIgK1xyXG4gICAgICAgIFwiPHNjcmlwdCBzcmM9XFxcIm1vZHVsZTEuYnVuZGxlLmpzXFxcIj48L3NjcmlwdD5cXG5cIiArXHJcbiAgICAgICAgXCJgYGBcIjtcclxuXHJcbiAgICBobGpzLmluaXRIaWdobGlnaHRpbmdPbkxvYWQoKTtcclxuICAgIHZhciBteU1hcmtlZCA9IHJlcXVpcmUoJ21hcmtlZCcpO1xyXG4gICAgbXlNYXJrZWQuc2V0T3B0aW9ucyh7XHJcbiAgICAgICAgcmVuZGVyZXI6IG5ldyBteU1hcmtlZC5SZW5kZXJlcigpLFxyXG4gICAgICAgIGhpZ2hsaWdodDogZnVuY3Rpb24oY29kZSkge1xyXG4gICAgICAgICAgICB2YXIgcyA9ICBobGpzLmhpZ2hsaWdodEF1dG8oY29kZSkudmFsdWU7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHMpO1xyXG4gICAgICAgICAgICByZXR1cm4gcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIHBlZGFudGljOiBmYWxzZSxcclxuICAgICAgICBnZm06IHRydWUsXHJcbiAgICAgICAgdGFibGVzOiB0cnVlLFxyXG4gICAgICAgIGJyZWFrczogZmFsc2UsXHJcbiAgICAgICAgc2FuaXRpemU6IGZhbHNlLFxyXG4gICAgICAgIHNtYXJ0TGlzdHM6IHRydWUsXHJcbiAgICAgICAgc21hcnR5cGFudHM6IGZhbHNlLFxyXG4gICAgICAgIHhodG1sOiBmYWxzZVxyXG4gICAgfSk7XHJcblxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnQnKS5pbm5lckhUTUwgPSBteU1hcmtlZChzdHIpO1xyXG5cclxuICAgICQoXCJwcmUgY29kZVwiKS5hZGRDbGFzcyhcImhsanNcIik7XHJcbn0pO1xyXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuL2F0b20tb25lLWxpZ2h0LmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4vYXRvbS1vbmUtbGlnaHQuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuL2F0b20tb25lLWxpZ2h0LmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIvKlxcblxcbkF0b20gT25lIExpZ2h0IGJ5IERhbmllbCBHYW1hZ2VcXG5PcmlnaW5hbCBPbmUgTGlnaHQgU3ludGF4IHRoZW1lIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2F0b20vb25lLWxpZ2h0LXN5bnRheFxcblxcbmJhc2U6ICAgICNmYWZhZmFcXG5tb25vLTE6ICAjMzgzYTQyXFxubW9uby0yOiAgIzY4NmI3N1xcbm1vbm8tMzogICNhMGExYTdcXG5odWUtMTogICAjMDE4NGJiXFxuaHVlLTI6ICAgIzQwNzhmMlxcbmh1ZS0zOiAgICNhNjI2YTRcXG5odWUtNDogICAjNTBhMTRmXFxuaHVlLTU6ICAgI2U0NTY0OVxcbmh1ZS01LTI6ICNjOTEyNDNcXG5odWUtNjogICAjOTg2ODAxXFxuaHVlLTYtMjogI2MxODQwMVxcblxcbiovXFxuXFxuLmhsanMge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBvdmVyZmxvdy14OiBhdXRvO1xcbiAgcGFkZGluZzogMC41ZW07XFxuICBjb2xvcjogIzM4M2E0MjtcXG4gIGJhY2tncm91bmQ6ICNmYWZhZmE7XFxufVxcblxcbi5obGpzLWNvbW1lbnQsXFxuLmhsanMtcXVvdGUge1xcbiAgY29sb3I6ICNhMGExYTc7XFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxufVxcblxcbi5obGpzLWRvY3RhZyxcXG4uaGxqcy1rZXl3b3JkLFxcbi5obGpzLWZvcm11bGEge1xcbiAgY29sb3I6ICNhNjI2YTQ7XFxufVxcblxcbi5obGpzLXNlY3Rpb24sXFxuLmhsanMtbmFtZSxcXG4uaGxqcy1zZWxlY3Rvci10YWcsXFxuLmhsanMtZGVsZXRpb24sXFxuLmhsanMtc3Vic3Qge1xcbiAgY29sb3I6ICNlNDU2NDk7XFxufVxcblxcbi5obGpzLWxpdGVyYWwge1xcbiAgY29sb3I6ICMwMTg0YmI7XFxufVxcblxcbi5obGpzLXN0cmluZyxcXG4uaGxqcy1yZWdleHAsXFxuLmhsanMtYWRkaXRpb24sXFxuLmhsanMtYXR0cmlidXRlLFxcbi5obGpzLW1ldGEtc3RyaW5nIHtcXG4gIGNvbG9yOiAjNTBhMTRmO1xcbn1cXG5cXG4uaGxqcy1idWlsdF9pbixcXG4uaGxqcy1jbGFzcyAuaGxqcy10aXRsZSB7XFxuICBjb2xvcjogI2MxODQwMTtcXG59XFxuXFxuLmhsanMtYXR0cixcXG4uaGxqcy12YXJpYWJsZSxcXG4uaGxqcy10ZW1wbGF0ZS12YXJpYWJsZSxcXG4uaGxqcy10eXBlLFxcbi5obGpzLXNlbGVjdG9yLWNsYXNzLFxcbi5obGpzLXNlbGVjdG9yLWF0dHIsXFxuLmhsanMtc2VsZWN0b3ItcHNldWRvLFxcbi5obGpzLW51bWJlciB7XFxuICBjb2xvcjogIzk4NjgwMTtcXG59XFxuXFxuLmhsanMtc3ltYm9sLFxcbi5obGpzLWJ1bGxldCxcXG4uaGxqcy1saW5rLFxcbi5obGpzLW1ldGEsXFxuLmhsanMtc2VsZWN0b3ItaWQsXFxuLmhsanMtdGl0bGUge1xcbiAgY29sb3I6ICM0MDc4ZjI7XFxufVxcblxcbi5obGpzLWVtcGhhc2lzIHtcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXG59XFxuXFxuLmhsanMtc3Ryb25nIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG4uaGxqcy1saW5rIHtcXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iXSwic291cmNlUm9vdCI6IiJ9